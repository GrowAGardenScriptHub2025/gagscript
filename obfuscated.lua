
local HttpService = game:GetService("HttpService")
loadstring(HttpService:Base64Decode("if IY_LOADED and not _G.IY_DEBUG == true then 		
    return  
end   
pcall(nNvTYekW() getgenv().IY_LOADED = true end)  	
if not game:IsLoaded() then game.Loaded:Wait() end		
nNvTYekW ivufETgC(iSBTvRHR, vCCJmWVD, fallback)   		
    if type(vCCJmWVD) == iSBTvRHR then return vCCJmWVD end   
    return fallback or nil   
end  
cloneref = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), cloneref, nNvTYekW(...) return ... end)   	
sethidden =  ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), sethiddenproperty or set_hidden_property or set_hidden_prop)   
gethidden =  ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), gethiddenproperty or get_hidden_property or get_hidden_prop)   
queueteleport =  ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), queue_on_teleport or (syn and syn.queue_on_teleport) or (fluxus and fluxus.queue_on_teleport))  
httprequest =  ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), request or http_request or (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request))  	
everyClipboard = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), setclipboard or toclipboard or set_clipboard or (Clipboard and Clipboard.set))  		
firetouchinterest = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), firetouchinterest)  	
waxwritefile, waxreadfile = writefile, readfile   
writefile = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), waxwritefile) and nNvTYekW(kmLMbdvp, DnDwCpji, safe)   
    if safe == true then return pcall(waxwritefile, kmLMbdvp, DnDwCpji) end   
    waxwritefile(kmLMbdvp, DnDwCpji) 		
end	
readfile = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), waxreadfile) and nNvTYekW(kmLMbdvp, safe) 		
    if safe == true then return pcall(waxreadfile, kmLMbdvp) end  	
    return waxreadfile(kmLMbdvp) 		
end 	
isfile = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), isfile, readfile and nNvTYekW(kmLMbdvp)	
    local QAIJFRsB, jkbTUbqm = pcall(nNvTYekW()
        return readfile(kmLMbdvp)	
    end)		
    return QAIJFRsB and jkbTUbqm ~= nil and jkbTUbqm ~= '' 	
end) 
makefolder = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), makefolder)  	
isfolder = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), isfolder) 		
waxgetcustomasset = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), getcustomasset or getsynasset)   
hookfunction = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), hookfunction) 	
hookmetamethod = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), hookmetamethod)   
getnamecallmethod = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), getnamecallmethod or get_namecall_method) 		
checkcaller = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), checkcaller, nNvTYekW() return false end) 		
newcclosure = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), newcclosure)   		
getgc = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), getgc or get_gc_objects)   		
setthreadidentity = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), setthreadidentity or (syn and syn.set_thread_identity) or syn_context_set or setthreadcontext)		
replicatesignal = ivufETgC(HttpService:Base64Decode('ZnVuY3Rpb24='), replicatesignal) 
COREGUI = cloneref(game:GetService(HttpService:Base64Decode('Q29yZUd1aQ=='))) 	
Players = cloneref(game:GetService(HttpService:Base64Decode('UGxheWVycw==')))
UserInputService = cloneref(game:GetService(HttpService:Base64Decode('VXNlcklucHV0U2VydmljZQ==')))  
TweenService = cloneref(game:GetService(HttpService:Base64Decode('VHdlZW5TZXJ2aWNl')))  	
HttpService = cloneref(game:GetService(HttpService:Base64Decode('SHR0cFNlcnZpY2U='))) 
MarketplaceService = cloneref(game:GetService(HttpService:Base64Decode('TWFya2V0cGxhY2VTZXJ2aWNl')))	
RunService = cloneref(game:GetService(HttpService:Base64Decode('UnVuU2VydmljZQ==')))   
uLVoGRKr = cloneref(game:GetService(HttpService:Base64Decode('VGVsZXBvcnRTZXJ2aWNl')))  	
StarterGui = cloneref(game:GetService(HttpService:Base64Decode('U3RhcnRlckd1aQ=='))) 	
GuiService = cloneref(game:GetService(HttpService:Base64Decode('R3VpU2VydmljZQ=='))) 		
Lighting = cloneref(game:GetService(HttpService:Base64Decode('TGlnaHRpbmc=')))   	
ContextActionService = cloneref(game:GetService(HttpService:Base64Decode('Q29udGV4dEFjdGlvblNlcnZpY2U=')))  		
ReplicatedStorage = cloneref(game:GetService(HttpService:Base64Decode('UmVwbGljYXRlZFN0b3JhZ2U='))) 		
GroupService = cloneref(game:GetService(HttpService:Base64Decode('R3JvdXBTZXJ2aWNl')))   		
PathService = cloneref(game:GetService(HttpService:Base64Decode('UGF0aGZpbmRpbmdTZXJ2aWNl'))) 
SoundService = cloneref(game:GetService(HttpService:Base64Decode('U291bmRTZXJ2aWNl')))		
Teams = cloneref(game:GetService(HttpService:Base64Decode('VGVhbXM=')))   
StarterPlayer = cloneref(game:GetService(HttpService:Base64Decode('U3RhcnRlclBsYXllcg=='))) 	
InsertService = cloneref(game:GetService(HttpService:Base64Decode('SW5zZXJ0U2VydmljZQ==')))   
ChatService = cloneref(game:GetService(HttpService:Base64Decode('Q2hhdA==')))  		
ProximityPromptService = cloneref(game:GetService(HttpService:Base64Decode('UHJveGltaXR5UHJvbXB0U2VydmljZQ==')))  
ContentProvider = cloneref(game:GetService(HttpService:Base64Decode('Q29udGVudFByb3ZpZGVy')))  		
StatsService = cloneref(game:GetService(HttpService:Base64Decode('U3RhdHM='))) 	
MaterialService = cloneref(game:GetService(HttpService:Base64Decode('TWF0ZXJpYWxTZXJ2aWNl')))  	
AvatarEditorService = cloneref(game:GetService(HttpService:Base64Decode('QXZhdGFyRWRpdG9yU2VydmljZQ==')))  	
TextService = cloneref(game:GetService(HttpService:Base64Decode('VGV4dFNlcnZpY2U='))) 		
TextChatService = cloneref(game:GetService(HttpService:Base64Decode('VGV4dENoYXRTZXJ2aWNl')))   	
CaptureService = cloneref(game:GetService(HttpService:Base64Decode('Q2FwdHVyZVNlcnZpY2U=')))	
VoiceChatService = cloneref(game:GetService(HttpService:Base64Decode('Vm9pY2VDaGF0U2VydmljZQ=='))) 	
IYMouse = cloneref(Players.FntTRqLK:GetMouse())		
PlayerGui = cloneref(Players.FntTRqLK:FindFirstChildWhichIsA(HttpService:Base64Decode('UGxheWVyR3Vp')))   
PlaceId, JobId = game.PlaceId, game.JobId  	
IsOnMobile = table.find({Enum.Platform.Android, Enum.Platform.IOS}, UserInputService:GetPlatform())		
isLegacyChat = TextChatService.ChatVersion == Enum.ChatVersion.LegacyChatService  		
local gnZUWJdX = {
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvYmluZHNhbmRwbHVnaW5zLnBuZw==')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzUxNDc2OTU0NzQ='), 		
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzUwNTQ2NjM2NTA='),
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdGFsaWFzZXMucG5n')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzUxNDc0ODg2NTg='),   	
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdGtleWJpbmRzLnBuZw==')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzEyOTY5NzkzMA=='),
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdHRoZW1lLnBuZw==')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzQ5MTE5NjI5OTE='),  
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdHdheXBvaW50cy5wbmc=')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzUxNDc0ODg1OTI='),	
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvaW1nc3R1ZGlvcGx1Z2lubG9nby5wbmc=')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzQxMTMwNTAzODM='), 	
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvbG9nby5wbmc=')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzEzNTI1NDM4NzM='),   	
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvbWluaW1pemUucG5n')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzI0MDY2MTcwMzE='),  		
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvcGluLnBuZw==')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzYyMzQ2OTEzNTA='),   		
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvcmVmZXJlbmNlLnBuZw==')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzM1MjMyNDM3NTU='),
    [HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvc2V0dGluZ3MucG5n')] = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzEyMDQzOTcwMjk=')   
}   		
local nNvTYekW getcustomasset(asset)  	
    if waxgetcustomasset then
        local QAIJFRsB, jkbTUbqm = pcall(nNvTYekW() 		
            return waxgetcustomasset(asset)   		
        end)		
        if QAIJFRsB and jkbTUbqm ~= nil and jkbTUbqm ~= '' then 	
            return jkbTUbqm 
        end
    end   
    return gnZUWJdX[asset]   
end
if makefolder and isfolder and writefile and isfile then
    pcall(nNvTYekW()    	
        local DGtZwaxx = HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL3JlZnMvaGVhZHMvbWFpbi8=')  
        for OpEnJPoA, folder in {HttpService:Base64Decode('aW5maW5pdGV5aWVsZA=='), HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHM=')} do
            if not isfolder(folder) then   
                makefolder(folder)  	
            end 		
        end	
        for TeWlJvur in gnZUWJdX do	
            if not isfile(TeWlJvur) then   	
                writefile(TeWlJvur, game:HttpGet((TeWlJvur:gsub(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC8='), DGtZwaxx))))  	
            end 
        end 
        if IsOnMobile then writefile(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvLm5vbWVkaWE=')) end	
    end) 		
end 
pcall(nNvTYekW() 		
    for OpEnJPoA, kmLMbdvp in {HttpService:Base64Decode('SVlfRkU='), HttpService:Base64Decode('SVlTZXR0aW5ncw=='), HttpService:Base64Decode('SVlEYXRh'), HttpService:Base64Decode('c2V0dGluZ3M='), HttpService:Base64Decode('ZnVja3U='), HttpService:Base64Decode('RGV4U2V0dGluZ3M='), HttpService:Base64Decode('amV3'), HttpService:Base64Decode('MTM3NTg1OTEzMzAwMTI0MDU4Ng=='), HttpService:Base64Decode('ZGlzY29yZF9pZA==')} do   
        delfile(kmLMbdvp)   	
    end  
end)		
currentVersion = HttpService:Base64Decode('Ni4zLjI=')   
ScaledHolder = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 
Scale = Instance.new(HttpService:Base64Decode('VUlTY2FsZQ==')) 	
Holder = Instance.new(HttpService:Base64Decode('RnJhbWU='))  	
Title = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  		
Dark = Instance.new(HttpService:Base64Decode('RnJhbWU='))  	
Cmdbar = Instance.new(HttpService:Base64Decode('VGV4dEJveA==')) 		
CMDsF = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))   		
cmdListLayout = Instance.new(HttpService:Base64Decode('VUlMaXN0TGF5b3V0'))  
SettingsButton = Instance.new(HttpService:Base64Decode('SW1hZ2VCdXR0b24='))   		
ColorsButton = Instance.new(HttpService:Base64Decode('SW1hZ2VCdXR0b24='))
Settings = Instance.new(HttpService:Base64Decode('RnJhbWU='))   		
Prefix = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   
PrefixBox = Instance.new(HttpService:Base64Decode('VGV4dEJveA=='))   	
Keybinds = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   		
StayOpen = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
Button = Instance.new(HttpService:Base64Decode('RnJhbWU='))  	
On = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   
Positions = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))	
EventBind = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))
Plugins = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  		
Example = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  		
Notification = Instance.new(HttpService:Base64Decode('RnJhbWU='))  		
Title_2 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  
Text_2 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 	
CloseButton = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   	
CloseImage = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))   		
PinButton = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
PinImage = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))
Tooltip = Instance.new(HttpService:Base64Decode('RnJhbWU='))		
Title_3 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  
Description = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
IntroBackground = Instance.new(HttpService:Base64Decode('RnJhbWU='))
Logo = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))		
Credits = Instance.new(HttpService:Base64Decode('VGV4dEJveA=='))   	
KeybindsFrame = Instance.new(HttpService:Base64Decode('RnJhbWU='))		
Close = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))	
Add = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
Delete = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
Holder_2 = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))
Example_2 = Instance.new(HttpService:Base64Decode('RnJhbWU='))  	
Text_3 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))	
Delete_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  		
KeybindEditor = Instance.new(HttpService:Base64Decode('RnJhbWU='))  	
background_2 = Instance.new(HttpService:Base64Decode('RnJhbWU='))   		
Dark_3 = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 	
PDIKxGjv = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))
BindTo = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
TriggerLabel = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))	
BindTriggerSelect = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
Add_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   
Toggles = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU=')) 		
ClickTP  = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
Select = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 	
ClickDelete = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   		
Select_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
Cmdbar_2 = Instance.new(HttpService:Base64Decode('VGV4dEJveA=='))  		
Cmdbar_3 = Instance.new(HttpService:Base64Decode('VGV4dEJveA==')) 	
CreateToggle = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  		
Button_2 = Instance.new(HttpService:Base64Decode('RnJhbWU='))   		
On_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
shadow_2 = Instance.new(HttpService:Base64Decode('RnJhbWU='))
PopupText_2 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   		
Exit_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
ExitImage_2 = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))	
PositionsFrame = Instance.new(HttpService:Base64Decode('RnJhbWU='))   	
Close_3 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))	
Delete_5 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))
Part = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   	
Holder_4 = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))  
Example_4 = Instance.new(HttpService:Base64Decode('RnJhbWU='))   	
Text_5 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
Delete_6 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   	
TP = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
AliasesFrame = Instance.new(HttpService:Base64Decode('RnJhbWU='))		
Close_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 	
Delete_3 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   	
Holder_3 = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU=')) 	
Example_3 = Instance.new(HttpService:Base64Decode('RnJhbWU='))	
Text_4 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   		
Delete_4 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   
Aliases = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))	
PluginsFrame = Instance.new(HttpService:Base64Decode('RnJhbWU='))   		
Close_4 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  		
Add_3 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
Holder_5 = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))  
Example_5 = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 
Text_6 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 	
Delete_7 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   
PluginEditor = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 
background_3 = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 		
Dark_2 = Instance.new(HttpService:Base64Decode('RnJhbWU='))   	
Img = Instance.new(HttpService:Base64Decode('SW1hZ2VCdXR0b24=')) 	
AddPlugin = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  		
FileName = Instance.new(HttpService:Base64Decode('VGV4dEJveA=='))   
About = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 
Directions_2 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  		
shadow_3 = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 		
PopupText_3 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))
Exit_3 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
ExitImage_3 = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))  	
AliasHint = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   	
PluginsHint = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 
PositionsHint = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   		
ToPartFrame = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 		
background_4 = Instance.new(HttpService:Base64Decode('RnJhbWU='))   		
ChoosePart = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))
CopyPath = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
Directions_3 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 		
Path = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  	
shadow_4 = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 	
PopupText_5 = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   
Exit_4 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
ExitImage_5 = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))   		
logs = Instance.new(HttpService:Base64Decode('RnJhbWU='))		
tcHPQPoB = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 
Hide = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 	
ImageLabel = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))   	
dQPxDAAH = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  		
PthUZGpi = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
ImageLabel_2 = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA==')) 
QwyOPxIw = Instance.new(HttpService:Base64Decode('RnJhbWU='))	
chat = Instance.new(HttpService:Base64Decode('RnJhbWU=')) 
Clear = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 		
SaveChatlogs = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
Toggle = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
scroll_2 = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))   	
join = Instance.new(HttpService:Base64Decode('RnJhbWU='))   
Toggle_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))		
Clear_2 = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
scroll_3 = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))
listlayout = Instance.new(HttpService:Base64Decode('VUlMaXN0TGF5b3V0'),scroll_3)
selectChat = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   
selectJoin = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  		
nNvTYekW UhfdZAQW()	
	local OjRdnGde = math.random(10,20)   	
	local PQnKCaIH = {} 
	for i = 1, OjRdnGde do
		PQnKCaIH[i] = string.cFlbMRaO(math.random(32, 126))   	
	end  		
	return table.concat(PQnKCaIH)   		
end  
PARENT = nil  	
if get_hidden_gui or gethui then  		
    local xLszwcMX = get_hidden_gui or gethui
    local FUIxeBpF = Instance.new(HttpService:Base64Decode('U2NyZWVuR3Vp'))		
    FUIxeBpF.FrpOJNKH = UhfdZAQW()  
    FUIxeBpF.Parent = xLszwcMX()  		
    PARENT = FUIxeBpF 
elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then  
    local FUIxeBpF = Instance.new(HttpService:Base64Decode('U2NyZWVuR3Vp'))  
    FUIxeBpF.FrpOJNKH = UhfdZAQW()  
    syn.protect_gui(FUIxeBpF)	
    FUIxeBpF.Parent = COREGUI  
    PARENT = FUIxeBpF   		
elseif COREGUI:FindFirstChild(HttpService:Base64Decode('Um9ibG94R3Vp')) then		
    PARENT = COREGUI.RobloxGui 		
else 		
    local FUIxeBpF = Instance.new(HttpService:Base64Decode('U2NyZWVuR3Vp'))  	
    FUIxeBpF.FrpOJNKH = UhfdZAQW()   
    FUIxeBpF.Parent = COREGUI   
    PARENT = FUIxeBpF 		
end   		
shade1 = {}  		
shade2 = {}   
shade3 = {}	
text1 = {}   
text2 = {} 
scroll = {} 		
ScaledHolder.FrpOJNKH = UhfdZAQW()   		
ScaledHolder.eCEGCheh = UDim2.fromScale(1, 1)   		
ScaledHolder.BackgroundTransparency = 1   	
ScaledHolder.Parent = PARENT 		
Scale.FrpOJNKH = UhfdZAQW()
Holder.FrpOJNKH = UhfdZAQW()  
Holder.Parent = ScaledHolder		
Holder.Active = true  		
Holder.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
Holder.BorderSizePixel = 0  		
Holder.FZxyaMZC = UDim2.new(1, -250, 1, -220)   
Holder.eCEGCheh = UDim2.new(0, 250, 0, 220)   
Holder.ZIndex = 10		
table.insert(shade2,Holder)
Title.FrpOJNKH = HttpService:Base64Decode('VGl0bGU=')
Title.Parent = Holder	
Title.Active = true   
Title.BackgroundColor3 = Color3.fromRGB(36,36,37)  	
Title.BorderSizePixel = 0   		
Title.eCEGCheh = UDim2.new(0, 250, 0, 20) 	
Title.Font = Enum.Font.SourceSans  
Title.TextSize = 18  
Title.Text = HttpService:Base64Decode('SW5maW5pdGUgWWllbGQgRkUgdg==') .. currentVersion		
do   
	local YVdhmtwn = ({		
		[HttpService:Base64Decode('MDEgMDE=')] = HttpService:Base64Decode('8J+Ohg=='),  	
		[(nNvTYekW(Year)   		
			local kGKSkmjQ = math.floor(Year/100)   		
			local CSucsSET = math.floor((13+8*kGKSkmjQ)/25) 	
			local FrvZZYyl = (15-CSucsSET+kGKSkmjQ-math.floor(kGKSkmjQ/4))%30 	
			local wIWlwmst = (4+kGKSkmjQ-math.floor(kGKSkmjQ/4))%7
			local UyWliikj = (19*(Year%19)+FrvZZYyl)%30  	
			local sxlzcAIs = (2*(Year%4)+4*(Year%7)+6*UyWliikj+wIWlwmst)%7 
			local OULpbpAM = (22+UyWliikj+sxlzcAIs)   		
			if UyWliikj == 29 and sxlzcAIs == 6 then   	
				return HttpService:Base64Decode('MDQgMTk=')  	
			elseif UyWliikj == 28 and sxlzcAIs == 6 then  
				return HttpService:Base64Decode('MDQgMTg=')   
			elseif 31 < OULpbpAM then 		
				return (HttpService:Base64Decode('MDQgJTAyZA==')):format(OULpbpAM-31)		
			end		
			return (HttpService:Base64Decode('MDMgJTAyZA==')):format(OULpbpAM)   
		end)(tonumber(os.dateHttpService:Base64Decode('JVk=')))] = HttpService:Base64Decode('8J+lmg=='), 	
		[HttpService:Base64Decode('MTAgMzE=')] = HttpService:Base64Decode('8J+Ogw=='),  		
		[HttpService:Base64Decode('MTIgMjU=')] = HttpService:Base64Decode('8J+OhA==')   		
	})[os.vlBJUnxb(HttpService:Base64Decode('JW0gJWQ='))]		
	if YVdhmtwn then		
		Title.Text = (HttpService:Base64Decode('JXMgJXMgJXM=')):format(YVdhmtwn, Title.Text, YVdhmtwn)  
	end   	
end   		
Title.TextColor3 = Color3.new(1, 1, 1)   		
Title.ZIndex = 10  
table.insert(shade1,Title)		
table.insert(text1,Title) 
Dark.FrpOJNKH = HttpService:Base64Decode('RGFyaw==') 		
Dark.Parent = Holder 
Dark.Active = true   		
Dark.BackgroundColor3 = Color3.fromRGB(36, 36, 37)   	
Dark.BorderSizePixel = 0 		
Dark.FZxyaMZC = UDim2.new(0, 0, 0, 45)  
Dark.eCEGCheh = UDim2.new(0, 250, 0, 175)  	
Dark.ZIndex = 10  		
table.insert(shade1,Dark)		
Cmdbar.FrpOJNKH = HttpService:Base64Decode('Q21kYmFy')   	
Cmdbar.Parent = Holder 		
Cmdbar.BackgroundTransparency = 1   		
Cmdbar.BorderSizePixel = 0	
Cmdbar.FZxyaMZC = UDim2.new(0, 5, 0, 20)  		
Cmdbar.eCEGCheh = UDim2.new(0, 240, 0, 25)  
Cmdbar.Font = Enum.Font.SourceSans	
Cmdbar.TextSize = 18 	
Cmdbar.TextXAlignment = Enum.TextXAlignment.Left  		
Cmdbar.TextColor3 = Color3.new(1, 1, 1) 	
Cmdbar.Text = '' 	
Cmdbar.ZIndex = 10   
Cmdbar.PlaceholderText = HttpService:Base64Decode('Q29tbWFuZCBCYXI=') 		
CMDsF.FrpOJNKH = HttpService:Base64Decode('Q01Ecw==')  		
CMDsF.Parent = Holder   
CMDsF.BackgroundTransparency = 1 	
CMDsF.BorderSizePixel = 0 		
CMDsF.FZxyaMZC = UDim2.new(0, 5, 0, 45) 		
CMDsF.eCEGCheh = UDim2.new(0, 245, 0, 175)   	
CMDsF.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)  
CMDsF.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 
CMDsF.CanvasSize = UDim2.new(0, 0, 0, 0)
CMDsF.MidImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   	
CMDsF.ScrollBarThickness = 8  		
CMDsF.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 		
CMDsF.VerticalScrollBarInset = HttpService:Base64Decode('QWx3YXlz') 	
CMDsF.ZIndex = 10 
table.insert(scroll,CMDsF)  		
cmdListLayout.Parent = CMDsF 	
SettingsButton.FrpOJNKH = HttpService:Base64Decode('U2V0dGluZ3NCdXR0b24=') 	
SettingsButton.Parent = Holder 
SettingsButton.BackgroundTransparency = 1   
SettingsButton.FZxyaMZC = UDim2.new(0, 230, 0, 0)  
SettingsButton.eCEGCheh = UDim2.new(0, 20, 0, 20) 		
SettingsButton.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvc2V0dGluZ3MucG5n')) 	
SettingsButton.ZIndex = 10		
ReferenceButton = Instance.new(HttpService:Base64Decode('SW1hZ2VCdXR0b24='))  		
ReferenceButton.FrpOJNKH = HttpService:Base64Decode('UmVmZXJlbmNlQnV0dG9u')
ReferenceButton.Parent = Holder  
ReferenceButton.BackgroundTransparency = 1   
ReferenceButton.FZxyaMZC = UDim2.new(0, 212, 0, 2)  
ReferenceButton.eCEGCheh = UDim2.new(0, 16, 0, 16) 		
ReferenceButton.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvcmVmZXJlbmNlLnBuZw==')) 	
ReferenceButton.ZIndex = 10
Settings.FrpOJNKH = HttpService:Base64Decode('U2V0dGluZ3M=')		
Settings.Parent = Holder		
Settings.Active = true   
Settings.BackgroundColor3 = Color3.fromRGB(36, 36, 37)  
Settings.BorderSizePixel = 0   		
Settings.FZxyaMZC = UDim2.new(0, 0, 0, 220)   		
Settings.eCEGCheh = UDim2.new(0, 250, 0, 175)		
Settings.ZIndex = 10  
table.insert(shade1,Settings)
SettingsHolder = Instance.new(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))
SettingsHolder.FrpOJNKH = HttpService:Base64Decode('SG9sZGVy')  		
SettingsHolder.Parent = Settings
SettingsHolder.BackgroundTransparency = 1  	
SettingsHolder.BorderSizePixel = 0   		
SettingsHolder.eCEGCheh = UDim2.new(1,0,1,0)	
SettingsHolder.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)  
SettingsHolder.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')	
SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 235) 	
SettingsHolder.MidImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')
SettingsHolder.ScrollBarThickness = 8   		
SettingsHolder.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 	
SettingsHolder.VerticalScrollBarInset = HttpService:Base64Decode('QWx3YXlz') 		
SettingsHolder.ZIndex = 10   
table.insert(scroll,SettingsHolder)   	
Prefix.FrpOJNKH = HttpService:Base64Decode('UHJlZml4')
Prefix.Parent = SettingsHolder	
Prefix.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
Prefix.BorderSizePixel = 0		
Prefix.BackgroundTransparency = 1   		
Prefix.FZxyaMZC = UDim2.new(0, 5, 0, 5)
Prefix.eCEGCheh = UDim2.new(1, -10, 0, 20) 	
Prefix.Font = Enum.Font.SourceSans  	
Prefix.TextSize = 14   	
Prefix.Text = HttpService:Base64Decode('UHJlZml4')   		
Prefix.TextColor3 = Color3.new(1, 1, 1) 		
Prefix.TextXAlignment = Enum.TextXAlignment.Left  
Prefix.ZIndex = 10   
table.insert(shade2,Prefix)		
table.insert(text1,Prefix)	
PrefixBox.FrpOJNKH = HttpService:Base64Decode('UHJlZml4Qm94')  	
PrefixBox.Parent = Prefix  		
PrefixBox.BackgroundColor3 = Color3.fromRGB(78, 78, 79)	
PrefixBox.BorderSizePixel = 0  		
PrefixBox.FZxyaMZC = UDim2.new(1, -20, 0, 0)	
PrefixBox.eCEGCheh = UDim2.new(0, 20, 0, 20)  	
PrefixBox.Font = Enum.Font.SourceSansBold	
PrefixBox.TextSize = 14   	
PrefixBox.Text = ''   	
PrefixBox.TextColor3 = Color3.new(0, 0, 0)	
PrefixBox.ZIndex = 10 	
table.insert(shade3,PrefixBox)   	
table.insert(text2,PrefixBox)   
nNvTYekW IYLxDWGN(kfKkxmpZ,iconID,off)
	local rAJGiXFa = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 		
	rAJGiXFa.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  		
	rAJGiXFa.BorderSizePixel = 0 
	rAJGiXFa.FZxyaMZC = UDim2.new(0,0,0,0)  
	rAJGiXFa.eCEGCheh = UDim2.new(1,0,0,25)   
	rAJGiXFa.Text = ''  
	rAJGiXFa.ZIndex = 10  
	local TfeNSSmS = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))  
	TfeNSSmS.FrpOJNKH = HttpService:Base64Decode('SWNvbg==')
	TfeNSSmS.Parent = rAJGiXFa   	
	TfeNSSmS.FZxyaMZC = UDim2.new(0,5,0,5)   
	TfeNSSmS.eCEGCheh = UDim2.new(0,16,0,16)  
	TfeNSSmS.BackgroundTransparency = 1  		
	TfeNSSmS.Image = iconID  		
	TfeNSSmS.ZIndex = 10   	
	if off then	
		TfeNSSmS.ScaleType = Enum.ScaleType.Crop
		TfeNSSmS.ImageRectSize = Vector2.new(16,16)		
		TfeNSSmS.ImageRectOffset = Vector2.new(off,0)  		
	end		
	local SoahhwOx = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 	
	SoahhwOx.FrpOJNKH = HttpService:Base64Decode('QnV0dG9uTGFiZWw=')   		
	SoahhwOx.Parent = rAJGiXFa 		
	SoahhwOx.BackgroundTransparency = 1		
	SoahhwOx.Text = kfKkxmpZ 		
	SoahhwOx.FZxyaMZC = UDim2.new(0,28,0,0) 	
	SoahhwOx.eCEGCheh = UDim2.new(1,-28,1,0) 		
	SoahhwOx.Font = Enum.Font.SourceSans 
	SoahhwOx.TextColor3 = Color3.new(1, 1, 1)		
	SoahhwOx.TextSize = 14
	SoahhwOx.ZIndex = 10  	
	SoahhwOx.TextXAlignment = Enum.TextXAlignment.Left  
	table.insert(shade2,rAJGiXFa)   		
	table.insert(text1,SoahhwOx)  		
	return rAJGiXFa 		
end  	
ColorsButton = IYLxDWGN(HttpService:Base64Decode('RWRpdCBUaGVtZQ=='),getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdHRoZW1lLnBuZw==')))	
ColorsButton.FZxyaMZC = UDim2.new(0, 5, 0, 55)		
ColorsButton.eCEGCheh = UDim2.new(1, -10, 0, 25)   
ColorsButton.FrpOJNKH = HttpService:Base64Decode('Q29sb3Jz')  	
ColorsButton.Parent = SettingsHolder  		
Keybinds = IYLxDWGN(HttpService:Base64Decode('RWRpdCBLZXliaW5kcw=='),getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdGtleWJpbmRzLnBuZw=='))) 	
Keybinds.FZxyaMZC = UDim2.new(0, 5, 0, 85)   
Keybinds.eCEGCheh = UDim2.new(1, -10, 0, 25)  
Keybinds.FrpOJNKH = HttpService:Base64Decode('S2V5YmluZHM=')  		
Keybinds.Parent = SettingsHolder  		
Aliases = IYLxDWGN(HttpService:Base64Decode('RWRpdCBBbGlhc2Vz'),getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdGFsaWFzZXMucG5n')))  
Aliases.FZxyaMZC = UDim2.new(0, 5, 0, 115) 		
Aliases.eCEGCheh = UDim2.new(1, -10, 0, 25)   		
Aliases.FrpOJNKH = HttpService:Base64Decode('QWxpYXNlcw==')	
Aliases.Parent = SettingsHolder
StayOpen.FrpOJNKH = HttpService:Base64Decode('U3RheU9wZW4=')  
StayOpen.Parent = SettingsHolder 
StayOpen.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
StayOpen.BorderSizePixel = 0   		
StayOpen.BackgroundTransparency = 1	
StayOpen.FZxyaMZC = UDim2.new(0, 5, 0, 30)  	
StayOpen.eCEGCheh = UDim2.new(1, -10, 0, 20) 	
StayOpen.Font = Enum.Font.SourceSans 		
StayOpen.TextSize = 14   	
StayOpen.Text = HttpService:Base64Decode('S2VlcCBNZW51IE9wZW4=') 
StayOpen.TextColor3 = Color3.new(1, 1, 1)  	
StayOpen.TextXAlignment = Enum.TextXAlignment.Left  		
StayOpen.ZIndex = 10 		
table.insert(shade2,StayOpen)  
table.insert(text1,StayOpen)  	
Button.FrpOJNKH = HttpService:Base64Decode('QnV0dG9u')  
Button.Parent = StayOpen  	
Button.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Button.BorderSizePixel = 0 
Button.FZxyaMZC = UDim2.new(1, -20, 0, 0)   	
Button.eCEGCheh = UDim2.new(0, 20, 0, 20)   	
Button.ZIndex = 10 		
table.insert(shade3,Button)  		
On.FrpOJNKH = HttpService:Base64Decode('T24=')  		
On.Parent = Button 
On.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
On.BackgroundTransparency = 1	
On.BorderSizePixel = 0
On.FZxyaMZC = UDim2.new(0, 2, 0, 2)
On.eCEGCheh = UDim2.new(0, 16, 0, 16) 		
On.Font = Enum.Font.SourceSans 	
On.FontSize = Enum.FontSize.Size14 		
On.Text = '' 	
On.TextColor3 = Color3.new(0, 0, 0)  
On.ZIndex = 10	
Positions = IYLxDWGN(HttpService:Base64Decode('RWRpdC9Hb3RvIFdheXBvaW50cw=='),getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvZWRpdHdheXBvaW50cy5wbmc=')))   	
Positions.FZxyaMZC = UDim2.new(0, 5, 0, 145)  	
Positions.eCEGCheh = UDim2.new(1, -10, 0, 25) 
Positions.FrpOJNKH = HttpService:Base64Decode('V2F5cG9pbnRz')	
Positions.Parent = SettingsHolder 	
EventBind = IYLxDWGN(HttpService:Base64Decode('RWRpdCBFdmVudCBCaW5kcw=='),getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvYmluZHNhbmRwbHVnaW5zLnBuZw==')),759) 		
EventBind.FZxyaMZC = UDim2.new(0, 5, 0, 205)   	
EventBind.eCEGCheh = UDim2.new(1, -10, 0, 25)  		
EventBind.FrpOJNKH = HttpService:Base64Decode('RXZlbnRCaW5kcw==')		
EventBind.Parent = SettingsHolder 		
Plugins = IYLxDWGN(HttpService:Base64Decode('TWFuYWdlIFBsdWdpbnM='),getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvYmluZHNhbmRwbHVnaW5zLnBuZw==')),743)   
Plugins.FZxyaMZC = UDim2.new(0, 5, 0, 175)
Plugins.eCEGCheh = UDim2.new(1, -10, 0, 25)  		
Plugins.FrpOJNKH = HttpService:Base64Decode('UGx1Z2lucw==')
Plugins.Parent = SettingsHolder  	
Example.FrpOJNKH = HttpService:Base64Decode('RXhhbXBsZQ==')   
Example.Parent = Holder   	
Example.BackgroundTransparency = 1   
Example.BorderSizePixel = 0 		
Example.eCEGCheh = UDim2.new(0, 190, 0, 20)	
Example.Visible = false  		
Example.Font = Enum.Font.SourceSans 		
Example.TextSize = 18  	
Example.Text = HttpService:Base64Decode('RXhhbXBsZQ==')   	
Example.TextColor3 = Color3.new(1, 1, 1) 
Example.TextXAlignment = Enum.TextXAlignment.Left 	
Example.ZIndex = 10   
table.insert(text1,Example)		
Notification.FrpOJNKH = UhfdZAQW()  		
Notification.Parent = ScaledHolder		
Notification.BackgroundColor3 = Color3.fromRGB(36, 36, 37) 	
Notification.BorderSizePixel = 0
Notification.FZxyaMZC = UDim2.new(1, -500, 1, 20)
Notification.eCEGCheh = UDim2.new(0, 250, 0, 100)  	
Notification.ZIndex = 10  	
table.insert(shade1,Notification)   
Title_2.FrpOJNKH = HttpService:Base64Decode('VGl0bGU=')   		
Title_2.Parent = Notification   		
Title_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
Title_2.BorderSizePixel = 0   	
Title_2.eCEGCheh = UDim2.new(0, 250, 0, 20)  		
Title_2.Font = Enum.Font.SourceSans   		
Title_2.TextSize = 14   
Title_2.Text = HttpService:Base64Decode('Tm90aWZpY2F0aW9uIFRpdGxl')		
Title_2.TextColor3 = Color3.new(1, 1, 1)  
Title_2.ZIndex = 10   		
table.insert(shade2,Title_2)	
table.insert(text1,Title_2)  		
Text_2.FrpOJNKH = HttpService:Base64Decode('VGV4dA==')   		
Text_2.Parent = Notification  	
Text_2.BackgroundTransparency = 1
Text_2.BorderSizePixel = 0	
Text_2.FZxyaMZC = UDim2.new(0, 5, 0, 25)		
Text_2.eCEGCheh = UDim2.new(0, 240, 0, 75)   		
Text_2.Font = Enum.Font.SourceSans 
Text_2.TextSize = 16
Text_2.Text = HttpService:Base64Decode('Tm90aWZpY2F0aW9uIFRleHQ=')		
Text_2.TextColor3 = Color3.new(1, 1, 1)		
Text_2.TextWrapped = true  		
Text_2.ZIndex = 10   
table.insert(text1,Text_2)
CloseButton.FrpOJNKH = HttpService:Base64Decode('Q2xvc2VCdXR0b24=')   		
CloseButton.Parent = Notification   		
CloseButton.BackgroundTransparency = 1		
CloseButton.FZxyaMZC = UDim2.new(1, -20, 0, 0)		
CloseButton.eCEGCheh = UDim2.new(0, 20, 0, 20)  	
CloseButton.Text = ''   	
CloseButton.ZIndex = 10   
CloseImage.Parent = CloseButton
CloseImage.BackgroundColor3 = Color3.new(1, 1, 1)  		
CloseImage.BackgroundTransparency = 1 	
CloseImage.FZxyaMZC = UDim2.new(0, 5, 0, 5)  	
CloseImage.eCEGCheh = UDim2.new(0, 10, 0, 10) 
CloseImage.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n')) 
CloseImage.ZIndex = 10  		
PinButton.FrpOJNKH = HttpService:Base64Decode('UGluQnV0dG9u')  
PinButton.Parent = Notification	
PinButton.BackgroundTransparency = 1 
PinButton.eCEGCheh = UDim2.new(0, 20, 0, 20)  
PinButton.ZIndex = 10
PinButton.Text = ''   	
PinImage.Parent = PinButton  	
PinImage.BackgroundColor3 = Color3.new(1, 1, 1)  		
PinImage.BackgroundTransparency = 1   
PinImage.FZxyaMZC = UDim2.new(0, 3, 0, 3) 		
PinImage.eCEGCheh = UDim2.new(0, 14, 0, 14)   		
PinImage.ZIndex = 10  		
PinImage.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvcGluLnBuZw=='))
Tooltip.FrpOJNKH = UhfdZAQW() 	
Tooltip.Parent = ScaledHolder 
Tooltip.Active = true 		
Tooltip.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
Tooltip.BackgroundTransparency = 0.1   	
Tooltip.BorderSizePixel = 0	
Tooltip.eCEGCheh = UDim2.new(0, 200, 0, 96) 		
Tooltip.Visible = false 
Tooltip.ZIndex = 10 		
table.insert(shade1,Tooltip) 		
Title_3.FrpOJNKH = HttpService:Base64Decode('VGl0bGU=')  
Title_3.Parent = Tooltip 
Title_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 		
Title_3.BackgroundTransparency = 0.1 
Title_3.BorderSizePixel = 0   	
Title_3.eCEGCheh = UDim2.new(0, 200, 0, 20)   		
Title_3.Font = Enum.Font.SourceSans   
Title_3.TextSize = 14 		
Title_3.Text = ''	
Title_3.TextColor3 = Color3.new(1, 1, 1) 
Title_3.TextTransparency = 0.1
Title_3.ZIndex = 10 	
table.insert(shade2,Title_3)		
table.insert(text1,Title_3)   		
Description.FrpOJNKH = HttpService:Base64Decode('RGVzY3JpcHRpb24=')   		
Description.Parent = Tooltip  	
Description.BackgroundTransparency = 1  	
Description.BorderSizePixel = 0 
Description.eCEGCheh = UDim2.new(0,180,0,72)
Description.FZxyaMZC = UDim2.new(0,10,0,18)  		
Description.Font = Enum.Font.SourceSans   		
Description.TextSize = 16  	
Description.Text = ''
Description.TextColor3 = Color3.new(1, 1, 1)		
Description.TextTransparency = 0.1   		
Description.TextWrapped = true 
Description.ZIndex = 10  		
table.insert(text1,Description)	
IntroBackground.FrpOJNKH = HttpService:Base64Decode('SW50cm9CYWNrZ3JvdW5k')	
IntroBackground.Parent = Holder	
IntroBackground.Active = true 		
IntroBackground.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
IntroBackground.BorderSizePixel = 0  
IntroBackground.FZxyaMZC = UDim2.new(0, 0, 0, 45)  	
IntroBackground.eCEGCheh = UDim2.new(0, 250, 0, 175)		
IntroBackground.ZIndex = 10
Logo.FrpOJNKH = HttpService:Base64Decode('TG9nbw==') 
Logo.Parent = Holder  	
Logo.BackgroundTransparency = 1   		
Logo.BorderSizePixel = 0  
Logo.FZxyaMZC = UDim2.new(0, 125, 0, 127)
Logo.eCEGCheh = UDim2.new(0, 10, 0, 10)  		
Logo.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvbG9nby5wbmc='))   
Logo.ImageTransparency = 0		
Logo.ZIndex = 10  
Credits.FrpOJNKH = HttpService:Base64Decode('Q3JlZGl0cw==')  	
Credits.Parent = Holder  
Credits.BackgroundTransparency = 1
Credits.BorderSizePixel = 0 
Credits.FZxyaMZC = UDim2.new(0, 0, 0.9, 30)   
Credits.eCEGCheh = UDim2.new(0, 250, 0, 20)   		
Credits.Font = Enum.Font.SourceSansLight	
Credits.FontSize = Enum.FontSize.Size14		
Credits.Text = HttpService:Base64Decode('RWRnZSAvLyBad29sZiAvLyBNb29uIC8vIFRvb24gLy8gUGV5dG9uIC8vIEFUUA==')   
Credits.TextColor3 = Color3.new(1, 1, 1)
Credits.ZIndex = 10   	
KeybindsFrame.FrpOJNKH = HttpService:Base64Decode('S2V5YmluZHNGcmFtZQ==')   
KeybindsFrame.Parent = Settings
KeybindsFrame.Active = true
KeybindsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)   		
KeybindsFrame.BorderSizePixel = 0  
KeybindsFrame.FZxyaMZC = UDim2.new(0, 0, 0, 175)	
KeybindsFrame.eCEGCheh = UDim2.new(0, 250, 0, 175) 
KeybindsFrame.ZIndex = 10 
table.insert(shade1,KeybindsFrame)   		
Close.FrpOJNKH = HttpService:Base64Decode('Q2xvc2U=')  
Close.Parent = KeybindsFrame  
Close.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  
Close.BorderSizePixel = 0 
Close.FZxyaMZC = UDim2.new(0, 205, 0, 150)  		
Close.eCEGCheh = UDim2.new(0, 40, 0, 20)   	
Close.Font = Enum.Font.SourceSans 		
Close.TextSize = 14  		
Close.Text = HttpService:Base64Decode('Q2xvc2U=') 
Close.TextColor3 = Color3.new(1, 1, 1)		
Close.ZIndex = 10 	
table.insert(shade2,Close)   
table.insert(text1,Close)		
Add.FrpOJNKH = HttpService:Base64Decode('QWRk') 
Add.Parent = KeybindsFrame		
Add.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  		
Add.BorderSizePixel = 0   		
Add.FZxyaMZC = UDim2.new(0, 5, 0, 150)   		
Add.eCEGCheh = UDim2.new(0, 40, 0, 20) 		
Add.Font = Enum.Font.SourceSans   
Add.TextSize = 14  
Add.Text = HttpService:Base64Decode('QWRk') 		
Add.TextColor3 = Color3.new(1, 1, 1)   	
Add.ZIndex = 10   
table.insert(shade2,Add) 	
table.insert(text1,Add) 		
Delete.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl')  
Delete.Parent = KeybindsFrame 		
Delete.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  
Delete.BorderSizePixel = 0  	
Delete.FZxyaMZC = UDim2.new(0, 50, 0, 150) 
Delete.eCEGCheh = UDim2.new(0, 40, 0, 20)  	
Delete.Font = Enum.Font.SourceSans 	
Delete.TextSize = 14	
Delete.Text = HttpService:Base64Decode('Q2xlYXI=')  		
Delete.TextColor3 = Color3.new(1, 1, 1) 	
Delete.ZIndex = 10	
table.insert(shade2,Delete)  
table.insert(text1,Delete) 
Holder_2.FrpOJNKH = HttpService:Base64Decode('SG9sZGVy') 		
Holder_2.Parent = KeybindsFrame  
Holder_2.BackgroundTransparency = 1  		
Holder_2.BorderSizePixel = 0   	
Holder_2.FZxyaMZC = UDim2.new(0, 0, 0, 0)	
Holder_2.eCEGCheh = UDim2.new(0, 250, 0, 145) 		
Holder_2.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)   
Holder_2.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')		
Holder_2.CanvasSize = UDim2.new(0, 0, 0, 0) 	
Holder_2.MidImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   	
Holder_2.ScrollBarThickness = 0
Holder_2.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   
Holder_2.VerticalScrollBarInset = HttpService:Base64Decode('QWx3YXlz') 		
Holder_2.ZIndex = 10  		
Example_2.FrpOJNKH = HttpService:Base64Decode('RXhhbXBsZQ==')  	
Example_2.Parent = KeybindsFrame  
Example_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
Example_2.BorderSizePixel = 0   
Example_2.eCEGCheh = UDim2.new(0, 10, 0, 20)		
Example_2.Visible = false 
Example_2.ZIndex = 10
table.insert(shade2,Example_2)
Text_3.FrpOJNKH = HttpService:Base64Decode('VGV4dA==')   		
Text_3.Parent = Example_2	
Text_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)		
Text_3.BorderSizePixel = 0  	
Text_3.FZxyaMZC = UDim2.new(0, 10, 0, 0) 
Text_3.eCEGCheh = UDim2.new(0, 240, 0, 20)  	
Text_3.Font = Enum.Font.SourceSans  	
Text_3.TextSize = 14 
Text_3.Text = HttpService:Base64Decode('bm9t')   
Text_3.TextColor3 = Color3.new(1, 1, 1)		
Text_3.TextXAlignment = Enum.TextXAlignment.Left 
Text_3.ZIndex = 10	
table.insert(shade2,Text_3)		
table.insert(text1,Text_3)  
Delete_2.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl') 	
Delete_2.Parent = Text_3  
Delete_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)  		
Delete_2.BorderSizePixel = 0  
Delete_2.FZxyaMZC = UDim2.new(0, 200, 0, 0)   	
Delete_2.eCEGCheh = UDim2.new(0, 40, 0, 20)  
Delete_2.Font = Enum.Font.SourceSans   		
Delete_2.TextSize = 14 
Delete_2.Text = HttpService:Base64Decode('RGVsZXRl')  
Delete_2.TextColor3 = Color3.new(0, 0, 0)		
Delete_2.ZIndex = 10  
table.insert(shade3,Delete_2)  	
table.insert(text2,Delete_2) 
KeybindEditor.FrpOJNKH = UhfdZAQW()   	
KeybindEditor.Parent = ScaledHolder 		
KeybindEditor.Active = true 
KeybindEditor.BackgroundTransparency = 1	
KeybindEditor.FZxyaMZC = UDim2.new(0.5, -180, 0, -500)   	
KeybindEditor.eCEGCheh = UDim2.new(0, 360, 0, 20)  	
KeybindEditor.ZIndex = 10 	
background_2.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==') 
background_2.Parent = KeybindEditor	
background_2.Active = true   		
background_2.BackgroundColor3 = Color3.fromRGB(36, 36, 37)   	
background_2.BorderSizePixel = 0  	
background_2.FZxyaMZC = UDim2.new(0, 0, 0, 20)   	
background_2.eCEGCheh = UDim2.new(0, 360, 0, 185)   	
background_2.ZIndex = 10  	
table.insert(shade1,background_2)   
Dark_3.FrpOJNKH = HttpService:Base64Decode('RGFyaw==')   	
Dark_3.Parent = background_2 		
Dark_3.Active = true   
Dark_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  
Dark_3.BorderSizePixel = 0  	
Dark_3.FZxyaMZC = UDim2.new(0, 135, 0, 0)
Dark_3.eCEGCheh = UDim2.new(0, 2, 0, 185)  
Dark_3.ZIndex = 10   
table.insert(shade2,Dark_3)   
PDIKxGjv.FrpOJNKH = HttpService:Base64Decode('RGlyZWN0aW9ucw==')   
PDIKxGjv.Parent = background_2   	
PDIKxGjv.BackgroundTransparency = 1	
PDIKxGjv.BorderSizePixel = 0 
PDIKxGjv.FZxyaMZC = UDim2.new(0, 10, 0, 15)
PDIKxGjv.eCEGCheh = UDim2.new(0, 115, 0, 90) 		
PDIKxGjv.ZIndex = 10  	
PDIKxGjv.Font = Enum.Font.SourceSans  	
PDIKxGjv.Text = HttpService:Base64Decode('Q2xpY2sgdGhlIGJ1dHRvbiBiZWxvdyBhbmQgcHJlc3MgYSBrZXkvbW91c2UgYnV0dG9uLiBUaGVuIHNlbGVjdCB3aGF0IHlvdSB3YW50IHRvIGJpbmQgaXQgdG8u')  	
PDIKxGjv.TextColor3 = Color3.fromRGB(255, 255, 255) 	
PDIKxGjv.TextSize = 14.000
PDIKxGjv.TextWrapped = true   		
PDIKxGjv.TextYAlignment = Enum.TextYAlignment.Top  	
table.insert(text1,PDIKxGjv)   	
BindTo.FrpOJNKH = HttpService:Base64Decode('QmluZFRv') 		
BindTo.Parent = background_2  		
BindTo.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
BindTo.BorderSizePixel = 0  		
BindTo.FZxyaMZC = UDim2.new(0, 10, 0, 95)  	
BindTo.eCEGCheh = UDim2.new(0, 115, 0, 50) 
BindTo.ZIndex = 10   	
BindTo.Font = Enum.Font.SourceSans  		
BindTo.Text = HttpService:Base64Decode('Q2xpY2sgdG8gYmluZA==')  		
BindTo.TextColor3 = Color3.fromRGB(255, 255, 255) 	
BindTo.TextSize = 16.000 	
table.insert(shade2,BindTo)		
table.insert(text1,BindTo)   	
TriggerLabel.FrpOJNKH = HttpService:Base64Decode('VHJpZ2dlckxhYmVs') 	
TriggerLabel.Parent = background_2  	
TriggerLabel.BackgroundTransparency = 1  	
TriggerLabel.FZxyaMZC = UDim2.new(0, 10, 0, 155)  	
TriggerLabel.eCEGCheh = UDim2.new(0, 45, 0, 20)
TriggerLabel.ZIndex = 10		
TriggerLabel.Font = Enum.Font.SourceSans  
TriggerLabel.Text = HttpService:Base64Decode('VHJpZ2dlcjo=')	
TriggerLabel.TextColor3 = Color3.fromRGB(255, 255, 255) 	
TriggerLabel.TextSize = 14.000  	
TriggerLabel.TextXAlignment = Enum.TextXAlignment.Left   
table.insert(text1,TriggerLabel) 		
BindTriggerSelect.FrpOJNKH = HttpService:Base64Decode('QmluZFRv')   	
BindTriggerSelect.Parent = background_2 		
BindTriggerSelect.BackgroundColor3 = Color3.fromRGB(46, 46, 47)   	
BindTriggerSelect.BorderSizePixel = 0  	
BindTriggerSelect.FZxyaMZC = UDim2.new(0, 60, 0, 155) 	
BindTriggerSelect.eCEGCheh = UDim2.new(0, 65, 0, 20) 		
BindTriggerSelect.ZIndex = 10 	
BindTriggerSelect.Font = Enum.Font.SourceSans		
BindTriggerSelect.Text = HttpService:Base64Decode('S2V5RG93bg==')		
BindTriggerSelect.TextColor3 = Color3.fromRGB(255, 255, 255)  
BindTriggerSelect.TextSize = 16.000
table.insert(shade2,BindTriggerSelect)  
table.insert(text1,BindTriggerSelect)
Add_2.FrpOJNKH = HttpService:Base64Decode('QWRk') 	
Add_2.Parent = background_2  
Add_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)   
Add_2.BorderSizePixel = 0	
Add_2.FZxyaMZC = UDim2.new(0, 310, 0, 35)   		
Add_2.eCEGCheh = UDim2.new(0, 40, 0, 20)   		
Add_2.ZIndex = 10  		
Add_2.Font = Enum.Font.SourceSans   		
Add_2.Text = HttpService:Base64Decode('QWRk') 		
Add_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Add_2.TextSize = 14.000  
table.insert(shade2,Add_2)   	
table.insert(text1,Add_2)  		
Toggles.FrpOJNKH = HttpService:Base64Decode('VG9nZ2xlcw==') 		
Toggles.Parent = background_2  	
Toggles.BackgroundTransparency = 1
Toggles.BorderSizePixel = 0  	
Toggles.FZxyaMZC = UDim2.new(0, 150, 0, 125)  	
Toggles.eCEGCheh = UDim2.new(0, 200, 0, 50) 
Toggles.ZIndex = 10  
Toggles.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')
Toggles.CanvasSize = UDim2.new(0, 0, 0, 50)   	
Toggles.ScrollBarThickness = 8		
Toggles.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   
Toggles.VerticalScrollBarInset = Enum.ScrollBarInset.Always 	
table.insert(scroll,Toggles)   		
ClickTP.FrpOJNKH = HttpService:Base64Decode('Q2xpY2sgVFAgKEhvbGQgS2V5ICYgQ2xpY2sp')  		
ClickTP.Parent = Toggles   
ClickTP.BackgroundColor3 = Color3.fromRGB(46, 46, 47)	
ClickTP.BorderSizePixel = 0  	
ClickTP.eCEGCheh = UDim2.new(0, 200, 0, 20)   
ClickTP.ZIndex = 10  		
ClickTP.Font = Enum.Font.SourceSans   		
ClickTP.Text = HttpService:Base64Decode('ICAgIENsaWNrIFRQIChIb2xkIEtleSAmIENsaWNrKQ==')   	
ClickTP.TextColor3 = Color3.fromRGB(255, 255, 255) 	
ClickTP.TextSize = 14.000  
ClickTP.TextXAlignment = Enum.TextXAlignment.Left  
table.insert(shade2,ClickTP)   	
table.insert(text1,ClickTP)  
Select.FrpOJNKH = HttpService:Base64Decode('U2VsZWN0') 	
Select.Parent = ClickTP	
Select.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Select.BorderSizePixel = 0		
Select.FZxyaMZC = UDim2.new(0, 160, 0, 0)	
Select.eCEGCheh = UDim2.new(0, 40, 0, 20) 
Select.ZIndex = 10	
Select.Font = Enum.Font.SourceSans 
Select.Text = HttpService:Base64Decode('QWRk') 
Select.TextColor3 = Color3.fromRGB(0, 0, 0) 		
Select.TextSize = 14.000 
table.insert(shade3,Select)		
table.insert(text2,Select)		
ClickDelete.FrpOJNKH = HttpService:Base64Decode('Q2xpY2sgRGVsZXRlIChIb2xkIEtleSAmIENsaWNrKQ==') 
ClickDelete.Parent = Toggles   	
ClickDelete.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 	
ClickDelete.BorderSizePixel = 0   	
ClickDelete.FZxyaMZC = UDim2.new(0, 0, 0, 25)
ClickDelete.eCEGCheh = UDim2.new(0, 200, 0, 20)   
ClickDelete.ZIndex = 10 	
ClickDelete.Font = Enum.Font.SourceSans		
ClickDelete.Text = HttpService:Base64Decode('ICAgIENsaWNrIERlbGV0ZSAoSG9sZCBLZXkgJiBDbGljayk=') 		
ClickDelete.TextColor3 = Color3.fromRGB(255, 255, 255)	
ClickDelete.TextSize = 14.000	
ClickDelete.TextXAlignment = Enum.TextXAlignment.Left	
table.insert(shade2,ClickDelete)   		
table.insert(text1,ClickDelete)
Select_2.FrpOJNKH = HttpService:Base64Decode('U2VsZWN0')  		
Select_2.Parent = ClickDelete	
Select_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)   
Select_2.BorderSizePixel = 0  		
Select_2.FZxyaMZC = UDim2.new(0, 160, 0, 0)  	
Select_2.eCEGCheh = UDim2.new(0, 40, 0, 20)	
Select_2.ZIndex = 10 		
Select_2.Font = Enum.Font.SourceSans  
Select_2.Text = HttpService:Base64Decode('QWRk')  	
Select_2.TextColor3 = Color3.fromRGB(0, 0, 0)   		
Select_2.TextSize = 14.000
table.insert(shade3,Select_2)		
table.insert(text2,Select_2)  
Cmdbar_2.FrpOJNKH = HttpService:Base64Decode('Q21kYmFyXzI=')		
Cmdbar_2.Parent = background_2  	
Cmdbar_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
Cmdbar_2.BorderSizePixel = 0 	
Cmdbar_2.FZxyaMZC = UDim2.new(0, 150, 0, 35)  		
Cmdbar_2.eCEGCheh = UDim2.new(0, 150, 0, 20) 		
Cmdbar_2.ZIndex = 10 		
Cmdbar_2.Font = Enum.Font.SourceSans   
Cmdbar_2.PlaceholderText = HttpService:Base64Decode('Q29tbWFuZA==')
Cmdbar_2.Text = ''  	
Cmdbar_2.TextColor3 = Color3.fromRGB(255, 255, 255)		
Cmdbar_2.TextSize = 14.000
Cmdbar_2.TextXAlignment = Enum.TextXAlignment.Left   
Cmdbar_3.FrpOJNKH = HttpService:Base64Decode('Q21kYmFyXzM=')   		
Cmdbar_3.Parent = background_2		
Cmdbar_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 	
Cmdbar_3.BorderSizePixel = 0  
Cmdbar_3.FZxyaMZC = UDim2.new(0, 150, 0, 60)  	
Cmdbar_3.eCEGCheh = UDim2.new(0, 150, 0, 20)  	
Cmdbar_3.ZIndex = 10	
Cmdbar_3.Font = Enum.Font.SourceSans
Cmdbar_3.PlaceholderText = HttpService:Base64Decode('Q29tbWFuZCAy') 		
Cmdbar_3.Text = '' 		
Cmdbar_3.TextColor3 = Color3.fromRGB(255, 255, 255)   		
Cmdbar_3.TextSize = 14.000  
Cmdbar_3.TextXAlignment = Enum.TextXAlignment.Left 
CreateToggle.FrpOJNKH = HttpService:Base64Decode('Q3JlYXRlVG9nZ2xl') 
CreateToggle.Parent = background_2   
CreateToggle.BackgroundColor3 = Color3.fromRGB(46, 46, 47)	
CreateToggle.BackgroundTransparency = 1
CreateToggle.BorderSizePixel = 0  
CreateToggle.FZxyaMZC = UDim2.new(0, 152, 0, 10)
CreateToggle.eCEGCheh = UDim2.new(0, 198, 0, 20)
CreateToggle.ZIndex = 10	
CreateToggle.Font = Enum.Font.SourceSans
CreateToggle.Text = HttpService:Base64Decode('Q3JlYXRlIFRvZ2dsZQ==')  	
CreateToggle.TextColor3 = Color3.fromRGB(255, 255, 255)  		
CreateToggle.TextSize = 14.000 
CreateToggle.TextXAlignment = Enum.TextXAlignment.Left 	
table.insert(text1,CreateToggle)  	
Button_2.FrpOJNKH = HttpService:Base64Decode('QnV0dG9u')
Button_2.Parent = CreateToggle  		
Button_2.BackgroundColor3 = Color3.fromRGB(78, 78, 79)  		
Button_2.BorderSizePixel = 0 
Button_2.FZxyaMZC = UDim2.new(1, -20, 0, 0)
Button_2.eCEGCheh = UDim2.new(0, 20, 0, 20)   		
Button_2.ZIndex = 10  	
table.insert(shade3,Button_2)  
On_2.FrpOJNKH = HttpService:Base64Decode('T24=')  		
On_2.Parent = Button_2 		
On_2.BackgroundColor3 = Color3.fromRGB(150, 150, 151) 
On_2.BackgroundTransparency = 1 		
On_2.BorderSizePixel = 0   
On_2.FZxyaMZC = UDim2.new(0, 2, 0, 2) 	
On_2.eCEGCheh = UDim2.new(0, 16, 0, 16)  	
On_2.ZIndex = 10  
On_2.Font = Enum.Font.SourceSans   
On_2.Text = ''   		
On_2.TextColor3 = Color3.fromRGB(0, 0, 0)   	
On_2.TextSize = 14.000   
shadow_2.FrpOJNKH = HttpService:Base64Decode('c2hhZG93') 	
shadow_2.Parent = KeybindEditor  		
shadow_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47)	
shadow_2.BorderSizePixel = 0 	
shadow_2.eCEGCheh = UDim2.new(0, 360, 0, 20)   
shadow_2.ZIndex = 10 		
table.insert(shade2,shadow_2)   	
PopupText_2.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0XzI=') 		
PopupText_2.Parent = shadow_2  	
PopupText_2.BackgroundTransparency = 1 
PopupText_2.eCEGCheh = UDim2.new(1, 0, 0.949999988, 0)
PopupText_2.ZIndex = 10
PopupText_2.Font = Enum.Font.SourceSans	
PopupText_2.Text = HttpService:Base64Decode('U2V0IEtleWJpbmRz')		
PopupText_2.TextColor3 = Color3.fromRGB(255, 255, 255)
PopupText_2.TextSize = 14.000   
PopupText_2.TextWrapped = true
table.insert(text1,PopupText_2) 
Exit_2.FrpOJNKH = HttpService:Base64Decode('RXhpdF8y')		
Exit_2.Parent = shadow_2  		
Exit_2.BackgroundTransparency = 1   		
Exit_2.FZxyaMZC = UDim2.new(1, -20, 0, 0)  	
Exit_2.eCEGCheh = UDim2.new(0, 20, 0, 20)  
Exit_2.ZIndex = 10		
Exit_2.Text = ''	
ExitImage_2.Parent = Exit_2 	
ExitImage_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)		
ExitImage_2.BackgroundTransparency = 1   		
ExitImage_2.FZxyaMZC = UDim2.new(0, 5, 0, 5)  
ExitImage_2.eCEGCheh = UDim2.new(0, 10, 0, 10)   		
ExitImage_2.ZIndex = 10  	
ExitImage_2.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n'))   		
PositionsFrame.FrpOJNKH = HttpService:Base64Decode('UG9zaXRpb25zRnJhbWU=')   		
PositionsFrame.Parent = Settings  
PositionsFrame.Active = true
PositionsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)   		
PositionsFrame.BorderSizePixel = 0  	
PositionsFrame.eCEGCheh = UDim2.new(0, 250, 0, 175)  	
PositionsFrame.FZxyaMZC = UDim2.new(0, 0, 0, 175)  	
PositionsFrame.ZIndex = 10  
table.insert(shade1,PositionsFrame)   
Close_3.FrpOJNKH = HttpService:Base64Decode('Q2xvc2U=')
Close_3.Parent = PositionsFrame
Close_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  
Close_3.BorderSizePixel = 0	
Close_3.FZxyaMZC = UDim2.new(0, 205, 0, 150)		
Close_3.eCEGCheh = UDim2.new(0, 40, 0, 20)		
Close_3.Font = Enum.Font.SourceSans 		
Close_3.TextSize = 14  		
Close_3.Text = HttpService:Base64Decode('Q2xvc2U=')	
Close_3.TextColor3 = Color3.new(1, 1, 1)		
Close_3.ZIndex = 10   
table.insert(shade2,Close_3)  
table.insert(text1,Close_3)   
Delete_5.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl')   
Delete_5.Parent = PositionsFrame   	
Delete_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  		
Delete_5.BorderSizePixel = 0		
Delete_5.FZxyaMZC = UDim2.new(0, 50, 0, 150) 
Delete_5.eCEGCheh = UDim2.new(0, 40, 0, 20) 		
Delete_5.Font = Enum.Font.SourceSans  	
Delete_5.TextSize = 14		
Delete_5.Text = HttpService:Base64Decode('Q2xlYXI=')
Delete_5.TextColor3 = Color3.new(1, 1, 1)
Delete_5.ZIndex = 10 	
table.insert(shade2,Delete_5) 
table.insert(text1,Delete_5)   
Part.FrpOJNKH = HttpService:Base64Decode('UGFydEdvdG8=')  		
Part.Parent = PositionsFrame 		
Part.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  		
Part.BorderSizePixel = 0
Part.FZxyaMZC = UDim2.new(0, 5, 0, 150) 	
Part.eCEGCheh = UDim2.new(0, 40, 0, 20)   	
Part.Font = Enum.Font.SourceSans  		
Part.TextSize = 14
Part.Text = HttpService:Base64Decode('UGFydA==')   	
Part.TextColor3 = Color3.new(1, 1, 1)	
Part.ZIndex = 10   		
table.insert(shade2,Part)   		
table.insert(text1,Part)  		
Holder_4.FrpOJNKH = HttpService:Base64Decode('SG9sZGVy')
Holder_4.Parent = PositionsFrame 		
Holder_4.BackgroundTransparency = 1 		
Holder_4.BorderSizePixel = 0  	
Holder_4.FZxyaMZC = UDim2.new(0, 0, 0, 0)   		
Holder_4.Selectable = false		
Holder_4.eCEGCheh = UDim2.new(0, 250, 0, 145)   
Holder_4.ScrollBarImageColor3 = Color3.fromRGB(78,78,79) 		
Holder_4.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   
Holder_4.CanvasSize = UDim2.new(0, 0, 0, 0)   	
Holder_4.MidImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   
Holder_4.ScrollBarThickness = 0  	
Holder_4.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 
Holder_4.VerticalScrollBarInset = HttpService:Base64Decode('QWx3YXlz')   
Holder_4.ZIndex = 10   		
Example_4.FrpOJNKH = HttpService:Base64Decode('RXhhbXBsZQ==')
Example_4.Parent = PositionsFrame  
Example_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)   
Example_4.BorderSizePixel = 0 
Example_4.eCEGCheh = UDim2.new(0, 10, 0, 20)   		
Example_4.Visible = false		
Example_4.FZxyaMZC = UDim2.new(0, 0, 0, -5) 		
Example_4.ZIndex = 10 	
table.insert(shade2,Example_4)		
Text_5.FrpOJNKH = HttpService:Base64Decode('VGV4dA==')
Text_5.Parent = Example_4 
Text_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  
Text_5.BorderSizePixel = 0 	
Text_5.FZxyaMZC = UDim2.new(0, 10, 0, 0)   
Text_5.eCEGCheh = UDim2.new(0, 240, 0, 20)		
Text_5.Font = Enum.Font.SourceSans  	
Text_5.TextSize = 14  	
Text_5.Text = HttpService:Base64Decode('UG9zaXRpb24=') 	
Text_5.TextColor3 = Color3.new(1, 1, 1) 
Text_5.TextXAlignment = Enum.TextXAlignment.Left   
Text_5.ZIndex = 10
table.insert(shade2,Text_5)  	
table.insert(text1,Text_5)  	
Delete_6.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl') 		
Delete_6.Parent = Text_5 	
Delete_6.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
Delete_6.BorderSizePixel = 0 	
Delete_6.FZxyaMZC = UDim2.new(0, 200, 0, 0)  
Delete_6.eCEGCheh = UDim2.new(0, 40, 0, 20)	
Delete_6.Font = Enum.Font.SourceSans  		
Delete_6.TextSize = 14		
Delete_6.Text = HttpService:Base64Decode('RGVsZXRl')   	
Delete_6.TextColor3 = Color3.new(0, 0, 0)  		
Delete_6.ZIndex = 10  	
table.insert(shade3,Delete_6)  		
table.insert(text2,Delete_6) 		
TP.FrpOJNKH = HttpService:Base64Decode('VFA=')   
TP.Parent = Text_5
TP.BackgroundColor3 = Color3.fromRGB(78, 78, 79)		
TP.BorderSizePixel = 0 	
TP.FZxyaMZC = UDim2.new(0, 155, 0, 0) 	
TP.eCEGCheh = UDim2.new(0, 40, 0, 20) 
TP.Font = Enum.Font.SourceSans	
TP.TextSize = 14  	
TP.Text = HttpService:Base64Decode('R290bw==')   	
TP.TextColor3 = Color3.new(0, 0, 0)  		
TP.ZIndex = 10 	
table.insert(shade3,TP) 		
table.insert(text2,TP)  		
AliasesFrame.FrpOJNKH = HttpService:Base64Decode('QWxpYXNlc0ZyYW1l')   	
AliasesFrame.Parent = Settings   
AliasesFrame.Active = true 	
AliasesFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)   
AliasesFrame.BorderSizePixel = 0  	
AliasesFrame.FZxyaMZC = UDim2.new(0, 0, 0, 175)
AliasesFrame.eCEGCheh = UDim2.new(0, 250, 0, 175)   
AliasesFrame.ZIndex = 10 		
table.insert(shade1,AliasesFrame)   
Close_2.FrpOJNKH = HttpService:Base64Decode('Q2xvc2U=') 
Close_2.Parent = AliasesFrame 		
Close_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 
Close_2.BorderSizePixel = 0 		
Close_2.FZxyaMZC = UDim2.new(0, 205, 0, 150)  	
Close_2.eCEGCheh = UDim2.new(0, 40, 0, 20)		
Close_2.Font = Enum.Font.SourceSans  
Close_2.TextSize = 14   	
Close_2.Text = HttpService:Base64Decode('Q2xvc2U=') 	
Close_2.TextColor3 = Color3.new(1, 1, 1)   
Close_2.ZIndex = 10 		
table.insert(shade2,Close_2)	
table.insert(text1,Close_2)	
Delete_3.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl')   	
Delete_3.Parent = AliasesFrame
Delete_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)   	
Delete_3.BorderSizePixel = 0 	
Delete_3.FZxyaMZC = UDim2.new(0, 5, 0, 150) 
Delete_3.eCEGCheh = UDim2.new(0, 40, 0, 20)  	
Delete_3.Font = Enum.Font.SourceSans   		
Delete_3.TextSize = 14		
Delete_3.Text = HttpService:Base64Decode('Q2xlYXI=') 
Delete_3.TextColor3 = Color3.new(1, 1, 1) 	
Delete_3.ZIndex = 10   	
table.insert(shade2,Delete_3)   
table.insert(text1,Delete_3) 	
Holder_3.FrpOJNKH = HttpService:Base64Decode('SG9sZGVy')   		
Holder_3.Parent = AliasesFrame   
Holder_3.BackgroundTransparency = 1 	
Holder_3.BorderSizePixel = 0
Holder_3.FZxyaMZC = UDim2.new(0, 0, 0, 0)   	
Holder_3.eCEGCheh = UDim2.new(0, 250, 0, 145)	
Holder_3.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)   
Holder_3.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')	
Holder_3.CanvasSize = UDim2.new(0, 0, 0, 0) 
Holder_3.MidImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   
Holder_3.ScrollBarThickness = 0   
Holder_3.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 	
Holder_3.VerticalScrollBarInset = HttpService:Base64Decode('QWx3YXlz')  		
Holder_3.ZIndex = 10
Example_3.FrpOJNKH = HttpService:Base64Decode('RXhhbXBsZQ==')		
Example_3.Parent = AliasesFrame   
Example_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)		
Example_3.BorderSizePixel = 0  		
Example_3.eCEGCheh = UDim2.new(0, 10, 0, 20)   
Example_3.Visible = false
Example_3.ZIndex = 10 
table.insert(shade2,Example_3)   	
Text_4.FrpOJNKH = HttpService:Base64Decode('VGV4dA==')	
Text_4.Parent = Example_3		
Text_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)   	
Text_4.BorderSizePixel = 0 	
Text_4.FZxyaMZC = UDim2.new(0, 10, 0, 0)  	
Text_4.eCEGCheh = UDim2.new(0, 240, 0, 20) 	
Text_4.Font = Enum.Font.SourceSans   
Text_4.TextSize = 14		
Text_4.Text = HttpService:Base64Decode('aG9uaw==') 		
Text_4.TextColor3 = Color3.new(1, 1, 1) 		
Text_4.TextXAlignment = Enum.TextXAlignment.Left  		
Text_4.ZIndex = 10  	
table.insert(shade2,Text_4)  
table.insert(text1,Text_4)   
Delete_4.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl') 	
Delete_4.Parent = Text_4 		
Delete_4.BackgroundColor3 = Color3.fromRGB(78, 78, 79)	
Delete_4.BorderSizePixel = 0 
Delete_4.FZxyaMZC = UDim2.new(0, 200, 0, 0)  		
Delete_4.eCEGCheh = UDim2.new(0, 40, 0, 20) 
Delete_4.Font = Enum.Font.SourceSans 
Delete_4.TextSize = 14  		
Delete_4.Text = HttpService:Base64Decode('RGVsZXRl')
Delete_4.TextColor3 = Color3.new(0, 0, 0)   		
Delete_4.ZIndex = 10	
table.insert(shade3,Delete_4) 	
table.insert(text2,Delete_4)  	
PluginsFrame.FrpOJNKH = HttpService:Base64Decode('UGx1Z2luc0ZyYW1l')  	
PluginsFrame.Parent = Settings 	
PluginsFrame.Active = true 	
PluginsFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 37)   		
PluginsFrame.BorderSizePixel = 0 		
PluginsFrame.FZxyaMZC = UDim2.new(0, 0, 0, 175)  
PluginsFrame.eCEGCheh = UDim2.new(0, 250, 0, 175)
PluginsFrame.ZIndex = 10		
table.insert(shade1,PluginsFrame)		
Close_4.FrpOJNKH = HttpService:Base64Decode('Q2xvc2U=')  	
Close_4.Parent = PluginsFrame 	
Close_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)	
Close_4.BorderSizePixel = 0	
Close_4.FZxyaMZC = UDim2.new(0, 205, 0, 150)  	
Close_4.eCEGCheh = UDim2.new(0, 40, 0, 20) 	
Close_4.Font = Enum.Font.SourceSans 	
Close_4.TextSize = 14  
Close_4.Text = HttpService:Base64Decode('Q2xvc2U=') 		
Close_4.TextColor3 = Color3.new(1, 1, 1)  		
Close_4.ZIndex = 10	
table.insert(shade2,Close_4)   		
table.insert(text1,Close_4)		
Add_3.FrpOJNKH = HttpService:Base64Decode('QWRk')		
Add_3.Parent = PluginsFrame   	
Add_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)   
Add_3.BorderSizePixel = 0   		
Add_3.FZxyaMZC = UDim2.new(0, 5, 0, 150)  
Add_3.eCEGCheh = UDim2.new(0, 40, 0, 20)  		
Add_3.Font = Enum.Font.SourceSans
Add_3.TextSize = 14 		
Add_3.Text = HttpService:Base64Decode('QWRk') 
Add_3.TextColor3 = Color3.new(1, 1, 1)   
Add_3.ZIndex = 10   	
table.insert(shade2,Add_3) 		
table.insert(text1,Add_3) 	
Holder_5.FrpOJNKH = HttpService:Base64Decode('SG9sZGVy')	
Holder_5.Parent = PluginsFrame  		
Holder_5.BackgroundTransparency = 1  	
Holder_5.BorderSizePixel = 0  	
Holder_5.FZxyaMZC = UDim2.new(0, 0, 0, 0)   		
Holder_5.Selectable = false		
Holder_5.eCEGCheh = UDim2.new(0, 250, 0, 145)  
Holder_5.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
Holder_5.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 		
Holder_5.CanvasSize = UDim2.new(0, 0, 0, 0)  
Holder_5.MidImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 		
Holder_5.ScrollBarThickness = 0
Holder_5.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   		
Holder_5.VerticalScrollBarInset = HttpService:Base64Decode('QWx3YXlz')	
Holder_5.ZIndex = 10 
Example_5.FrpOJNKH = HttpService:Base64Decode('RXhhbXBsZQ==') 		
Example_5.Parent = PluginsFrame   		
Example_5.BackgroundColor3 = Color3.fromRGB(46, 46, 47)	
Example_5.BorderSizePixel = 0 		
Example_5.eCEGCheh = UDim2.new(0, 10, 0, 20)  
Example_5.Visible = false  
Example_5.ZIndex = 10 		
table.insert(shade2,Example_5)   	
Text_6.FrpOJNKH = HttpService:Base64Decode('VGV4dA==') 
Text_6.Parent = Example_5 		
Text_6.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  		
Text_6.BorderSizePixel = 0  
Text_6.FZxyaMZC = UDim2.new(0, 10, 0, 0)   	
Text_6.eCEGCheh = UDim2.new(0, 240, 0, 20)  	
Text_6.Font = Enum.Font.SourceSans   		
Text_6.TextSize = 14  
Text_6.Text = HttpService:Base64Decode('RjQgPiBUb2dnbGUgRmx5') 
Text_6.TextColor3 = Color3.new(1, 1, 1)
Text_6.TextXAlignment = Enum.TextXAlignment.Left   		
Text_6.ZIndex = 10  	
table.insert(shade2,Text_6)  	
table.insert(text1,Text_6) 	
Delete_7.FrpOJNKH = HttpService:Base64Decode('RGVsZXRl')		
Delete_7.Parent = Text_6		
Delete_7.BackgroundColor3 = Color3.fromRGB(78, 78, 79) 	
Delete_7.BorderSizePixel = 0 		
Delete_7.FZxyaMZC = UDim2.new(0, 200, 0, 0)		
Delete_7.eCEGCheh = UDim2.new(0, 40, 0, 20)   		
Delete_7.Font = Enum.Font.SourceSans
Delete_7.TextSize = 14   		
Delete_7.Text = HttpService:Base64Decode('RGVsZXRl')	
Delete_7.TextColor3 = Color3.new(0, 0, 0) 	
Delete_7.ZIndex = 10   	
table.insert(shade3,Delete_7) 		
table.insert(text2,Delete_7)   		
PluginEditor.FrpOJNKH = UhfdZAQW()   	
PluginEditor.Parent = ScaledHolder  	
PluginEditor.BorderSizePixel = 0  
PluginEditor.Active = true	
PluginEditor.BackgroundTransparency = 1 	
PluginEditor.FZxyaMZC = UDim2.new(0.5, -180, 0, -500)   		
PluginEditor.eCEGCheh = UDim2.new(0, 360, 0, 20)  		
PluginEditor.ZIndex = 10
background_3.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==') 		
background_3.Parent = PluginEditor   
background_3.Active = true 		
background_3.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
background_3.BorderSizePixel = 0  		
background_3.FZxyaMZC = UDim2.new(0, 0, 0, 20)  		
background_3.eCEGCheh = UDim2.new(0, 360, 0, 160)   	
background_3.ZIndex = 10
table.insert(shade1,background_3)  		
Dark_2.FrpOJNKH = HttpService:Base64Decode('RGFyaw==')	
Dark_2.Parent = background_3   	
Dark_2.Active = true  
Dark_2.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 		
Dark_2.BorderSizePixel = 0 
Dark_2.FZxyaMZC = UDim2.new(0, 222, 0, 0)  		
Dark_2.eCEGCheh = UDim2.new(0, 2, 0, 160) 		
Dark_2.ZIndex = 10 
table.insert(shade2,Dark_2)		
Img.FrpOJNKH = HttpService:Base64Decode('SW1n')   
Img.Parent = background_3   
Img.BackgroundTransparency = 1 
Img.FZxyaMZC = UDim2.new(0, 242, 0, 3)   
Img.eCEGCheh = UDim2.new(0, 100, 0, 95) 
Img.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvaW1nc3R1ZGlvcGx1Z2lubG9nby5wbmc=')) 	
Img.ZIndex = 10   		
AddPlugin.FrpOJNKH = HttpService:Base64Decode('QWRkUGx1Z2lu')
AddPlugin.Parent = background_3  
AddPlugin.BackgroundColor3 = Color3.fromRGB(46, 46, 47)	
AddPlugin.BorderSizePixel = 0 		
AddPlugin.FZxyaMZC = UDim2.new(0, 235, 0, 100) 
AddPlugin.eCEGCheh = UDim2.new(0, 115, 0, 50)  	
AddPlugin.Font = Enum.Font.SourceSans 	
AddPlugin.TextSize = 14 		
AddPlugin.Text = HttpService:Base64Decode('QWRkIFBsdWdpbg==')  		
AddPlugin.TextColor3 = Color3.new(1, 1, 1)   	
AddPlugin.ZIndex = 10  		
table.insert(shade2,AddPlugin) 	
table.insert(text1,AddPlugin)   		
FileName.FrpOJNKH = HttpService:Base64Decode('RmlsZU5hbWU=')
FileName.Parent = background_3 
FileName.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  
FileName.BorderSizePixel = 0
FileName.FZxyaMZC = UDim2.new(0.028, 0, 0.625, 0)   		
FileName.eCEGCheh = UDim2.new(0, 200, 0, 50)
FileName.Font = Enum.Font.SourceSans 
FileName.TextSize = 14
FileName.Text = HttpService:Base64Decode('UGx1Z2luIEZpbGUgTmFtZQ==')   	
FileName.TextColor3 = Color3.new(1, 1, 1)
FileName.ZIndex = 10 		
table.insert(shade2,FileName)  
table.insert(text1,FileName)
About.FrpOJNKH = HttpService:Base64Decode('QWJvdXQ=') 
About.Parent = background_3  		
About.BackgroundTransparency = 1   		
About.BorderSizePixel = 0  
About.FZxyaMZC = UDim2.new(0, 17, 0, 10)  
About.eCEGCheh = UDim2.new(0, 187, 0, 49)	
About.Font = Enum.Font.SourceSans   	
About.TextSize = 14   	
About.Text = HttpService:Base64Decode('UGx1Z2lucyBhcmUgLml5IGZpbGVzIGFuZCBzaG91bGQgYmUgbG9jYXRlZCBpbiB0aGUgJ3dvcmtzcGFjZScgZm9sZGVyIG9mIHlvdXIgZXhwbG9pdC4=') 	
About.TextColor3 = Color3.fromRGB(255, 255, 255)  		
About.TextWrapped = true		
About.TextYAlignment = Enum.TextYAlignment.Top  		
About.ZIndex = 10 		
table.insert(text1,About)   		
Directions_2.FrpOJNKH = HttpService:Base64Decode('RGlyZWN0aW9ucw==')   
Directions_2.Parent = background_3  
Directions_2.BackgroundTransparency = 1  	
Directions_2.BorderSizePixel = 0
Directions_2.FZxyaMZC = UDim2.new(0, 17, 0, 60) 
Directions_2.eCEGCheh = UDim2.new(0, 187, 0, 49)  
Directions_2.Font = Enum.Font.SourceSans 
Directions_2.TextSize = 14  	
Directions_2.Text = HttpService:Base64Decode('VHlwZSB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luIGZpbGUgeW91IHdhbnQgdG8gYWRkIGJlbG93Lg==')  		
Directions_2.TextColor3 = Color3.fromRGB(255, 255, 255)  	
Directions_2.TextWrapped = true  		
Directions_2.TextYAlignment = Enum.TextYAlignment.Top  
Directions_2.ZIndex = 10
table.insert(text1,Directions_2)  		
shadow_3.FrpOJNKH = HttpService:Base64Decode('c2hhZG93')   		
shadow_3.Parent = PluginEditor   		
shadow_3.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
shadow_3.BorderSizePixel = 0		
shadow_3.eCEGCheh = UDim2.new(0, 360, 0, 20)		
shadow_3.ZIndex = 10   	
table.insert(shade2,shadow_3) 		
PopupText_3.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0') 		
PopupText_3.Parent = shadow_3   
PopupText_3.BackgroundTransparency = 1
PopupText_3.eCEGCheh = UDim2.new(1, 0, 0.95, 0)
PopupText_3.ZIndex = 10 	
PopupText_3.Font = Enum.Font.SourceSans 		
PopupText_3.TextSize = 14   		
PopupText_3.Text = HttpService:Base64Decode('QWRkIFBsdWdpbnM=')   
PopupText_3.TextColor3 = Color3.new(1, 1, 1)   	
PopupText_3.TextWrapped = true 		
table.insert(text1,PopupText_3)  
Exit_3.FrpOJNKH = HttpService:Base64Decode('RXhpdA==')
Exit_3.Parent = shadow_3 
Exit_3.BackgroundTransparency = 1  		
Exit_3.FZxyaMZC = UDim2.new(1, -20, 0, 0)  
Exit_3.eCEGCheh = UDim2.new(0, 20, 0, 20)   		
Exit_3.Text = ''   		
Exit_3.ZIndex = 10		
ExitImage_3.Parent = Exit_3		
ExitImage_3.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_3.BackgroundTransparency = 1 		
ExitImage_3.FZxyaMZC = UDim2.new(0, 5, 0, 5) 	
ExitImage_3.eCEGCheh = UDim2.new(0, 10, 0, 10) 
ExitImage_3.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n'))   	
ExitImage_3.ZIndex = 10  		
AliasHint.FrpOJNKH = HttpService:Base64Decode('QWxpYXNIaW50')
AliasHint.Parent = AliasesFrame   		
AliasHint.BackgroundTransparency = 1   		
AliasHint.BorderSizePixel = 0
AliasHint.FZxyaMZC = UDim2.new(0, 25, 0, 40) 		
AliasHint.eCEGCheh = UDim2.new(0, 200, 0, 50)  
AliasHint.Font = Enum.Font.SourceSansItalic  
AliasHint.TextSize = 16 
AliasHint.Text = HttpService:Base64Decode('QWRkIGFsaWFzZXMgYnkgdXNpbmcgdGhlICdhZGRhbGlhcycgY29tbWFuZA==')   
AliasHint.TextColor3 = Color3.new(1, 1, 1)  	
AliasHint.TextStrokeColor3 = Color3.new(1, 1, 1)		
AliasHint.TextWrapped = true   	
AliasHint.ZIndex = 10   		
table.insert(text1,AliasHint)
PluginsHint.FrpOJNKH = HttpService:Base64Decode('UGx1Z2luc0hpbnQ=') 
PluginsHint.Parent = PluginsFrame   		
PluginsHint.BackgroundTransparency = 1
PluginsHint.BorderSizePixel = 0 	
PluginsHint.FZxyaMZC = UDim2.new(0, 25, 0, 40) 	
PluginsHint.eCEGCheh = UDim2.new(0, 200, 0, 50)  		
PluginsHint.Font = Enum.Font.SourceSansItalic 
PluginsHint.TextSize = 16  	
PluginsHint.Text = HttpService:Base64Decode('RG93bmxvYWQgcGx1Z2lucyBmcm9tIHRoZSBJWSBEaXNjb3JkIChkaXNjb3JkLmdnLzc4WnVXU3Ep') 	
PluginsHint.TextColor3 = Color3.new(1, 1, 1)  		
PluginsHint.TextStrokeColor3 = Color3.new(1, 1, 1)  		
PluginsHint.TextWrapped = true  		
PluginsHint.ZIndex = 10   		
table.insert(text1,PluginsHint)  
PositionsHint.FrpOJNKH = HttpService:Base64Decode('UG9zaXRpb25zSGludA==') 	
PositionsHint.Parent = PositionsFrame 
PositionsHint.BackgroundTransparency = 1  
PositionsHint.BorderSizePixel = 0   
PositionsHint.FZxyaMZC = UDim2.new(0, 25, 0, 40)	
PositionsHint.eCEGCheh = UDim2.new(0, 200, 0, 70)   		
PositionsHint.Font = Enum.Font.SourceSansItalic  		
PositionsHint.TextSize = 16  	
PositionsHint.Text = HttpService:Base64Decode('VXNlIHRoZSAnc3dwJyBvciAnc2V0d2F5cG9pbnQnIGNvbW1hbmQgdG8gYWRkIGEgcG9zaXRpb24gdXNpbmcgeW91ciBjaGFyYWN0ZXIgKE5PVEU6IFBhcnQgdGVsZXBvcnRzIHdpbGwgbm90IHNhdmUp')   	
PositionsHint.TextColor3 = Color3.new(1, 1, 1)
PositionsHint.TextStrokeColor3 = Color3.new(1, 1, 1)		
PositionsHint.TextWrapped = true 	
PositionsHint.ZIndex = 10   	
table.insert(text1,PositionsHint) 	
ToPartFrame.FrpOJNKH = UhfdZAQW()	
ToPartFrame.Parent = ScaledHolder 	
ToPartFrame.Active = true   		
ToPartFrame.BackgroundTransparency = 1   	
ToPartFrame.FZxyaMZC = UDim2.new(0.5, -180, 0, -500) 		
ToPartFrame.eCEGCheh = UDim2.new(0, 360, 0, 20)	
ToPartFrame.ZIndex = 10   		
background_4.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==')  		
background_4.Parent = ToPartFrame 	
background_4.Active = true   
background_4.BackgroundColor3 = Color3.fromRGB(36, 36, 37)  
background_4.BorderSizePixel = 0	
background_4.FZxyaMZC = UDim2.new(0, 0, 0, 20)   		
background_4.eCEGCheh = UDim2.new(0, 360, 0, 117)  	
background_4.ZIndex = 10   
table.insert(shade1,background_4) 
ChoosePart.FrpOJNKH = HttpService:Base64Decode('Q2hvb3NlUGFydA==')	
ChoosePart.Parent = background_4  	
ChoosePart.BackgroundColor3 = Color3.fromRGB(46, 46, 47)		
ChoosePart.BorderSizePixel = 0 	
ChoosePart.FZxyaMZC = UDim2.new(0, 100, 0, 55)		
ChoosePart.eCEGCheh = UDim2.new(0, 75, 0, 30)		
ChoosePart.Font = Enum.Font.SourceSans 		
ChoosePart.TextSize = 14  	
ChoosePart.Text = HttpService:Base64Decode('U2VsZWN0IFBhcnQ=')   
ChoosePart.TextColor3 = Color3.new(1, 1, 1)
ChoosePart.ZIndex = 10  
table.insert(shade2,ChoosePart)  		
table.insert(text1,ChoosePart)   
CopyPath.FrpOJNKH = HttpService:Base64Decode('Q29weVBhdGg=') 	
CopyPath.Parent = background_4   
CopyPath.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 	
CopyPath.BorderSizePixel = 0		
CopyPath.FZxyaMZC = UDim2.new(0, 185, 0, 55)  	
CopyPath.eCEGCheh = UDim2.new(0, 75, 0, 30)  		
CopyPath.Font = Enum.Font.SourceSans	
CopyPath.TextSize = 14 		
CopyPath.Text = HttpService:Base64Decode('Q29weSBQYXRo')  	
CopyPath.TextColor3 = Color3.new(1, 1, 1)  
CopyPath.ZIndex = 10
table.insert(shade2,CopyPath)   		
table.insert(text1,CopyPath)
Directions_3.FrpOJNKH = HttpService:Base64Decode('RGlyZWN0aW9ucw==') 	
Directions_3.Parent = background_4
Directions_3.BackgroundTransparency = 1   	
Directions_3.BorderSizePixel = 0  	
Directions_3.FZxyaMZC = UDim2.new(0, 51, 0, 17) 		
Directions_3.eCEGCheh = UDim2.new(0, 257, 0, 32) 	
Directions_3.Font = Enum.Font.SourceSans   	
Directions_3.TextSize = 14 
Directions_3.Text = HttpService:Base64Decode('Q2xpY2sgb24gYSBwYXJ0IGFuZCB0aGVuIGNsaWNrIHRoZSAiU2VsZWN0IFBhcnQiIGJ1dHRvbiBiZWxvdyB0byBzZXQgaXQgYXMgYSB0ZWxlcG9ydCBsb2NhdGlvbg==')
Directions_3.TextColor3 = Color3.new(1, 1, 1)
Directions_3.TextWrapped = true  		
Directions_3.TextYAlignment = Enum.TextYAlignment.Top
Directions_3.ZIndex = 10   		
table.insert(text1,Directions_3)   	
Path.FrpOJNKH = HttpService:Base64Decode('UGF0aA==')  		
Path.Parent = background_4
Path.BackgroundTransparency = 1
Path.BorderSizePixel = 0  	
Path.FZxyaMZC = UDim2.new(0, 0, 0, 94)  	
Path.eCEGCheh = UDim2.new(0, 360, 0, 16) 		
Path.Font = Enum.Font.SourceSansItalic	
Path.TextSize = 14  		
Path.Text = ''
Path.TextColor3 = Color3.new(1, 1, 1) 		
Path.TextScaled = true  
Path.TextWrapped = true   	
Path.TextYAlignment = Enum.TextYAlignment.Top  		
Path.ZIndex = 10	
table.insert(text1,Path)
shadow_4.FrpOJNKH = HttpService:Base64Decode('c2hhZG93')   		
shadow_4.Parent = ToPartFrame  	
shadow_4.BackgroundColor3 = Color3.fromRGB(46, 46, 47)  	
shadow_4.BorderSizePixel = 0		
shadow_4.eCEGCheh = UDim2.new(0, 360, 0, 20)		
shadow_4.ZIndex = 10		
table.insert(shade2,shadow_4)
PopupText_5.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0')   		
PopupText_5.Parent = shadow_4  		
PopupText_5.BackgroundTransparency = 1  	
PopupText_5.eCEGCheh = UDim2.new(1, 0, 0.95, 0)
PopupText_5.ZIndex = 10   
PopupText_5.Font = Enum.Font.SourceSans
PopupText_5.TextSize = 14  		
PopupText_5.Text = HttpService:Base64Decode('VGVsZXBvcnQgdG8gUGFydA==')  	
PopupText_5.TextColor3 = Color3.new(1, 1, 1)   
PopupText_5.TextWrapped = true  
table.insert(text1,PopupText_5)		
Exit_4.FrpOJNKH = HttpService:Base64Decode('RXhpdA==')
Exit_4.Parent = shadow_4 
Exit_4.BackgroundTransparency = 1   		
Exit_4.FZxyaMZC = UDim2.new(1, -20, 0, 0)
Exit_4.eCEGCheh = UDim2.new(0, 20, 0, 20)  
Exit_4.Text = '' 
Exit_4.ZIndex = 10 
ExitImage_5.Parent = Exit_4 	
ExitImage_5.BackgroundColor3 = Color3.new(1, 1, 1)
ExitImage_5.BackgroundTransparency = 1  		
ExitImage_5.FZxyaMZC = UDim2.new(0, 5, 0, 5)   
ExitImage_5.eCEGCheh = UDim2.new(0, 10, 0, 10)  
ExitImage_5.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n'))		
ExitImage_5.ZIndex = 10 		
logs.FrpOJNKH = UhfdZAQW()	
logs.Parent = ScaledHolder 		
logs.Active = true 
logs.BackgroundTransparency = 1   	
logs.FZxyaMZC = UDim2.new(0, 0, 1, 10) 	
logs.eCEGCheh = UDim2.new(0, 338, 0, 20) 	
logs.ZIndex = 10 		
tcHPQPoB.FrpOJNKH = HttpService:Base64Decode('c2hhZG93') 		
tcHPQPoB.Parent = logs   
tcHPQPoB.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)
tcHPQPoB.BorderSizePixel = 0	
tcHPQPoB.FZxyaMZC = UDim2.new(0, 0, 0.00999999978, 0)   	
tcHPQPoB.eCEGCheh = UDim2.new(0, 338, 0, 20)
tcHPQPoB.ZIndex = 10  		
table.insert(shade2,tcHPQPoB)  	
Hide.FrpOJNKH = HttpService:Base64Decode('SGlkZQ==') 
Hide.Parent = tcHPQPoB 
Hide.BackgroundTransparency = 1	
Hide.FZxyaMZC = UDim2.new(1, -40, 0, 0)   
Hide.eCEGCheh = UDim2.new(0, 20, 0, 20)   
Hide.ZIndex = 10  		
Hide.Text = '' 		
ImageLabel.Parent = Hide   	
ImageLabel.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel.BackgroundTransparency = 1	
ImageLabel.FZxyaMZC = UDim2.new(0, 3, 0, 3) 	
ImageLabel.eCEGCheh = UDim2.new(0, 14, 0, 14)   	
ImageLabel.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvbWluaW1pemUucG5n'))   		
ImageLabel.ZIndex = 10  		
dQPxDAAH.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0')   
dQPxDAAH.Parent = tcHPQPoB 	
dQPxDAAH.BackgroundTransparency = 1		
dQPxDAAH.eCEGCheh = UDim2.new(1, 0, 0.949999988, 0)   	
dQPxDAAH.ZIndex = 10   
dQPxDAAH.Font = Enum.Font.SourceSans   	
dQPxDAAH.FontSize = Enum.FontSize.Size14  	
dQPxDAAH.Text = HttpService:Base64Decode('TG9ncw==')  
dQPxDAAH.TextColor3 = Color3.new(1, 1, 1) 
dQPxDAAH.TextWrapped = true 		
table.insert(text1,dQPxDAAH) 
PthUZGpi.FrpOJNKH = HttpService:Base64Decode('RXhpdA==')  
PthUZGpi.Parent = tcHPQPoB  	
PthUZGpi.BackgroundTransparency = 1		
PthUZGpi.FZxyaMZC = UDim2.new(1, -20, 0, 0)   		
PthUZGpi.eCEGCheh = UDim2.new(0, 20, 0, 20) 		
PthUZGpi.ZIndex = 10  		
PthUZGpi.Text = '' 
ImageLabel_2.Parent = PthUZGpi 
ImageLabel_2.BackgroundColor3 = Color3.new(1, 1, 1) 		
ImageLabel_2.BackgroundTransparency = 1 		
ImageLabel_2.FZxyaMZC = UDim2.new(0, 5, 0, 5)
ImageLabel_2.eCEGCheh = UDim2.new(0, 10, 0, 10)	
ImageLabel_2.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n'))  		
ImageLabel_2.ZIndex = 10		
QwyOPxIw.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==')  	
QwyOPxIw.Parent = logs  		
QwyOPxIw.Active = true  
QwyOPxIw.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)   
QwyOPxIw.BorderSizePixel = 0		
QwyOPxIw.ClipsDescendants = true
QwyOPxIw.FZxyaMZC = UDim2.new(0, 0, 1, 0)   	
QwyOPxIw.eCEGCheh = UDim2.new(0, 338, 0, 245) 		
QwyOPxIw.ZIndex = 10  	
chat.FrpOJNKH = HttpService:Base64Decode('Y2hhdA==')  		
chat.Parent = QwyOPxIw	
chat.Active = true
chat.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)	
chat.BorderSizePixel = 0 	
chat.ClipsDescendants = true   
chat.eCEGCheh = UDim2.new(0, 338, 0, 245)  	
chat.ZIndex = 10	
table.insert(shade1,chat)   
Clear.FrpOJNKH = HttpService:Base64Decode('Q2xlYXI=')  		
Clear.Parent = chat   	
Clear.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)	
Clear.BorderSizePixel = 0 	
Clear.FZxyaMZC = UDim2.new(0, 5, 0, 220)   		
Clear.eCEGCheh = UDim2.new(0, 50, 0, 20)	
Clear.ZIndex = 10   	
Clear.Font = Enum.Font.SourceSans		
Clear.FontSize = Enum.FontSize.Size14   	
Clear.Text = HttpService:Base64Decode('Q2xlYXI=')
Clear.TextColor3 = Color3.new(1, 1, 1)		
table.insert(shade2,Clear)  	
table.insert(text1,Clear)   		
SaveChatlogs.FrpOJNKH = HttpService:Base64Decode('U2F2ZUNoYXRsb2dz')	
SaveChatlogs.Parent = chat   		
SaveChatlogs.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)  	
SaveChatlogs.BorderSizePixel = 0	
SaveChatlogs.FZxyaMZC = UDim2.new(0, 258, 0, 220)  
SaveChatlogs.eCEGCheh = UDim2.new(0, 75, 0, 20)  		
SaveChatlogs.ZIndex = 10  	
SaveChatlogs.Font = Enum.Font.SourceSans   
SaveChatlogs.FontSize = Enum.FontSize.Size14 
SaveChatlogs.Text = HttpService:Base64Decode('U2F2ZSBUbyAudHh0')
SaveChatlogs.TextColor3 = Color3.new(1, 1, 1)	
table.insert(shade2,SaveChatlogs) 		
table.insert(text1,SaveChatlogs)  		
Toggle.FrpOJNKH = HttpService:Base64Decode('VG9nZ2xl')		
Toggle.Parent = chat   	
Toggle.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)  		
Toggle.BorderSizePixel = 0  
Toggle.FZxyaMZC = UDim2.new(0, 60, 0, 220)  		
Toggle.eCEGCheh = UDim2.new(0, 66, 0, 20)   
Toggle.ZIndex = 10
Toggle.Font = Enum.Font.SourceSans   
Toggle.FontSize = Enum.FontSize.Size14 	
Toggle.Text = HttpService:Base64Decode('RGlzYWJsZWQ=') 	
Toggle.TextColor3 = Color3.new(1, 1, 1)  	
table.insert(shade2,Toggle) 		
table.insert(text1,Toggle)	
scroll_2.FrpOJNKH = HttpService:Base64Decode('c2Nyb2xs')   	
scroll_2.Parent = chat 		
scroll_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)  		
scroll_2.BorderSizePixel = 0  	
scroll_2.FZxyaMZC = UDim2.new(0, 5, 0, 25)  	
scroll_2.eCEGCheh = UDim2.new(0, 328, 0, 190)  
scroll_2.ZIndex = 10   		
scroll_2.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 
scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10) 		
scroll_2.ScrollBarThickness = 8  	
scroll_2.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')	
table.insert(scroll,scroll_2) 
table.insert(shade2,scroll_2)   
join.FrpOJNKH = HttpService:Base64Decode('am9pbg==')  		
join.Parent = QwyOPxIw  		
join.Active = true	
join.BackgroundColor3 = Color3.new(0.141176, 0.141176, 0.145098)   		
join.BorderSizePixel = 0	
join.ClipsDescendants = true 		
join.eCEGCheh = UDim2.new(0, 338, 0, 245) 		
join.Visible = false  	
join.ZIndex = 10 	
table.insert(shade1,join)  
Toggle_2.FrpOJNKH = HttpService:Base64Decode('VG9nZ2xl')  		
Toggle_2.Parent = join		
Toggle_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)  		
Toggle_2.BorderSizePixel = 0 	
Toggle_2.FZxyaMZC = UDim2.new(0, 60, 0, 220)
Toggle_2.eCEGCheh = UDim2.new(0, 66, 0, 20) 
Toggle_2.ZIndex = 10	
Toggle_2.Font = Enum.Font.SourceSans   
Toggle_2.FontSize = Enum.FontSize.Size14 
Toggle_2.Text = HttpService:Base64Decode('RGlzYWJsZWQ=')		
Toggle_2.TextColor3 = Color3.new(1, 1, 1)	
table.insert(shade2,Toggle_2)   		
table.insert(text1,Toggle_2)  		
Clear_2.FrpOJNKH = HttpService:Base64Decode('Q2xlYXI=')   		
Clear_2.Parent = join	
Clear_2.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314) 
Clear_2.BorderSizePixel = 0 
Clear_2.FZxyaMZC = UDim2.new(0, 5, 0, 220)   	
Clear_2.eCEGCheh = UDim2.new(0, 50, 0, 20)   
Clear_2.ZIndex = 10	
Clear_2.Font = Enum.Font.SourceSans   		
Clear_2.FontSize = Enum.FontSize.Size14   	
Clear_2.Text = HttpService:Base64Decode('Q2xlYXI=')	
Clear_2.TextColor3 = Color3.new(1, 1, 1) 
table.insert(shade2,Clear_2)  		
table.insert(text1,Clear_2) 		
scroll_3.FrpOJNKH = HttpService:Base64Decode('c2Nyb2xs')
scroll_3.Parent = join   	
scroll_3.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314) 	
scroll_3.BorderSizePixel = 0		
scroll_3.FZxyaMZC = UDim2.new(0, 5, 0, 25)   	
scroll_3.eCEGCheh = UDim2.new(0, 328, 0, 190)  		
scroll_3.ZIndex = 10 	
scroll_3.BottomImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=') 	
scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)  		
scroll_3.ScrollBarThickness = 8 	
scroll_3.TopImage = HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc=')   		
table.insert(scroll,scroll_3) 	
table.insert(shade2,scroll_3) 
selectChat.FrpOJNKH = HttpService:Base64Decode('c2VsZWN0Q2hhdA==')  
selectChat.Parent = QwyOPxIw  
selectChat.BackgroundColor3 = Color3.new(0.180392, 0.180392, 0.184314)  	
selectChat.BorderSizePixel = 0 	
selectChat.FZxyaMZC = UDim2.new(0, 5, 0, 5)
selectChat.eCEGCheh = UDim2.new(0, 164, 0, 20)   	
selectChat.ZIndex = 10   	
selectChat.Font = Enum.Font.SourceSans	
selectChat.FontSize = Enum.FontSize.Size14  	
selectChat.Text = HttpService:Base64Decode('Q2hhdCBMb2dz')	
selectChat.TextColor3 = Color3.new(1, 1, 1) 
table.insert(shade2,selectChat)   	
table.insert(text1,selectChat)   
selectJoin.FrpOJNKH = HttpService:Base64Decode('c2VsZWN0Sm9pbg==')   	
selectJoin.Parent = QwyOPxIw   
selectJoin.BackgroundColor3 = Color3.new(0.305882, 0.305882, 0.309804) 	
selectJoin.BorderSizePixel = 0
selectJoin.FZxyaMZC = UDim2.new(0, 169, 0, 5) 	
selectJoin.eCEGCheh = UDim2.new(0, 164, 0, 20)		
selectJoin.ZIndex = 10  		
selectJoin.Font = Enum.Font.SourceSans  		
selectJoin.FontSize = Enum.FontSize.Size14 
selectJoin.Text = HttpService:Base64Decode('Sm9pbiBMb2dz') 		
selectJoin.TextColor3 = Color3.new(1, 1, 1) 		
table.insert(shade3,selectJoin)		
table.insert(text1,selectJoin)   	
nNvTYekW rLNxGgah(DnDwCpji) 	
	local lqQOJTDH = {}	
	for i,lGgkoAop in pairs(DnDwCpji) do lqQOJTDH[lGgkoAop[1]] = Instance.new(lGgkoAop[2]) end	
	for OpEnJPoA,lGgkoAop in pairs(DnDwCpji) do   
		for prop,val in pairs(lGgkoAop[3]) do   
			if type(val) == HttpService:Base64Decode('dGFibGU=') then   		
				lqQOJTDH[lGgkoAop[1]][prop] = lqQOJTDH[val[1]]
			else		
				lqQOJTDH[lGgkoAop[1]][prop] = val   	
			end   		
		end		
	end	
	return lqQOJTDH[1]   		
end  		
ViewportTextBox = (nNvTYekW()		
	local rNXnxiWt = {}   		
	rNXnxiWt.Update = nNvTYekW(LYfofnMK) 
		local rfiNQTgN = LYfofnMK.EKrOZQbh.CursorPosition 	
		local eIAIOGgX = LYfofnMK.EKrOZQbh.Text   	
		if eIAIOGgX == '' then LYfofnMK.EKrOZQbh.FZxyaMZC = UDim2.new(0,2,0,0) return end   		
		if rfiNQTgN == -1 then return end 	
		local ObmEdLsB = eIAIOGgX:sub(1,rfiNQTgN-1)	
		local DpljNZwD = nil  	
		local yegCJNLr = -LYfofnMK.EKrOZQbh.FZxyaMZC.IqWNKzOD.Offset 	
		local CGDQGwnj = yegCJNLr + LYfofnMK.View.AbsoluteSize.IqWNKzOD	
		local xcnJOBEB = TextService:GetTextSize(eIAIOGgX,LYfofnMK.EKrOZQbh.TextSize,LYfofnMK.EKrOZQbh.Font,Vector2.new(999999999,100)).IqWNKzOD
		local UHSKsVzX = TextService:GetTextSize(ObmEdLsB,LYfofnMK.EKrOZQbh.TextSize,LYfofnMK.EKrOZQbh.Font,Vector2.new(999999999,100)).IqWNKzOD 
		if UHSKsVzX > CGDQGwnj then   
			DpljNZwD = math.max(-2,UHSKsVzX - LYfofnMK.View.AbsoluteSize.IqWNKzOD + 2) 	
		elseif UHSKsVzX < yegCJNLr then  		
			DpljNZwD = math.max(-2,UHSKsVzX-2)   
		elseif xcnJOBEB < CGDQGwnj then   		
			DpljNZwD = math.max(-2,xcnJOBEB - LYfofnMK.View.AbsoluteSize.IqWNKzOD + 2)   	
		end  	
		if DpljNZwD then  
			LYfofnMK.EKrOZQbh.FZxyaMZC = UDim2.new(0,-DpljNZwD,0,0) 
			LYfofnMK.EKrOZQbh.eCEGCheh = UDim2.new(1,DpljNZwD,1,0)  	
		end		
	end		
	local LYFKYBhf = {}   	
	LYFKYBhf.__index = rNXnxiWt  	
	local nNvTYekW convert(textbox)   		
		local awowkTxU = setmetatable({OffsetX = 0, EKrOZQbh = textbox},LYFKYBhf)   	
		local OCmaCfpS = Instance.new(HttpService:Base64Decode('RnJhbWU='))   		
		OCmaCfpS.BackgroundTransparency = textbox.BackgroundTransparency  		
		OCmaCfpS.BackgroundColor3 = textbox.BackgroundColor3  		
		OCmaCfpS.BorderSizePixel = textbox.BorderSizePixel   	
		OCmaCfpS.BorderColor3 = textbox.BorderColor3		
		OCmaCfpS.FZxyaMZC = textbox.FZxyaMZC  	
		OCmaCfpS.eCEGCheh = textbox.eCEGCheh   		
		OCmaCfpS.ClipsDescendants = true  		
		OCmaCfpS.FrpOJNKH = textbox.FrpOJNKH   	
		OCmaCfpS.ZIndex = 10		
		textbox.BackgroundTransparency = 1 		
		textbox.FZxyaMZC = UDim2.new(0,4,0,0)	
		textbox.eCEGCheh = UDim2.new(1,-8,1,0)  	
		textbox.TextXAlignment = Enum.TextXAlignment.Left  	
		textbox.FrpOJNKH = HttpService:Base64Decode('SW5wdXQ=')  		
		table.insert(text1,textbox)   		
		table.insert(shade2,OCmaCfpS) 		
		awowkTxU.View = OCmaCfpS   
		textbox.Changed:Connect(nNvTYekW(prop)   
			if prop == HttpService:Base64Decode('VGV4dA==') or prop == HttpService:Base64Decode('Q3Vyc29yUG9zaXRpb24=') or prop == HttpService:Base64Decode('QWJzb2x1dGVTaXpl') then   		
				awowkTxU:Update() 
			end   
		end) 		
		awowkTxU:Update()  	
		OCmaCfpS.Parent = textbox.Parent  
		textbox.Parent = OCmaCfpS   	
		return awowkTxU		
	end  	
	return {convert = convert}   		
end)()  		
ViewportTextBox.convert(Cmdbar).View.ZIndex = 10  
ViewportTextBox.convert(Cmdbar_2).View.ZIndex = 10   	
ViewportTextBox.convert(Cmdbar_3).View.ZIndex = 10   
nNvTYekW RVrEDvqm() 
	if writefile then  
		return true 	
	end  	
end  		
nNvTYekW nMLGAYMb()  	
	if readfile then		
		return true 
	end   
end		
nNvTYekW CnkskpqQ(str) 		
	if tonumber(str) ~= nil or str == HttpService:Base64Decode('aW5m') then	
		return true
	end  
end   
nNvTYekW bvnPNpkE(o, iSBTvRHR)  	
    if o == nil then return false end   
    if type(o) == HttpService:Base64Decode('dXNlcmRhdGE=') then return typeof(o) == iSBTvRHR end 	
    return type(o) == iSBTvRHR  
end 		
nNvTYekW wyxfunbJ(cFlbMRaO)
	local CwtkAkPx = cFlbMRaO:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) or cFlbMRaO:FindFirstChild(HttpService:Base64Decode('VG9yc28=')) or cFlbMRaO:FindFirstChild(HttpService:Base64Decode('VXBwZXJUb3Jzbw=='))
	return CwtkAkPx 	
end 		
nNvTYekW TLKLfivt(plr)  
	if plr:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):FindFirstChildOfClass(HttpService:Base64Decode('VG9vbA==')) or plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('VG9vbA==')) then
		return true   
	end
end
nNvTYekW wmXGMjmI(plr) 
	if plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).RigType == Enum.HumanoidRigType.R15 then
		return true  	
	end 
end	
nNvTYekW oHhBFOUT(txt)		
    if everyClipboard then  		
        everyClipboard(tostring(txt))  		
        CFyCkJIA(HttpService:Base64Decode('Q2xpcGJvYXJk'), HttpService:Base64Decode('Q29waWVkIHRvIGNsaXBib2FyZA=='))  	
    else	
        CFyCkJIA(HttpService:Base64Decode('Q2xpcGJvYXJk'), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXNuJ3QgaGF2ZSB0aGUgYWJpbGl0eSB0byB1c2UgdGhlIGNsaXBib2FyZA=='))  
    end 		
end   	
nNvTYekW JAbKLEJj(str)	
    str = tostring(str)   	
    if not isLegacyChat then 		
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)   
    else	
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, HttpService:Base64Decode('QWxs'))   
    end  	
end		
nNvTYekW EocxqEbd(awowkTxU) 
	local AKIUgfwd 		
	local hvoovPCo
	if string.find(awowkTxU.FrpOJNKH,HttpService:Base64Decode('IA==')) then		
		AKIUgfwd = HttpService:Base64Decode('WyI=')..awowkTxU.FrpOJNKH..HttpService:Base64Decode('Il0=')
		hvoovPCo = false	
	else   
		AKIUgfwd = awowkTxU.FrpOJNKH  		
		hvoovPCo = true 
	end  
	local uuhUHSdY = awowkTxU   	
	local bUMnXHjE = awowkTxU   		
	local iKovNXgh = ''  	
	if uuhUHSdY.Parent ~= game then
		repeat 
			uuhUHSdY = uuhUHSdY.Parent	
			iKovNXgh = uuhUHSdY.ClassName 		
		until uuhUHSdY.Parent == game
	end
	if bUMnXHjE.Parent ~= uuhUHSdY then   
		repeat 
			bUMnXHjE = bUMnXHjE.Parent		
			if string.find(tostring(bUMnXHjE),HttpService:Base64Decode('IA==')) then  	
				if hvoovPCo then  	
					AKIUgfwd = HttpService:Base64Decode('WyI=')..bUMnXHjE.FrpOJNKH..HttpService:Base64Decode('Il0u')..AKIUgfwd 		
				else		
					AKIUgfwd = HttpService:Base64Decode('WyI=')..bUMnXHjE.FrpOJNKH..HttpService:Base64Decode('Il0=')..AKIUgfwd   
				end   		
				hvoovPCo = false  		
			else 	
				if hvoovPCo then 		
					AKIUgfwd = bUMnXHjE.FrpOJNKH..HttpService:Base64Decode('Lg==')..AKIUgfwd	
				else 	
					AKIUgfwd = bUMnXHjE.FrpOJNKH..''..AKIUgfwd   	
				end  		
				hvoovPCo = true 
			end 		
		until bUMnXHjE.Parent == uuhUHSdY	
	elseif string.find(tostring(bUMnXHjE),HttpService:Base64Decode('IA==')) then	
		AKIUgfwd = HttpService:Base64Decode('WyI=')..bUMnXHjE.FrpOJNKH..HttpService:Base64Decode('Il0=')		
		hvoovPCo = false 		
	end 	
	if hvoovPCo then  	
		return HttpService:Base64Decode('Z2FtZTpHZXRTZXJ2aWNlKCI=')..iKovNXgh..HttpService:Base64Decode('Iiku')..AKIUgfwd  	
	else   
		return HttpService:Base64Decode('Z2FtZTpHZXRTZXJ2aWNlKCI=')..iKovNXgh..HttpService:Base64Decode('Iik=')..AKIUgfwd
	end  
end   		
AllWaypoints = {} 	
local lLWACeTj = false 	
nNvTYekW ZobGwTbZ(kfKkxmpZ,DnDwCpji)  		
	task.spawn(nNvTYekW() 
		if not lLWACeTj then  
			lLWACeTj = true	
			writefile(kfKkxmpZ, DnDwCpji, true) 	
		else
			repeat wait() until lLWACeTj == false   
			ZobGwTbZ(kfKkxmpZ,DnDwCpji)
		end   	
		wait(3)
		lLWACeTj = false		
	end)	
end	
nNvTYekW Mopqbmpi(gui)  		
	task.spawn(nNvTYekW()
		local gnAFnOaz 
		local kHGeirxP
		local uADLZJzC = Vector3.new(0,0,0)   
		local ZSGctoPM		
		local nNvTYekW nftlfsaI(UMiuNWpO) 	
			local hLDiSiCF = UMiuNWpO.FZxyaMZC - uADLZJzC  	
			local FZxyaMZC = UDim2.new(ZSGctoPM.IqWNKzOD.Scale, ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD, ZSGctoPM.jtGagefg.Scale, ZSGctoPM.jtGagefg.Offset + hLDiSiCF.jtGagefg) 		
			TweenService:Create(gui, TweenInfo.new(.20), {FZxyaMZC = FZxyaMZC}):Play()  
		end		
		gui.InputBegan:Connect(nNvTYekW(UMiuNWpO) 	
			if UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 or UMiuNWpO.UserInputType == Enum.UserInputType.Touch then   
				gnAFnOaz = true
				uADLZJzC = UMiuNWpO.FZxyaMZC   
				ZSGctoPM = gui.FZxyaMZC  	
				UMiuNWpO.Changed:Connect(nNvTYekW()  		
					if UMiuNWpO.UserInputState == Enum.UserInputState.End then  		
						gnAFnOaz = false   		
					end   
				end)   	
			end 
		end)		
		gui.InputChanged:Connect(nNvTYekW(UMiuNWpO)	
			if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement or UMiuNWpO.UserInputType == Enum.UserInputType.Touch then  	
				kHGeirxP = UMiuNWpO		
			end   		
		end) 		
		UserInputService.InputChanged:Connect(nNvTYekW(UMiuNWpO)  	
			if UMiuNWpO == kHGeirxP and gnAFnOaz then   
				nftlfsaI(UMiuNWpO)	
			end   
		end)   	
	end)  		
end   
Mopqbmpi(logs)
Mopqbmpi(KeybindEditor)
Mopqbmpi(PluginEditor)   
Mopqbmpi(ToPartFrame)
eventEditor = (nNvTYekW()  
	local rSkmCVVK = {}   
	local nNvTYekW registerEvent(kfKkxmpZ,sets)	
		rSkmCVVK[kfKkxmpZ] = {  	
			commands = {}, 
			sets = sets or {}		
		}
	end
	local aQZqyARf = nil   		
	local nNvTYekW fireEvent(kfKkxmpZ,...)   	
		local ctrcbZGI = {...}  
		local ceEmmcXr = rSkmCVVK[kfKkxmpZ]   	
		if ceEmmcXr then 	
			for i,ZfeqJCoZ in pairs(ceEmmcXr.commands) do   
				local IhYGaUnc = true   	
				for idx,set in pairs(ceEmmcXr.sets) do  	
					local rDlwIfRT = ctrcbZGI[idx]   
					local TTiHwQeY = ZfeqJCoZ[2][idx]  	
					local BGiGchEr = set.Type   	
					if BGiGchEr == HttpService:Base64Decode('UGxheWVy') then   	
						if TTiHwQeY == 0 then 		
							IhYGaUnc = IhYGaUnc and (tostring(Players.FntTRqLK) == rDlwIfRT)   	
						elseif TTiHwQeY ~= 1 then 
							IhYGaUnc = IhYGaUnc and table.find(KpWujDEJ(TTiHwQeY,Players.FntTRqLK),rDlwIfRT)   	
						end 
					elseif BGiGchEr == HttpService:Base64Decode('U3RyaW5n') then   
						if TTiHwQeY ~= 0 then 		
							IhYGaUnc = IhYGaUnc and string.find(rDlwIfRT:lower(),TTiHwQeY:lower()) 		
						end		
					elseif BGiGchEr == HttpService:Base64Decode('TnVtYmVy') then  		
						if TTiHwQeY ~= 0 then   
							IhYGaUnc = IhYGaUnc and tonumber(rDlwIfRT)<=tonumber(TTiHwQeY) 		
						end   
					end 
					if not IhYGaUnc then break end  
				end 	
				if IhYGaUnc then
					pcall(task.spawn(nNvTYekW() 
						local xtsYITRS = ZfeqJCoZ[1]		
						for count,arg in pairs(ctrcbZGI) do  	
							xtsYITRS = xtsYITRS:gsub(HttpService:Base64Decode('JSQ=')..count,arg)		
						end 		
						wait(ZfeqJCoZ[3] or 0)		
						vAOGaDPV(xtsYITRS) 		
					end)) 		
				end  		
			end   
		end		
	end		
	local YzenaNwm = rLNxGgah({ 
		{1,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('RXZlbnRFZGl0b3I='),FZxyaMZC=UDim2.new(0.5,-175,0,-500),eCEGCheh=UDim2.new(0,350,0,20),ZIndex=10,}},  	
		{2,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=currentShade2,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('VG9wQmFy'),Parent={1},eCEGCheh=UDim2.new(1,0,0,20),ZIndex=10,}},  	
		{3,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGl0bGU='),Parent={2},FZxyaMZC=UDim2.new(0,0,0,0),eCEGCheh=UDim2.new(1,0,0.95,0),Text=HttpService:Base64Decode('RXZlbnQgRWRpdG9y'),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=Enum.TextXAlignment.Center,ZIndex=10,}},  	
		{4,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2xvc2U='),Parent={2},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},   	
		{5,HttpService:Base64Decode('SW1hZ2VMYWJlbA=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image=getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n')),Parent={4},FZxyaMZC=UDim2.new(0,5,0,5),eCEGCheh=UDim2.new(0,10,0,10),ZIndex=10,}},
		{6,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=currentShade1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q29udGVudA=='),Parent={1},FZxyaMZC=UDim2.new(0,0,0,20),eCEGCheh=UDim2.new(1,0,0,202),ZIndex=10,}},   		
		{7,HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage=HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc='),CanvasSize=UDim2.new(0,0,0,100),FrpOJNKH=HttpService:Base64Decode('TGlzdA=='),Parent={6},FZxyaMZC=UDim2.new(0,5,0,5),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,eCEGCheh=UDim2.new(1,-10,1,-10),TopImage=HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc='),ZIndex=10,}},   	
		{8,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('SG9sZGVy'),Parent={7},eCEGCheh=UDim2.new(1,0,1,0),ZIndex=10,}},  		
		{9,HttpService:Base64Decode('VUlMaXN0TGF5b3V0'),{Parent={8},SortOrder=2,}},   	
		{10,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,ClipsDescendants=true,FrpOJNKH=HttpService:Base64Decode('U2V0dGluZ3M='),Parent={6},FZxyaMZC=UDim2.new(1,0,0,0),eCEGCheh=UDim2.new(0,150,1,0),ZIndex=10,}}, 		
		{11,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),FrpOJNKH=HttpService:Base64Decode('U2xpZGVy'),Parent={10},FZxyaMZC=UDim2.new(0,-150,0,0),eCEGCheh=UDim2.new(1,0,1,0),ZIndex=10,}}, 		
		{12,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.23529413342476,0.23529413342476,0.23529413342476),BorderColor3=Color3.new(0.3137255012989,0.3137255012989,0.3137255012989),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={11},eCEGCheh=UDim2.new(0,1,1,0),ZIndex=10,}}, 		
		{13,HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage=HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc='),CanvasSize=UDim2.new(0,0,0,100),FrpOJNKH=HttpService:Base64Decode('TGlzdA=='),Parent={11},FZxyaMZC=UDim2.new(0,0,0,25),ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,eCEGCheh=UDim2.new(1,0,1,-25),TopImage=HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc='),ZIndex=10,}},   	
		{14,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('SG9sZGVy'),Parent={13},eCEGCheh=UDim2.new(1,0,1,0),ZIndex=10,}},   		
		{15,HttpService:Base64Decode('VUlMaXN0TGF5b3V0'),{Parent={14},SortOrder=2,}}, 	
		{16,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGl0bGU='),Parent={11},eCEGCheh=UDim2.new(1,0,0,20),Text=HttpService:Base64Decode('RXZlbnQgU2V0dGluZ3M='),TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{17,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),Font=3,FrpOJNKH=HttpService:Base64Decode('Q2xvc2U='),BorderSizePixel=0,Parent={11},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),Text=HttpService:Base64Decode('PA=='),TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},		
		{18,HttpService:Base64Decode('Rm9sZGVy'),{FrpOJNKH=HttpService:Base64Decode('VGVtcGxhdGVz'),Parent={10},}},   	
		{19,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),FrpOJNKH=HttpService:Base64Decode('UGxheWVycw=='),Parent={18},FZxyaMZC=UDim2.new(0,0,0,25),eCEGCheh=UDim2.new(1,0,0,86),Visible=false,ZIndex=10,}}, 
		{20,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGl0bGU='),Parent={19},eCEGCheh=UDim2.new(1,0,0,20),Text=HttpService:Base64Decode('Q2hvb3NlIFBsYXllcnM='),TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}}, 
		{21,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('QW55'),Parent={19},FZxyaMZC=UDim2.new(0,5,0,42),eCEGCheh=UDim2.new(1,-10,0,20),Text=HttpService:Base64Decode('QW55IFBsYXllcg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},   		
		{22,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('QnV0dG9u'),Parent={21},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}}, 	
		{23,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={22},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},   		
		{24,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('TWU='),Parent={19},FZxyaMZC=UDim2.new(0,5,0,20),eCEGCheh=UDim2.new(1,-10,0,20),Text=HttpService:Base64Decode('TWUgT25seQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},   		
		{25,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('QnV0dG9u'),Parent={24},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}},   
		{26,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={25},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},
		{27,HttpService:Base64Decode('VGV4dEJveA=='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,FrpOJNKH=HttpService:Base64Decode('Q3VzdG9t'),Parent={19},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText=HttpService:Base64Decode('Q3VzdG9tIFBsYXllciBTZXQ='),FZxyaMZC=UDim2.new(0,5,0,64),eCEGCheh=UDim2.new(1,-35,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},		
		{28,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q3VzdG9tQnV0dG9u'),Parent={19},FZxyaMZC=UDim2.new(1,-25,0,64),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}},  
		{29,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={28},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},  
		{30,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),FrpOJNKH=HttpService:Base64Decode('U3RyaW5ncw=='),Parent={18},FZxyaMZC=UDim2.new(0,0,0,25),eCEGCheh=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}}, 
		{31,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGl0bGU='),Parent={30},eCEGCheh=UDim2.new(1,0,0,20),Text=HttpService:Base64Decode('Q2hvb3NlIFN0cmluZw=='),TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}}, 	
		{32,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('QW55'),Parent={30},FZxyaMZC=UDim2.new(0,5,0,20),eCEGCheh=UDim2.new(1,-10,0,20),Text=HttpService:Base64Decode('QW55IFN0cmluZw=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}}, 		
		{33,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('QnV0dG9u'),Parent={32},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}},   	
		{34,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={33},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},  		
		{54,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),FrpOJNKH=HttpService:Base64Decode('TnVtYmVycw=='),Parent={18},FZxyaMZC=UDim2.new(0,0,0,25),eCEGCheh=UDim2.new(1,0,0,64),Visible=false,ZIndex=10,}},
		{55,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGl0bGU='),Parent={54},eCEGCheh=UDim2.new(1,0,0,20),Text=HttpService:Base64Decode('Q2hvb3NlIFN0cmluZw=='),TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}}, 		
		{56,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('QW55'),Parent={54},FZxyaMZC=UDim2.new(0,5,0,20),eCEGCheh=UDim2.new(1,-10,0,20),Text=HttpService:Base64Decode('QW55IE51bWJlcg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},   
		{57,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('QnV0dG9u'),Parent={56},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}},  		
		{58,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={57},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},  
		{59,HttpService:Base64Decode('VGV4dEJveA=='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,FrpOJNKH=HttpService:Base64Decode('Q3VzdG9t'),Parent={54},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText=HttpService:Base64Decode('TnVtYmVy'),FZxyaMZC=UDim2.new(0,5,0,42),eCEGCheh=UDim2.new(1,-35,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}}, 		
		{60,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q3VzdG9tQnV0dG9u'),Parent={54},FZxyaMZC=UDim2.new(1,-25,0,42),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}},   		
		{61,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={60},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}},	
		{35,HttpService:Base64Decode('VGV4dEJveA=='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,ClearTextOnFocus=false,Font=3,FrpOJNKH=HttpService:Base64Decode('Q3VzdG9t'),Parent={30},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),PlaceholderText=HttpService:Base64Decode('TWF0Y2ggU3RyaW5n'),FZxyaMZC=UDim2.new(0,5,0,42),eCEGCheh=UDim2.new(1,-35,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},   		
		{36,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q3VzdG9tQnV0dG9u'),Parent={30},FZxyaMZC=UDim2.new(1,-25,0,42),eCEGCheh=UDim2.new(0,20,0,20),ZIndex=10,}},   
		{37,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.58823531866074,0.58823531866074,0.59215688705444),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('T24='),Parent={36},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),Text='',TextColor3=Color3.new(0,0,0),TextSize=14,ZIndex=10,}}, 
		{38,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),FrpOJNKH=HttpService:Base64Decode('RGVsYXlFZGl0b3I='),Parent={18},FZxyaMZC=UDim2.new(0,0,0,25),eCEGCheh=UDim2.new(1,0,0,24),Visible=false,ZIndex=10,}}, 
		{39,HttpService:Base64Decode('VGV4dEJveA=='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('U2Vjcw=='),Parent={38},PlaceholderColor3=Color3.new(0.47058826684952,0.47058826684952,0.47058826684952),FZxyaMZC=UDim2.new(0,60,0,2),eCEGCheh=UDim2.new(1,-65,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},
		{40,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('TGFiZWw='),Parent={39},FZxyaMZC=UDim2.new(0,-55,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('RGVsYXkgKHMpOg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},   		
		{41,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=currentShade1,BorderSizePixel=0,ClipsDescendants=true,FrpOJNKH=HttpService:Base64Decode('RXZlbnRUZW1wbGF0ZQ=='),Parent={6},eCEGCheh=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}}, 	
		{42,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('RXhwYW5k'),Parent={41},eCEGCheh=UDim2.new(0,20,0,20),Text=HttpService:Base64Decode('Pg=='),TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}}, 
		{43,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=currentText1,BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('RXZlbnROYW1l'),Parent={41},FZxyaMZC=UDim2.new(0,25,0,0),eCEGCheh=UDim2.new(1,-25,0,20),Text=HttpService:Base64Decode('T25TcGF3bg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}},   
		{44,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.19607844948769,0.19607844948769,0.19607844948769),BorderSizePixel=0,BackgroundTransparency=1,ClipsDescendants=true,FrpOJNKH=HttpService:Base64Decode('Q21kcw=='),Parent={41},FZxyaMZC=UDim2.new(0,0,0,20),eCEGCheh=UDim2.new(1,0,1,-20),ZIndex=10,}},  	
		{45,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),FrpOJNKH=HttpService:Base64Decode('QWRk'),Parent={44},FZxyaMZC=UDim2.new(0,0,1,-20),eCEGCheh=UDim2.new(1,0,0,20),ZIndex=10,}},   
		{46,HttpService:Base64Decode('VGV4dEJveA=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={45},PlaceholderColor3=Color3.new(0.7843137383461,0.7843137383461,0.7843137383461),PlaceholderText=HttpService:Base64Decode('QWRkIG5ldyBjb21tYW5k'),FZxyaMZC=UDim2.new(0,5,0,0),eCEGCheh=UDim2.new(1,-10,1,0),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,TextXAlignment=0,ZIndex=10,}}, 	
		{47,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('SG9sZGVy'),Parent={44},eCEGCheh=UDim2.new(1,0,1,-20),ZIndex=10,}},   
		{48,HttpService:Base64Decode('VUlMaXN0TGF5b3V0'),{Parent={47},SortOrder=2,}},   
		{49,HttpService:Base64Decode('RnJhbWU='),{currentShade1,BorderSizePixel=0,ClipsDescendants=true,FrpOJNKH=HttpService:Base64Decode('Q21kVGVtcGxhdGU='),Parent={6},eCEGCheh=UDim2.new(1,0,0,20),Visible=false,ZIndex=10,}}, 	
		{50,HttpService:Base64Decode('VGV4dEJveA=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,ClearTextOnFocus=false,Font=3,Parent={49},PlaceholderColor3=Color3.new(1,1,1),FZxyaMZC=UDim2.new(0,5,0,0),eCEGCheh=UDim2.new(1,-45,0,20),Text=HttpService:Base64Decode('YVxcYlxcY1xcZA=='),TextColor3=currentText1,TextSize=14,TextXAlignment=0,ZIndex=10,}},		
		{51,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('RGVsZXRl'),Parent={49},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),Text=HttpService:Base64Decode('WA=='),TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}}, 
		{52,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=currentShade1,BorderSizePixel=0,Font=3,FrpOJNKH=HttpService:Base64Decode('U2V0dGluZ3M='),Parent={49},FZxyaMZC=UDim2.new(1,-40,0,0),eCEGCheh=UDim2.new(0,20,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=18,ZIndex=10,}},  		
		{53,HttpService:Base64Decode('SW1hZ2VMYWJlbA=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image=getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvc2V0dGluZ3MucG5n')),Parent={52},FZxyaMZC=UDim2.new(0,2,0,2),eCEGCheh=UDim2.new(0,16,0,16),ZIndex=10,}},  
	})  		
	YzenaNwm.FrpOJNKH = UhfdZAQW()   		
	local JqjaFbhR = YzenaNwm:WaitForChild(HttpService:Base64Decode('Q29udGVudA==')) 
	local CfZtejoe = JqjaFbhR:WaitForChild(HttpService:Base64Decode('TGlzdA==')) 		
	local qOErBsfJ = CfZtejoe:WaitForChild(HttpService:Base64Decode('SG9sZGVy')) 		
	local DhKRjKYn = JqjaFbhR:WaitForChild(HttpService:Base64Decode('Q21kVGVtcGxhdGU='))  	
	local SSqbQSti = JqjaFbhR:WaitForChild(HttpService:Base64Decode('RXZlbnRUZW1wbGF0ZQ==')) 
	local cojLBwDg = JqjaFbhR:WaitForChild(HttpService:Base64Decode('U2V0dGluZ3M=')):WaitForChild(HttpService:Base64Decode('U2xpZGVy'))
	local yegjPbZV = JqjaFbhR.Settings:WaitForChild(HttpService:Base64Decode('VGVtcGxhdGVz'))  
	local QBlHgfxV = cojLBwDg:WaitForChild(HttpService:Base64Decode('TGlzdA==')):WaitForChild(HttpService:Base64Decode('SG9sZGVy'))   	
	table.insert(shade2,YzenaNwm.TopBar) table.insert(shade1,JqjaFbhR) table.insert(shade2,SSqbQSti)   
	table.insert(text1,SSqbQSti.EventName) table.insert(shade1,SSqbQSti.Cmds.Add) table.insert(shade1,DhKRjKYn)   
	table.insert(text1,DhKRjKYn.EKrOZQbh) table.insert(shade2,DhKRjKYn.Delete) table.insert(shade2,DhKRjKYn.Settings)  	
	table.insert(scroll,JqjaFbhR.List) table.insert(shade1,cojLBwDg) table.insert(shade2,cojLBwDg.Line)   	
	table.insert(shade2,cojLBwDg.Close) table.insert(scroll,cojLBwDg.List) table.insert(shade2,yegjPbZV.DelayEditor.Secs)  		
	table.insert(text1,yegjPbZV.DelayEditor.Secs) table.insert(text1,yegjPbZV.DelayEditor.Secs.Label) table.insert(text1,yegjPbZV.Players.Title)
	table.insert(shade3,yegjPbZV.Players.CustomButton) table.insert(shade2,yegjPbZV.Players.Custom) table.insert(text1,yegjPbZV.Players.Custom) 
	table.insert(shade3,yegjPbZV.Players.Any.Button) table.insert(shade3,yegjPbZV.Players.Me.Button) table.insert(text1,yegjPbZV.Players.Any)		
	table.insert(text1,yegjPbZV.Players.Me) table.insert(text1,yegjPbZV.Strings.Title) table.insert(text1,yegjPbZV.Strings.Any)  
	table.insert(shade3,yegjPbZV.Strings.Any.Button) table.insert(shade3,yegjPbZV.Strings.CustomButton) table.insert(text1,yegjPbZV.Strings.Custom) 
	table.insert(shade2,yegjPbZV.Strings.Custom)
	table.insert(text1,yegjPbZV.Players.Me) table.insert(text1,yegjPbZV.Numbers.Title) table.insert(text1,yegjPbZV.Numbers.Any)   
	table.insert(shade3,yegjPbZV.Numbers.Any.Button) table.insert(shade3,yegjPbZV.Numbers.CustomButton) table.insert(text1,yegjPbZV.Numbers.Custom)  	
	table.insert(shade2,yegjPbZV.Numbers.Custom)	
	local vzcupAxF = TweenInfo.new(0.25,Enum.EasingStyle.Quart,Enum.EasingDirection.Out)		
	local VgpqvSwb = nil  
	cojLBwDg:WaitForChild(HttpService:Base64Decode('Q2xvc2U=')).MouseButton1Click:Connect(nNvTYekW()   
		cojLBwDg:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true) 
	end) 
	local nNvTYekW resizeList() 		
		local oqIgLheW = 0 	
		for i,lGgkoAop in pairs(qOErBsfJ:GetChildren()) do  		
			if lGgkoAop.FrpOJNKH == HttpService:Base64Decode('RXZlbnRUZW1wbGF0ZQ==') then
				oqIgLheW = oqIgLheW + 20  	
				if lGgkoAop.Expand.Rotation == 90 then  		
					oqIgLheW = oqIgLheW + 20*(1+(#rSkmCVVK[lGgkoAop.EventName:GetAttribute(HttpService:Base64Decode('UmF3TmFtZQ=='))].commands or 0))	
				end	
			end
		end	
		TweenService:Create(CfZtejoe,vzcupAxF,{CanvasSize = UDim2.new(0,0,0,oqIgLheW)}):Play()   		
		if oqIgLheW > CfZtejoe.AbsoluteSize.jtGagefg then   	
			qOErBsfJ.eCEGCheh = UDim2.new(1,-8,1,0) 	
		else   
			qOErBsfJ.eCEGCheh = UDim2.new(1,0,1,0)   		
		end  	
	end 	
	local nNvTYekW resizeSettingsList()  		
		local oqIgLheW = 0
		for i,lGgkoAop in pairs(QBlHgfxV:GetChildren()) do   		
			if lGgkoAop:IsA(HttpService:Base64Decode('RnJhbWU=')) then 
				oqIgLheW = oqIgLheW + lGgkoAop.AbsoluteSize.jtGagefg  		
			end 		
		end
		QBlHgfxV.Parent.CanvasSize = UDim2.new(0,0,0,oqIgLheW)
		if oqIgLheW > QBlHgfxV.Parent.AbsoluteSize.jtGagefg then   	
			QBlHgfxV.eCEGCheh = UDim2.new(1,-8,1,0)  
		else 	
			QBlHgfxV.eCEGCheh = UDim2.new(1,0,1,0)   		
		end		
	end 
	local nNvTYekW setupCheckbox(rAJGiXFa,callback)  	
		local WWLLGCZI = rAJGiXFa.On.BackgroundTransparency == 0
		local nNvTYekW nftlfsaI()   
			rAJGiXFa.On.BackgroundTransparency = (WWLLGCZI and 0 or 1)  		
		end  
		rAJGiXFa.On.MouseButton1Click:Connect(nNvTYekW() 
			WWLLGCZI = not WWLLGCZI 	
			nftlfsaI()  		
			if callback then callback(WWLLGCZI) end  
		end)	
		return {  
			Toggle = nNvTYekW(nocall) WWLLGCZI = not WWLLGCZI nftlfsaI() if not nocall and callback then callback(WWLLGCZI) end end, 
			Enable = nNvTYekW(nocall) if WWLLGCZI then return end WWLLGCZI = true nftlfsaI()if not nocall and callback then callback(WWLLGCZI) end end,   	
			Disable = nNvTYekW(nocall) if not WWLLGCZI then return end WWLLGCZI = false nftlfsaI()if not nocall and callback then callback(WWLLGCZI) end end,  
			IsEnabled = nNvTYekW() return WWLLGCZI end  
		}  	
	end  
	local nNvTYekW openSettingsEditor(ceEmmcXr,ZfeqJCoZ)   
		VgpqvSwb = ZfeqJCoZ  		
		for i,lGgkoAop in pairs(QBlHgfxV:GetChildren()) do if lGgkoAop:IsA(HttpService:Base64Decode('RnJhbWU=')) then lGgkoAop:Destroy() end end 
		local erxHXyiw = yegjPbZV.DelayEditor:Clone()  
		erxHXyiw.Secs.FocusLost:Connect(nNvTYekW()   	
			ZfeqJCoZ[3] = tonumber(erxHXyiw.Secs.Text) or 0  		
			erxHXyiw.Secs.Text = ZfeqJCoZ[3] 		
			if aQZqyARf then aQZqyARf() end  
		end)		
		erxHXyiw.Secs.Text = ZfeqJCoZ[3]   		
		erxHXyiw.Visible = true	
		table.insert(shade2,erxHXyiw.Secs)   
		table.insert(text1,erxHXyiw.Secs)  	
		table.insert(text1,erxHXyiw.Secs.Label) 	
		erxHXyiw.Parent = QBlHgfxV 	
		for i,lGgkoAop in pairs(ceEmmcXr.sets) do 	
			if lGgkoAop.Type == HttpService:Base64Decode('UGxheWVy') then  
				local oeoHtzvs = yegjPbZV.Players:Clone()	
				oeoHtzvs.Title.Text = lGgkoAop.FrpOJNKH or HttpService:Base64Decode('UGxheWVy')	
				local wmZmhEXl,SiBBqZkg,custom  
				wmZmhEXl = setupCheckbox(oeoHtzvs.Me.Button,nNvTYekW(on)  	
					if not on then return end   		
					SiBBqZkg.Disable() 		
					custom.Disable()		
					ZfeqJCoZ[2][i] = 0   
					if aQZqyARf then aQZqyARf() end 	
				end)		
				SiBBqZkg = setupCheckbox(oeoHtzvs.Any.Button,nNvTYekW(on) 		
					if not on then return end  
					wmZmhEXl.Disable()	
					custom.Disable() 	
					ZfeqJCoZ[2][i] = 1	
					if aQZqyARf then aQZqyARf() end  		
				end) 		
				local SGrinUtq = oeoHtzvs.Custom
				custom = setupCheckbox(oeoHtzvs.CustomButton,nNvTYekW(on)   	
					if not on then return end   		
					wmZmhEXl.Disable()
					SiBBqZkg.Disable() 
					ZfeqJCoZ[2][i] = SGrinUtq.Text 		
					if aQZqyARf then aQZqyARf() end  	
				end)   	
				ViewportTextBox.convert(SGrinUtq)
				SGrinUtq.FocusLost:Connect(nNvTYekW()  
					if custom:IsEnabled() then  		
						ZfeqJCoZ[2][i] = SGrinUtq.Text	
						if aQZqyARf then aQZqyARf() end 		
					end   		
				end)   
				local IUnsqacU = ZfeqJCoZ[2][i]   
				if IUnsqacU == 0 then 	
					wmZmhEXl:Enable()   		
				elseif IUnsqacU == 1 then 		
					SiBBqZkg:Enable()
				else 
					custom:Enable() 
					SGrinUtq.Text = IUnsqacU 
				end   
				oeoHtzvs.Visible = true 
				table.insert(text1,oeoHtzvs.Title)   		
				table.insert(shade3,oeoHtzvs.CustomButton)
				table.insert(shade3,oeoHtzvs.Any.Button)
				table.insert(shade3,oeoHtzvs.Me.Button) 	
				table.insert(text1,oeoHtzvs.Any)   
				table.insert(text1,oeoHtzvs.Me) 
				oeoHtzvs.Parent = QBlHgfxV   
			elseif lGgkoAop.Type == HttpService:Base64Decode('U3RyaW5n') then  		
				local oeoHtzvs = yegjPbZV.Strings:Clone()   	
				oeoHtzvs.Title.Text = lGgkoAop.FrpOJNKH or HttpService:Base64Decode('U3RyaW5n') 	
				local SiBBqZkg,custom		
				SiBBqZkg = setupCheckbox(oeoHtzvs.Any.Button,nNvTYekW(on) 		
					if not on then return end 
					custom.Disable()  		
					ZfeqJCoZ[2][i] = 0 	
					if aQZqyARf then aQZqyARf() end	
				end)  
				local SGrinUtq = oeoHtzvs.Custom 
				custom = setupCheckbox(oeoHtzvs.CustomButton,nNvTYekW(on)		
					if not on then return end 	
					SiBBqZkg.Disable() 		
					ZfeqJCoZ[2][i] = SGrinUtq.Text   
					if aQZqyARf then aQZqyARf() end   		
				end)
				ViewportTextBox.convert(SGrinUtq)   	
				SGrinUtq.FocusLost:Connect(nNvTYekW() 		
					if custom:IsEnabled() then   
						ZfeqJCoZ[2][i] = SGrinUtq.Text   		
						if aQZqyARf then aQZqyARf() end		
					end   		
				end)  		
				local IUnsqacU = ZfeqJCoZ[2][i]		
				if IUnsqacU == 0 then  	
					SiBBqZkg:Enable() 
				else
					custom:Enable()		
					SGrinUtq.Text = IUnsqacU   
				end   
				oeoHtzvs.Visible = true  		
				table.insert(text1,oeoHtzvs.Title)
				table.insert(text1,oeoHtzvs.Any)
				table.insert(shade3,oeoHtzvs.Any.Button)   
				table.insert(shade3,oeoHtzvs.CustomButton)		
				oeoHtzvs.Parent = QBlHgfxV  
			elseif lGgkoAop.Type == HttpService:Base64Decode('TnVtYmVy') then  
				local oeoHtzvs = yegjPbZV.Numbers:Clone()  		
				oeoHtzvs.Title.Text = lGgkoAop.FrpOJNKH or HttpService:Base64Decode('TnVtYmVy')		
				local SiBBqZkg,custom 	
				SiBBqZkg = setupCheckbox(oeoHtzvs.Any.Button,nNvTYekW(on) 
					if not on then return end  
					custom.Disable()	
					ZfeqJCoZ[2][i] = 0	
					if aQZqyARf then aQZqyARf() end  
				end) 		
				local SGrinUtq = oeoHtzvs.Custom 	
				custom = setupCheckbox(oeoHtzvs.CustomButton,nNvTYekW(on)	
					if not on then return end   		
					SiBBqZkg.Disable()   	
					ZfeqJCoZ[2][i] = SGrinUtq.Text 	
					if aQZqyARf then aQZqyARf() end  		
				end)		
				ViewportTextBox.convert(SGrinUtq) 	
				SGrinUtq.FocusLost:Connect(nNvTYekW()
					ZfeqJCoZ[2][i] = tonumber(SGrinUtq.Text) or 0   		
					SGrinUtq.Text = ZfeqJCoZ[2][i] 		
					if custom:IsEnabled() then   	
						if aQZqyARf then aQZqyARf() end 	
					end 	
				end)   		
				local IUnsqacU = ZfeqJCoZ[2][i] 
				if IUnsqacU == 0 then  		
					SiBBqZkg:Enable() 	
				else		
					custom:Enable()   	
					SGrinUtq.Text = IUnsqacU  
				end 	
				oeoHtzvs.Visible = true   		
				table.insert(text1,oeoHtzvs.Title)  
				table.insert(text1,oeoHtzvs.Any)   	
				table.insert(shade3,oeoHtzvs.Any.Button)   	
				table.insert(shade3,oeoHtzvs.CustomButton)  
				oeoHtzvs.Parent = QBlHgfxV
			end 
		end  	
		resizeSettingsList()   	
		cojLBwDg:TweenPosition(UDim2.new(0,0,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)   
	end 	
	local nNvTYekW defaultSettings(ev)   		
		local hRmYnbWo = {} 
		for i,lGgkoAop in pairs(ev.sets) do  
			if lGgkoAop.Type == HttpService:Base64Decode('UGxheWVy') then
				hRmYnbWo[#hRmYnbWo+1] = lGgkoAop.Default or 0   
			elseif lGgkoAop.Type == HttpService:Base64Decode('U3RyaW5n') then  	
				hRmYnbWo[#hRmYnbWo+1] = lGgkoAop.Default or 0		
			elseif lGgkoAop.Type == HttpService:Base64Decode('TnVtYmVy') then  		
				hRmYnbWo[#hRmYnbWo+1] = lGgkoAop.Default or 0		
			end 		
		end 		
		return hRmYnbWo
	end		
	local nNvTYekW refreshList()  
		for i,lGgkoAop in pairs(qOErBsfJ:GetChildren()) do if lGgkoAop:IsA(HttpService:Base64Decode('RnJhbWU=')) then lGgkoAop:Destroy() end end   
		for kfKkxmpZ,ceEmmcXr in pairs(rSkmCVVK) do   		
			local GhgYDsIg = SSqbQSti:Clone()   	
			GhgYDsIg.EventName.Text = kfKkxmpZ   	
			GhgYDsIg.Visible = true  
			GhgYDsIg.EventName:SetAttribute(HttpService:Base64Decode('UmF3TmFtZQ=='), kfKkxmpZ)  		
			table.insert(shade2,GhgYDsIg)		
			table.insert(text1,GhgYDsIg.EventName)  		
			table.insert(shade1,GhgYDsIg.Cmds.Add) 
			local DZSiigLM = false 	
			GhgYDsIg.Expand.MouseButton1Down:Connect(nNvTYekW()   	
				DZSiigLM = not DZSiigLM   	
				GhgYDsIg:TweenSize(UDim2.new(1,0,0,20 + (DZSiigLM and 20*#GhgYDsIg.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)  
				GhgYDsIg.Expand.Rotation = DZSiigLM and 90 or 0  	
				resizeList() 	
			end) 
			local nNvTYekW refreshCommands()   
				for i,lGgkoAop in pairs(GhgYDsIg.Cmds.Holder:GetChildren()) do		
					if lGgkoAop.FrpOJNKH == HttpService:Base64Decode('Q21kVGVtcGxhdGU=') then  	
						lGgkoAop:Destroy()   
					end 	
				end 	
				GhgYDsIg.EventName.Text = kfKkxmpZ..(#ceEmmcXr.commands > 0 and HttpService:Base64Decode('ICg=')..#ceEmmcXr.commands..HttpService:Base64Decode('KQ==') or '')   
				for i,ZfeqJCoZ in pairs(ceEmmcXr.commands) do  	
					local OAlzvwIB = DhKRjKYn:Clone()   	
					local CAJlajxG = OAlzvwIB.EKrOZQbh		
					ViewportTextBox.convert(CAJlajxG)  	
					CAJlajxG.Text = ZfeqJCoZ[1]	
					OAlzvwIB.Visible = true   	
					table.insert(shade1,OAlzvwIB)  	
					table.insert(shade2,OAlzvwIB.Delete)
					table.insert(shade2,OAlzvwIB.Settings)  
					CAJlajxG.FocusLost:Connect(nNvTYekW()  		
						ceEmmcXr.commands[i] = {CAJlajxG.Text,ZfeqJCoZ[2],ZfeqJCoZ[3]}   	
						if aQZqyARf then aQZqyARf() end   		
					end)  	
					OAlzvwIB.Settings.MouseButton1Click:Connect(nNvTYekW()   		
						openSettingsEditor(ceEmmcXr,ZfeqJCoZ)   	
					end)  	
					OAlzvwIB.Delete.MouseButton1Click:Connect(nNvTYekW() 		
						table.remove(ceEmmcXr.commands,i)   	
						refreshCommands()  	
						resizeList()	
						if VgpqvSwb == ZfeqJCoZ then		
							cojLBwDg:TweenPosition(UDim2.new(0,-150,0,0),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)  	
						end		
						if aQZqyARf then aQZqyARf() end 		
					end)		
					OAlzvwIB.Parent = GhgYDsIg.Cmds.Holder 		
				end   		
				GhgYDsIg:TweenSize(UDim2.new(1,0,0,20 + (DZSiigLM and 20*#GhgYDsIg.Cmds.Holder:GetChildren() or 0)),Enum.EasingDirection.Out,Enum.EasingStyle.Quart,0.25,true)		
			end  		
			local MtbfaUSi = GhgYDsIg.Cmds.Add.EKrOZQbh	
			ViewportTextBox.convert(MtbfaUSi) 	
			MtbfaUSi.FocusLost:Connect(nNvTYekW(enter)		
				if enter then		
					ceEmmcXr.commands[#ceEmmcXr.commands+1] = {MtbfaUSi.Text,defaultSettings(ceEmmcXr),0}
					MtbfaUSi.Text = ''		
					refreshCommands()	
					resizeList()   	
					if aQZqyARf then aQZqyARf() end  		
				end	
			end)   		
			GhgYDsIg.Parent = qOErBsfJ  
			refreshCommands() 	
		end	
		resizeList()   
	end  		
	local nNvTYekW saveData()	
		local jkbTUbqm = {}
		for i,lGgkoAop in pairs(rSkmCVVK) do
			jkbTUbqm[i] = lGgkoAop.commands  
		end  		
		return HttpService:JSONEncode(jkbTUbqm)   		
	end   
	local nNvTYekW loadData(str)	
		local DnDwCpji = HttpService:JSONDecode(str)  	
		for i,lGgkoAop in pairs(DnDwCpji) do   		
			if rSkmCVVK[i] then
				rSkmCVVK[i].commands = lGgkoAop 
			end  		
		end  	
	end		
	local nNvTYekW addCmd(ceEmmcXr,DnDwCpji) 
		table.insert(rSkmCVVK[ceEmmcXr].commands,DnDwCpji)	
	end   		
	local nNvTYekW setOnEdited(vCCJmWVD) 	
		if type(vCCJmWVD) == HttpService:Base64Decode('ZnVuY3Rpb24=') then
			aQZqyARf = vCCJmWVD  		
		end   	
	end
	YzenaNwm.TopBar.Close.MouseButton1Click:Connect(nNvTYekW()		
		YzenaNwm:TweenPosition(UDim2.new(0.5,-175,0,-500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)		
	end)   		
	Mopqbmpi(YzenaNwm) 		
	YzenaNwm.Parent = ScaledHolder  		
	return {  	
		RegisterEvent = registerEvent, 		
		FireEvent = fireEvent,		
		Refresh = refreshList,
		SaveData = saveData, 
		LoadData = loadData, 	
		AddCmd = addCmd,   		
		Frame = YzenaNwm,  		
		SetOnEdited = setOnEdited
	}		
end)()  	
reference = (nNvTYekW()  
	local YzenaNwm = rLNxGgah({   		
		{1,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TWFpbg=='),FZxyaMZC=UDim2.new(0.5,-250,0,-500),eCEGCheh=UDim2.new(0,500,0,20),ZIndex=10,}},		
		{2,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('VG9wQmFy'),Parent={1},eCEGCheh=UDim2.new(1,0,0,20),ZIndex=10,}},	
		{3,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGl0bGU='),Parent={2},eCEGCheh=UDim2.new(1,0,0.94999998807907,0),Text=HttpService:Base64Decode('UmVmZXJlbmNl'),TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}},
		{4,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2xvc2U='),Parent={2},FZxyaMZC=UDim2.new(1,-20,0,0),eCEGCheh=UDim2.new(0,20,0,20),Text='',TextColor3=Color3.new(1,1,1),TextSize=14,ZIndex=10,}}, 	
		{5,HttpService:Base64Decode('SW1hZ2VMYWJlbA=='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Image=getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n')),Parent={4},FZxyaMZC=UDim2.new(0,5,0,5),eCEGCheh=UDim2.new(0,10,0,10),ZIndex=10,}},
		{6,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q29udGVudA=='),Parent={1},FZxyaMZC=UDim2.new(0,0,0,20),eCEGCheh=UDim2.new(1,0,0,300),ZIndex=10,}},  	
		{7,HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='),{BackgroundColor3=Color3.new(0.14117647707462,0.14117647707462,0.14509804546833),BackgroundTransparency=1,BorderColor3=Color3.new(0.15686275064945,0.15686275064945,0.15686275064945),BorderSizePixel=0,BottomImage=HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc='),CanvasSize=UDim2.new(0,0,0,1313),FrpOJNKH=HttpService:Base64Decode('TGlzdA=='),Parent={6},ScrollBarImageColor3=Color3.new(0.30588236451149,0.30588236451149,0.3098039329052),ScrollBarThickness=8,eCEGCheh=UDim2.new(1,0,1,0),TopImage=HttpService:Base64Decode('cmJ4YXNzZXQ6Ly90ZXh0dXJlcy91aS9TY3JvbGwvc2Nyb2xsLW1pZGRsZS5wbmc='),VerticalScrollBarInset=2,ZIndex=10,}}, 	
		{8,HttpService:Base64Decode('VUlMaXN0TGF5b3V0'),{Parent={7},SortOrder=2,}}, 		
		{9,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,429),ZIndex=10,}},
		{10,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={9},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('U3BlY2lhbCBQbGF5ZXIgQ2FzZXM='),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},  
		{11,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={9},FZxyaMZC=UDim2.new(0,8,0,25),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('VGhlc2Uga2V5d29yZHMgY2FuIGJlIHVzZWQgdG8gcXVpY2tseSBzZWxlY3QgZ3JvdXBzIG9mIHBsYXllcnMgaW4gY29tbWFuZHM6'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  		
		{12,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={9},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}},  		
		{13,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZXM='),Parent={9},FZxyaMZC=UDim2.new(0,8,0,55),eCEGCheh=UDim2.new(1,-16,0,342),ZIndex=10,}},  	
		{14,HttpService:Base64Decode('VUlMaXN0TGF5b3V0'),{Parent={13},SortOrder=2,}},   	
		{15,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-4,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},	
		{16,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={15},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('YWxs'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{17,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={15},FZxyaMZC=UDim2.new(0,15,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBpbmNsdWRlcyBldmVyeW9uZQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 	
		{18,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-3,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},		
		{19,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={18},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('b3RoZXJz'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 
		{20,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={18},FZxyaMZC=UDim2.new(0,37,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBpbmNsdWRlcyBldmVyeW9uZSBleGNlcHQgeW91'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   		
		{21,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-2,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},   
		{22,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={21},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('bWU='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   		
		{23,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={21},FZxyaMZC=UDim2.new(0,19,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBpbmNsdWRlcyB5b3VyIHBsYXllciBvbmx5'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  
		{24,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},   		
		{25,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={24},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('I1tudW1iZXJd'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  
		{26,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={24},FZxyaMZC=UDim2.new(0,59,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBnZXRzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiByYW5kb20gcGxheWVycw=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{27,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},		
		{28,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={27},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('cmFuZG9t'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 
		{29,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={27},FZxyaMZC=UDim2.new(0,44,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBhZmZlY3RzIGEgcmFuZG9tIHBsYXllcg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},		
		{30,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},   
		{31,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={30},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('JVt0ZWFtIG5hbWVd'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{32,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={30},FZxyaMZC=UDim2.new(0,78,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBpbmNsdWRlcyBldmVyeW9uZSBvbiBhIGdpdmVuIHRlYW0='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  	
		{33,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},  		
		{34,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={33},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('YWxsaWVzIC8gdGVhbQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   
		{35,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={33},FZxyaMZC=UDim2.new(0,63,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBwbGF5ZXJzIHdobyBhcmUgb24geW91ciB0ZWFt'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{36,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},  	
		{37,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={36},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('ZW5lbWllcyAvIG5vbnRlYW0='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 
		{38,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={36},FZxyaMZC=UDim2.new(0,101,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBwbGF5ZXJzIHdobyBhcmUgbm90IG9uIHlvdXIgdGVhbQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 
		{39,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}}, 		
		{40,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={39},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('ZnJpZW5kcw=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   
		{41,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={39},FZxyaMZC=UDim2.new(0,40,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBhbnlvbmUgd2hvIGlzIGZyaWVuZHMgd2l0aCB5b3U='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 	
		{42,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}}, 		
		{43,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={42},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('bm9uZnJpZW5kcw=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   	
		{44,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={42},FZxyaMZC=UDim2.new(0,61,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBhbnlvbmUgd2hvIGlzIG5vdCBmcmllbmRzIHdpdGggeW91'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{45,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},	
		{46,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={45},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('Z3Vlc3Rz'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  		
		{47,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={45},FZxyaMZC=UDim2.new(0,36,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBndWVzdCBwbGF5ZXJzIChvYnNvbGV0ZSk='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 
		{48,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},  		
		{49,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={48},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('YmFjb25z'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  
		{50,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={48},FZxyaMZC=UDim2.new(0,40,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBhbnlvbmUgd2l0aCB0aGUgXA==')bacon\HttpService:Base64Decode('IG9yIHBhbCBoYWly'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},
		{51,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},  
		{52,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={51},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('YWdlW251bWJlcl0='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{53,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={51},FZxyaMZC=UDim2.new(0,71,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBpbmNsdWRlcyBhbnlvbmUgYmVsb3cgb3IgYXQgdGhlIGdpdmVuIGFnZQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  		
		{54,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}}, 
		{55,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={54},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('cmFkW251bWJlcl0='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   	
		{56,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={54},FZxyaMZC=UDim2.new(0,70,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBpbmNsdWRlcyBhbnlvbmUgd2l0aGluIHRoZSBnaXZlbiByYWRpdXM='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  
		{57,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},   
		{58,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={57},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('bmVhcmVzdA=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   
		{59,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={57},FZxyaMZC=UDim2.new(0,43,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBnZXRzIHRoZSBjbG9zZXN0IHBsYXllciB0byB5b3U='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  
		{60,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},  
		{61,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={60},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('ZmFydGhlc3Q='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},		
		{62,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={60},FZxyaMZC=UDim2.new(0,46,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBnZXRzIHRoZSBmYXJ0aGVzdCBwbGF5ZXIgZnJvbSB5b3U='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{63,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}}, 	
		{64,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={63},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('Z3JvdXBbSURd'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   	
		{65,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={63},FZxyaMZC=UDim2.new(0,55,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBnZXRzIHBsYXllcnMgd2hvIGFyZSBpbiBhIGNlcnRhaW4gZ3JvdXA='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 	
		{66,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}}, 
		{67,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={66},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('YWxpdmU='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 	
		{68,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={66},FZxyaMZC=UDim2.new(0,27,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBnZXRzIHBsYXllcnMgd2hvIGFyZSBhbGl2ZQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   	
		{69,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}}, 	
		{70,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={69},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('ZGVhZA=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  		
		{71,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={69},FZxyaMZC=UDim2.new(0,29,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBnZXRzIHBsYXllcnMgd2hvIGFyZSBkZWFk'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},		
		{72,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BackgroundTransparency=1,BorderSizePixel=0,LayoutOrder=-1,FrpOJNKH=HttpService:Base64Decode('Q2FzZQ=='),Parent={13},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,0,0,18),ZIndex=10,}},	
		{73,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('Q2FzZU5hbWU='),Parent={72},eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('QHVzZXJuYW1l'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   
		{74,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('Q2FzZURlc2M='),Parent={72},FZxyaMZC=UDim2.new(0,66,0,0),eCEGCheh=UDim2.new(1,0,1,0),Text=HttpService:Base64Decode('LSBzZWFyY2hlcyBmb3IgcGxheWVycyBieSB1c2VybmFtZSBvbmx5IChpZ25vcmVzIGRpc3BsYXluYW1lcyk='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},		
		{75,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,180),ZIndex=10,}},   	
		{76,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={75},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('VmFyaW91cyBPcGVyYXRvcnM='),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},   	
		{77,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={75},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}},   		
		{78,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={75},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('VXNlIGNvbW1hcyB0byBzZXBhcmF0ZSBtdWx0aXBsZSBleHByZXNzaW9uczo='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},   	
		{79,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={75},FZxyaMZC=UDim2.new(0,8,0,75),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('VXNlIC0gdG8gZXhjbHVkZSwgYW5kICsgdG8gaW5jbHVkZSBwbGF5ZXJzIGluIHlvdXIgZXhwcmVzc2lvbjo='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}}, 		
		{80,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={75},FZxyaMZC=UDim2.new(0,8,0,91),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('O2xvY2F0ZSAlYmx1ZS1mcmllbmRzIChnZXRzIHBsYXllcnMgaW4gYmx1ZSB0ZWFtIHdobyBhcmVuJ3QgeW91ciBmcmllbmRzKQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  
		{81,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={75},FZxyaMZC=UDim2.new(0,8,0,46),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('O2xvY2F0ZSBub29iLG5vb2IyLGJvYg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  		
		{82,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={75},FZxyaMZC=UDim2.new(0,8,0,120),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('UHV0ICEgYmVmb3JlIGEgY29tbWFuZCB0byBydW4gaXQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgaXQgd2FzIHJhbiB3aXRoOg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  		
		{83,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={75},FZxyaMZC=UDim2.new(0,8,0,136),eCEGCheh=UDim2.new(1,-8,0,32),Text=HttpService:Base64Decode('QWZ0ZXIgcnVubmluZyA7b2Zmc2V0IDAgMTAwIDAsICB5b3UgY2FuIHJ1biAhb2Zmc2V0IGFueXRpbWUgdG8gcmVwZWF0IHRoYXQgY29tbWFuZCB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0IHdlcmUgdXNlZCB0byBydW4gaXQgbGFzdCB0aW1l'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  	
		{84,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,154),ZIndex=10,}}, 		
		{85,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={84},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('Q29tbWFuZCBMb29waW5n'),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},		
		{86,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={84},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('Rm9ybTogW0hvdyBtYW55IHRpbWVzIGl0IGxvb3BzXV5bZGVsYXkgKG9wdGlvbmFsKV1eW2NvbW1hbmRd'),TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},		
		{87,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={84},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}}, 		
		{88,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={84},FZxyaMZC=UDim2.new(0,8,0,50),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('VXNlIHRoZSAnYnJlYWtsb29wcycgY29tbWFuZCB0byBzdG9wIGFsbCBydW5uaW5nIGxvb3BzLg=='),TextColor3=Color3.new(1,1,1),TextSize=15,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{89,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={84},FZxyaMZC=UDim2.new(0,8,0,80),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('RXhhbXBsZXM6'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{90,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={84},FZxyaMZC=UDim2.new(0,8,0,98),eCEGCheh=UDim2.new(1,-8,0,42),Text=HttpService:Base64Decode('OzVeYnRvb2xzIC0gZ2l2ZXMgeW91IDUgc2V0cyBvZiBidG9vbHNcbjsxMF4zXmRyb3BoYXRzIC0gZHJvcHMgeW91ciBoYXRzIGV2ZXJ5IDMgc2Vjb25kcyAxMCB0aW1lc1xuO2luZl4wLjFeYW5pbXNwZWVkIDEwMCAtIGluZmluaXRlbHkgbG9vcHMgeW91ciBhbmltYXRpb24gc3BlZWQgdG8gMTAw'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},		
		{91,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,120),ZIndex=10,}},		
		{92,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={91},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('RXhlY3V0ZSBNdWx0aXBsZSBDb21tYW5kcyBhdCBPbmNl'),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}}, 		
		{93,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={91},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('WW91IGNhbiBleGVjdXRlIG11bHRpcGxlIGNvbW1hbmRzIGF0IG9uY2UgdXNpbmcgXA==')\\\'',TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},  		
		{94,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={91},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}}, 	
		{95,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={91},FZxyaMZC=UDim2.new(0,8,0,60),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('RXhhbXBsZXM6'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  	
		{96,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={91},FZxyaMZC=UDim2.new(0,8,0,78),eCEGCheh=UDim2.new(1,-8,0,32),Text=HttpService:Base64Decode('O2Ryb3BoYXRzXFxyZXNwYXduIC0gZHJvcHMgeW91ciBoYXRzIGFuZCByZXNwYXducyB5b3VcbjtlbmFibGUgaW52ZW50b3J5XFxlbmFibGUgcGxheWVybGlzdFxccmVmcmVzaCAtIGVuYWJsZXMgdGhvc2UgY29yZWd1aSBpdGVtcyBhbmQgcmVmcmVzaGVzIHlvdQ=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  		
		{97,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,75),ZIndex=10,}},		
		{98,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={97},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('QnJvd3NlIENvbW1hbmQgSGlzdG9yeQ=='),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},   	
		{99,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={97},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,32),Text=HttpService:Base64Decode('V2hpbGUgZm9jdXNlZCBvbiB0aGUgY29tbWFuZCBiYXIsIHlvdSBjYW4gdXNlIHRoZSB1cCBhbmQgZG93biBhcnJvdyBrZXlzIHRvIGJyb3dzZSByZWNlbnRseSB1c2VkIGNvbW1hbmRz'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 		
		{100,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={97},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}},	
		{101,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,75),ZIndex=10,}},  		
		{102,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={101},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('QXV0b2NvbXBsZXRlIGluIHRoZSBDb21tYW5kIEJhcg=='),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}}, 	
		{103,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={101},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,32),Text=HttpService:Base64Decode('V2hpbGUgZm9jdXNlZCBvbiB0aGUgY29tbWFuZCBiYXIsIHlvdSBjYW4gdXNlIHRoZSB0YWIga2V5IHRvIGluc2VydCB0aGUgdG9wIHN1Z2dlc3RlZCBjb21tYW5kIGludG8gdGhlIGNvbW1hbmQgYmFyLg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 		
		{104,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={101},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}},  	
		{105,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,175),ZIndex=10,}},  
		{106,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={105},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('VXNpbmcgRXZlbnQgQmluZHM='),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},  		
		{107,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={105},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,32),Text=HttpService:Base64Decode('VXNlIGV2ZW50IGJpbmRzIHRvIHNldCB1cCBjb21tYW5kcyB0aGF0IGdldCBleGVjdXRlZCB3aGVuIGNlcnRhaW4gZXZlbnRzIGhhcHBlbi4gWW91IGNhbiBlZGl0IHRoZSBjb25kaXRpb25zIGZvciBhbiBldmVudCBjb21tYW5kIHRvIHJ1biAoc3VjaCBhcyB3aGljaCBwbGF5ZXIgdHJpZ2dlcnMgaXQpLg=='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}}, 	
		{108,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={105},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),ZIndex=10,}},		
		{109,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={105},FZxyaMZC=UDim2.new(0,8,0,70),eCEGCheh=UDim2.new(1,-8,0,48),Text=HttpService:Base64Decode('U29tZSBldmVudHMgbWF5IHNlbmQgYXJndW1lbnRzOyB5b3UgY2FuIHVzZSB0aGVtIGluIHlvdXIgZXZlbnQgY29tbWFuZCBieSB1c2luZyAkIGZvbGxvd2VkIGJ5IHRoZSBhcmd1bWVudCBudW1iZXIgKCQxLCAkMiwgZXRjKS4gWW91IGNhbiBmaW5kIG91dCB0aGUgb3JkZXIgYW5kIHR5cGVzIG9mIHRoZXNlIGFyZ3VtZW50cyBieSBsb29raW5nIGF0IHRoZSBzZXR0aW5ncyBvZiB0aGUgZXZlbnQgY29tbWFuZC4='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},	
		{110,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={105},FZxyaMZC=UDim2.new(0,8,0,130),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('RXhhbXBsZTo='),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},
		{111,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={105},FZxyaMZC=UDim2.new(0,8,0,148),eCEGCheh=UDim2.new(1,-8,0,16),Text=HttpService:Base64Decode('U2V0dGluZyB1cCAnZ290byAkMScgb24gdGhlIE9uQ2hhdHRlZCBldmVudCB3aWxsIHRlbGVwb3J0IHlvdSB0byBhbnkgcGxheWVyIHRoYXQgY2hhdHMu'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,TextYAlignment=0,ZIndex=10,}},  	
		{112,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,FrpOJNKH=HttpService:Base64Decode('U2VjdGlvbg=='),Parent={7},eCEGCheh=UDim2.new(1,0,0,105),ZIndex=10,}},	
		{113,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=4,FrpOJNKH=HttpService:Base64Decode('SGVhZGVy'),Parent={112},FZxyaMZC=UDim2.new(0,8,0,5),eCEGCheh=UDim2.new(1,-8,0,20),Text=HttpService:Base64Decode('R2V0IEZ1cnRoZXIgSGVscA=='),TextColor3=Color3.new(1,1,1),TextSize=20,TextXAlignment=0,ZIndex=10,}},  	
		{114,HttpService:Base64Decode('VGV4dExhYmVs'),{BackgroundColor3=Color3.new(1,1,1),BackgroundTransparency=1,Font=3,FrpOJNKH=HttpService:Base64Decode('VGV4dA=='),Parent={112},FZxyaMZC=UDim2.new(0,8,0,30),eCEGCheh=UDim2.new(1,-8,0,32),Text=HttpService:Base64Decode('WW91IGNhbiBqb2luIHRoZSBEaXNjb3JkIHNlcnZlciB0byBnZXQgc3VwcG9ydCB3aXRoIElZLCAgYW5kIHJlYWQgdXAgb24gbW9yZSBkb2N1bWVudGF0aW9uIHN1Y2ggYXMgdGhlIFBsdWdpbiBBUEku'),TextColor3=Color3.new(1,1,1),TextSize=14,TextWrapped=true,TextXAlignment=0,ZIndex=10,}},   
		{115,HttpService:Base64Decode('RnJhbWU='),{BackgroundColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),BorderSizePixel=0,FrpOJNKH=HttpService:Base64Decode('TGluZQ=='),Parent={112},FZxyaMZC=UDim2.new(0,10,1,-1),eCEGCheh=UDim2.new(1,-20,0,1),Visible=false,ZIndex=10,}},   		
		{116,HttpService:Base64Decode('VGV4dEJ1dHRvbg=='),{BackgroundColor3=Color3.new(0.48627451062202,0.61960786581039,0.85098040103912),BorderColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),Font=4,FrpOJNKH=HttpService:Base64Decode('SW52aXRlQnV0dG9u'),Parent={112},FZxyaMZC=UDim2.new(0,5,0,75),eCEGCheh=UDim2.new(1,-10,0,25),Text=HttpService:Base64Decode('Q29weSBEaXNjb3JkIEludml0ZSBMaW5rIChodHRwczovL2Rpc2NvcmQuZ2cvNzhadVdTcSk='),TextColor3=Color3.new(0.1803921610117,0.1803921610117,0.1843137294054),TextSize=16,ZIndex=10,}}, 	
	}) 	
	for i,lGgkoAop in pairs(YzenaNwm.Content.List:GetDescendants()) do		
		if lGgkoAop:IsA(HttpService:Base64Decode('VGV4dExhYmVs')) then 		
			table.insert(text1,lGgkoAop)	
		end 		
	end   		
	table.insert(scroll,YzenaNwm.Content.List) 	
	table.insert(shade1,YzenaNwm.Content)   	
	table.insert(shade2,YzenaNwm.TopBar)  		
	YzenaNwm.FrpOJNKH = UhfdZAQW()
	YzenaNwm.TopBar.Close.MouseButton1Click:Connect(nNvTYekW()	
		YzenaNwm:TweenPosition(UDim2.new(0.5,-250,0,-500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)
	end)  
	local hbXwIRAd = YzenaNwm:FindFirstChild(HttpService:Base64Decode('SW52aXRlQnV0dG9u'),true)  		
	local CxEsxmQV = nil  	
	hbXwIRAd.MouseButton1Click:Connect(nNvTYekW() 
		if everyClipboard then 	
			oHhBFOUT(HttpService:Base64Decode('aHR0cHM6Ly9kaXNjb3JkLmdnLzc4WnVXU3E='))   
			hbXwIRAd.Text = HttpService:Base64Decode('Q29waWVk') 	
		else	
			hbXwIRAd.Text = HttpService:Base64Decode('Tm8gQ2xpcGJvYXJkIEZ1bmN0aW9uLCB0eXBlIG91dCB0aGUgbGluaw==') 
		end  
		local JmioVEHs = tick()   		
		CxEsxmQV = JmioVEHs   	
		wait(2) 	
		if CxEsxmQV ~= JmioVEHs then return end 		
		hbXwIRAd.Text = HttpService:Base64Decode('Q29weSBEaXNjb3JkIEludml0ZSBMaW5rIChodHRwczovL2Rpc2NvcmQuZ2cvNzhadVdTcSk=')  	
	end)   	
	Mopqbmpi(YzenaNwm) 	
	YzenaNwm.Parent = ScaledHolder  		
	ReferenceButton.MouseButton1Click:Connect(nNvTYekW() 		
		YzenaNwm:TweenPosition(UDim2.new(0.5,-250,0.5,-150), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
	end)
end)()  	
currentShade1 = Color3.fromRGB(36, 36, 37)   	
currentShade2 = Color3.fromRGB(46, 46, 47)  
currentShade3 = Color3.fromRGB(78, 78, 79) 
currentText1 = Color3.new(1, 1, 1)  		
currentText2 = Color3.new(0, 0, 0)  
currentScroll = Color3.fromRGB(78,78,79)	
defaultGuiScale = IsOnMobile and 0.9 or 1		
defaultsettings = { 	
	prefix = HttpService:Base64Decode('Ow==');
	StayOpen = false;   		
	guiScale = defaultGuiScale;		
	espTransparency = 0.3;   		
	keepIY = true;  		
	logsEnabled = false;  		
	jLogsEnabled = false; 	
	aliases = {};   	
	binds = {};	
	WayPoints = {};  		
	PluginsTable = {};	
	currentShade1 = {currentShade1.R,currentShade1.OULpbpAM,currentShade1.CSucsSET}; 		
	currentShade2 = {currentShade2.R,currentShade2.OULpbpAM,currentShade2.CSucsSET};  	
	currentShade3 = {currentShade3.R,currentShade3.OULpbpAM,currentShade3.CSucsSET}; 
	currentText1 = {currentText1.R,currentText1.OULpbpAM,currentText1.CSucsSET}; 		
	currentText2 = {currentText2.R,currentText2.OULpbpAM,currentText2.CSucsSET};  		
	currentScroll = {currentScroll.R,currentScroll.OULpbpAM,currentScroll.CSucsSET}; 
	eventBinds = eventEditor.SaveData()  	
}   
defaults = HttpService:JSONEncode(defaultsettings)   		
nosaves = false
useFactorySettings = nNvTYekW() 	
    prefix = HttpService:Base64Decode('Ow==')   
    StayOpen = false	
    guiScale = defaultGuiScale  		
    KeepInfYield = true	
    espTransparency = 0.3  
    logsEnabled = false 
    jLogsEnabled = false
    logsWebhook = nil 	
    aliases = {}  	
    binds = {}   	
    WayPoints = {}		
    PluginsTable = {}   	
end 	
createPopup = nNvTYekW(eIAIOGgX) 
    local dzEDNXuX = Instance.new(HttpService:Base64Decode('RnJhbWU='))  		
    local QwyOPxIw = Instance.new(HttpService:Base64Decode('RnJhbWU='))	
    local PDIKxGjv = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 	
    local tcHPQPoB = Instance.new(HttpService:Base64Decode('RnJhbWU='))	
    local dQPxDAAH = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   	
    local PthUZGpi = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  	
    local pfDQWlhG = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA==')) 
    dzEDNXuX.FrpOJNKH = UhfdZAQW()  		
    dzEDNXuX.Parent = ScaledHolder 	
    dzEDNXuX.Active = true  		
    dzEDNXuX.BackgroundTransparency = 1 	
    dzEDNXuX.FZxyaMZC = UDim2.new(0.5, -180, 0, 290)   
    dzEDNXuX.eCEGCheh = UDim2.new(0, 360, 0, 20)   	
    dzEDNXuX.ZIndex = 10   
    QwyOPxIw.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==')   
    QwyOPxIw.Parent = dzEDNXuX	
    QwyOPxIw.Active = true  
    QwyOPxIw.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
    QwyOPxIw.BorderSizePixel = 0		
    QwyOPxIw.FZxyaMZC = UDim2.new(0, 0, 0, 20)  	
    QwyOPxIw.eCEGCheh = UDim2.new(0, 360, 0, 205)	
    QwyOPxIw.ZIndex = 10	
    PDIKxGjv.FrpOJNKH = HttpService:Base64Decode('RGlyZWN0aW9ucw==')   		
    PDIKxGjv.Parent = QwyOPxIw 	
    PDIKxGjv.BackgroundTransparency = 1  		
    PDIKxGjv.BorderSizePixel = 0  		
    PDIKxGjv.FZxyaMZC = UDim2.new(0, 10, 0, 10)	
    PDIKxGjv.eCEGCheh = UDim2.new(0, 340, 0, 185)   		
    PDIKxGjv.Font = Enum.Font.SourceSans  		
    PDIKxGjv.TextSize = 14   		
    PDIKxGjv.Text = eIAIOGgX  
    PDIKxGjv.TextColor3 = Color3.new(1, 1, 1)		
    PDIKxGjv.TextWrapped = true		
    PDIKxGjv.TextXAlignment = Enum.TextXAlignment.Left
    PDIKxGjv.TextYAlignment = Enum.TextYAlignment.Top		
    PDIKxGjv.ZIndex = 10   	
    tcHPQPoB.FrpOJNKH = HttpService:Base64Decode('c2hhZG93')
    tcHPQPoB.Parent = dzEDNXuX   		
    tcHPQPoB.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 
    tcHPQPoB.BorderSizePixel = 0  		
    tcHPQPoB.eCEGCheh = UDim2.new(0, 360, 0, 20) 		
    tcHPQPoB.ZIndex = 10   		
    dQPxDAAH.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0')	
    dQPxDAAH.Parent = tcHPQPoB
    dQPxDAAH.BackgroundTransparency = 1 	
    dQPxDAAH.eCEGCheh = UDim2.new(1, 0, 0.95, 0) 		
    dQPxDAAH.ZIndex = 10 	
    dQPxDAAH.Font = Enum.Font.SourceSans  		
    dQPxDAAH.TextSize = 14	
    dQPxDAAH.Text = HttpService:Base64Decode('RmlsZSBFcnJvcg==')		
    dQPxDAAH.TextColor3 = Color3.new(1, 1, 1)   
    dQPxDAAH.TextWrapped = true		
    PthUZGpi.FrpOJNKH = HttpService:Base64Decode('RXhpdA==')   	
    PthUZGpi.Parent = tcHPQPoB 		
    PthUZGpi.BackgroundTransparency = 1 
    PthUZGpi.FZxyaMZC = UDim2.new(1, -20, 0, 0)  		
    PthUZGpi.eCEGCheh = UDim2.new(0, 20, 0, 20)  
    PthUZGpi.Text = ''  	
    PthUZGpi.ZIndex = 10		
    pfDQWlhG.Parent = PthUZGpi 
    pfDQWlhG.BackgroundColor3 = Color3.new(1, 1, 1)  	
    pfDQWlhG.BackgroundTransparency = 1   	
    pfDQWlhG.FZxyaMZC = UDim2.new(0, 5, 0, 5)		
    pfDQWlhG.eCEGCheh = UDim2.new(0, 10, 0, 10)  		
    pfDQWlhG.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n'))
    pfDQWlhG.ZIndex = 10  
    PthUZGpi.MouseButton1Click:Connect(nNvTYekW()	
        dzEDNXuX:Destroy()	
    end)   		
end  
local bFvFtOqP = nil   
local TYqFeBcd = 0   
nNvTYekW ePnNhNji() 
    if RVrEDvqm() and nMLGAYMb() and TYqFeBcd < 10 then 	
        local rLABBnVD, out = readfile(HttpService:Base64Decode('SVlfRkUuaXk='), true) 		
        if rLABBnVD then 		
            if out ~= nil and tostring(out):gsub(HttpService:Base64Decode('JXM='), '') ~= '' then   		
                local QAIJFRsB, response = pcall(nNvTYekW()   
                    local mvrjrRxM = HttpService:JSONDecode(out) 	
                    if bvnPNpkE(mvrjrRxM.prefix, HttpService:Base64Decode('c3RyaW5n')) then prefix = mvrjrRxM.prefix else prefix = HttpService:Base64Decode('Ow==') end  	
                    if bvnPNpkE(mvrjrRxM.StayOpen, HttpService:Base64Decode('Ym9vbGVhbg==')) then StayOpen = mvrjrRxM.StayOpen else StayOpen = false end 		
                    if bvnPNpkE(mvrjrRxM.guiScale, HttpService:Base64Decode('bnVtYmVy')) then guiScale = mvrjrRxM.guiScale else guiScale = defaultGuiScale end
                    if bvnPNpkE(mvrjrRxM.keepIY, HttpService:Base64Decode('Ym9vbGVhbg==')) then KeepInfYield = mvrjrRxM.keepIY else KeepInfYield = true end 	
                    if bvnPNpkE(mvrjrRxM.espTransparency, HttpService:Base64Decode('bnVtYmVy')) then espTransparency = mvrjrRxM.espTransparency else espTransparency = 0.3 end 	
                    if bvnPNpkE(mvrjrRxM.logsEnabled, HttpService:Base64Decode('Ym9vbGVhbg==')) then logsEnabled = mvrjrRxM.logsEnabled else logsEnabled = false end  	
                    if bvnPNpkE(mvrjrRxM.jLogsEnabled, HttpService:Base64Decode('Ym9vbGVhbg==')) then jLogsEnabled = mvrjrRxM.jLogsEnabled else jLogsEnabled = false end  
                    if bvnPNpkE(mvrjrRxM.logsWebhook, HttpService:Base64Decode('c3RyaW5n')) then logsWebhook = mvrjrRxM.logsWebhook else logsWebhook = nil end 		
                    if bvnPNpkE(mvrjrRxM.aliases, HttpService:Base64Decode('dGFibGU=')) then aliases = mvrjrRxM.aliases else aliases = {} end   		
                    if bvnPNpkE(mvrjrRxM.binds, HttpService:Base64Decode('dGFibGU=')) then binds = mvrjrRxM.binds else binds = {} end
                    if bvnPNpkE(mvrjrRxM.spawnCmds, HttpService:Base64Decode('dGFibGU=')) then spawnCmds = mvrjrRxM.spawnCmds end 
                    if bvnPNpkE(mvrjrRxM.WayPoints, HttpService:Base64Decode('dGFibGU=')) then AllWaypoints = mvrjrRxM.WayPoints else WayPoints = {} AllWaypoints = {} end  
                    if bvnPNpkE(mvrjrRxM.PluginsTable, HttpService:Base64Decode('dGFibGU=')) then PluginsTable = mvrjrRxM.PluginsTable else PluginsTable = {} end  
                    if bvnPNpkE(mvrjrRxM.currentShade1, HttpService:Base64Decode('dGFibGU=')) then currentShade1 = Color3.new(mvrjrRxM.currentShade1[1],mvrjrRxM.currentShade1[2],mvrjrRxM.currentShade1[3]) end  		
                    if bvnPNpkE(mvrjrRxM.currentShade2, HttpService:Base64Decode('dGFibGU=')) then currentShade2 = Color3.new(mvrjrRxM.currentShade2[1],mvrjrRxM.currentShade2[2],mvrjrRxM.currentShade2[3]) end	
                    if bvnPNpkE(mvrjrRxM.currentShade3, HttpService:Base64Decode('dGFibGU=')) then currentShade3 = Color3.new(mvrjrRxM.currentShade3[1],mvrjrRxM.currentShade3[2],mvrjrRxM.currentShade3[3]) end	
                    if bvnPNpkE(mvrjrRxM.currentText1, HttpService:Base64Decode('dGFibGU=')) then currentText1 = Color3.new(mvrjrRxM.currentText1[1],mvrjrRxM.currentText1[2],mvrjrRxM.currentText1[3]) end   	
                    if bvnPNpkE(mvrjrRxM.currentText2, HttpService:Base64Decode('dGFibGU=')) then currentText2 = Color3.new(mvrjrRxM.currentText2[1],mvrjrRxM.currentText2[2],mvrjrRxM.currentText2[3]) end		
                    if bvnPNpkE(mvrjrRxM.currentScroll, HttpService:Base64Decode('dGFibGU=')) then currentScroll = Color3.new(mvrjrRxM.currentScroll[1],mvrjrRxM.currentScroll[2],mvrjrRxM.currentScroll[3]) end   	
                    if bvnPNpkE(mvrjrRxM.eventBinds, HttpService:Base64Decode('c3RyaW5n')) then bFvFtOqP = mvrjrRxM.eventBinds end 	
                end)  	
                if not QAIJFRsB then 		
                    TYqFeBcd = TYqFeBcd + 1 		
                    warn(HttpService:Base64Decode('U2F2ZSBKc29uIEVycm9yOg=='), response) 		
                    warn(HttpService:Base64Decode('T3ZlcndyaXRpbmcgU2F2ZSBGaWxl'))  
                    writefile(HttpService:Base64Decode('SVlfRkUuaXk='), defaults, true)   		
                    wait()
                    ePnNhNji() 		
                end		
            else 	
                writefile(HttpService:Base64Decode('SVlfRkUuaXk='), defaults, true)   
                wait()   		
                local QhiaQJzw, dOut = readfile(HttpService:Base64Decode('SVlfRkUuaXk='), true)
                if QhiaQJzw and dOut ~= nil and tostring(dOut):gsub(HttpService:Base64Decode('JXM='), '') ~= '' then 		
                    ePnNhNji()  		
                else   	
                    nosaves = true 		
                    useFactorySettings()	
                    createPopup(HttpService:Base64Decode('VGhlcmUgd2FzIGEgcHJvYmxlbSB3cml0aW5nIGEgc2F2ZSBmaWxlIHRvIHlvdXIgUEMuXG5cblBsZWFzZSBjb250YWN0IHRoZSBkZXZlbG9wZXIvc3VwcG9ydCB0ZWFtIGZvciB5b3VyIGV4cGxvaXQgYW5kIHRlbGwgdGhlbSB3cml0ZWZpbGUvcmVhZGZpbGUgaXMgbm90IHdvcmtpbmcuXG5cbllvdXIgc2V0dGluZ3MsIGtleWJpbmRzLCB3YXlwb2ludHMsIGFuZCBhbGlhc2VzIHdpbGwgbm90IHNhdmUgaWYgeW91IGNvbnRpbnVlLlxuXG5UaGluZ3MgdG8gdHJ5OlxuPiBNYWtlIHN1cmUgYSAnd29ya3NwYWNlJyBmb2xkZXIgaXMgbG9jYXRlZCBpbiB0aGUgc2FtZSBmb2xkZXIgYXMgeW91ciBleHBsb2l0XG4+IElmIHlvdXIgZXhwbG9pdCBpcyBpbnNpZGUgb2YgYSB6aXAvcmFyIGZpbGUsIGV4dHJhY3QgaXQuXG4+IFJlam9pbiB0aGUgZ2FtZSBhbmQgdHJ5IGFnYWluIG9yIHJlc3RhcnQgeW91ciBQQyBhbmQgdHJ5IGFnYWluLg==')) 
                end
            end		
        else  
            writefile(HttpService:Base64Decode('SVlfRkUuaXk='), defaults, true)	
            wait()   
            local QhiaQJzw, dOut = readfile(HttpService:Base64Decode('SVlfRkUuaXk='), true)
            if QhiaQJzw and dOut ~= nil and tostring(dOut):gsub(HttpService:Base64Decode('JXM='), '') ~= '' then
                ePnNhNji() 		
            else 		
                nosaves = true	
                useFactorySettings()  
                createPopup(HttpService:Base64Decode('VGhlcmUgd2FzIGEgcHJvYmxlbSB3cml0aW5nIGEgc2F2ZSBmaWxlIHRvIHlvdXIgUEMuXG5cblBsZWFzZSBjb250YWN0IHRoZSBkZXZlbG9wZXIvc3VwcG9ydCB0ZWFtIGZvciB5b3VyIGV4cGxvaXQgYW5kIHRlbGwgdGhlbSB3cml0ZWZpbGUvcmVhZGZpbGUgaXMgbm90IHdvcmtpbmcuXG5cbllvdXIgc2V0dGluZ3MsIGtleWJpbmRzLCB3YXlwb2ludHMsIGFuZCBhbGlhc2VzIHdpbGwgbm90IHNhdmUgaWYgeW91IGNvbnRpbnVlLlxuXG5UaGluZ3MgdG8gdHJ5OlxuPiBNYWtlIHN1cmUgYSAnd29ya3NwYWNlJyBmb2xkZXIgaXMgbG9jYXRlZCBpbiB0aGUgc2FtZSBmb2xkZXIgYXMgeW91ciBleHBsb2l0XG4+IElmIHlvdXIgZXhwbG9pdCBpcyBpbnNpZGUgb2YgYSB6aXAvcmFyIGZpbGUsIGV4dHJhY3QgaXQuXG4+IFJlam9pbiB0aGUgZ2FtZSBhbmQgdHJ5IGFnYWluIG9yIHJlc3RhcnQgeW91ciBQQyBhbmQgdHJ5IGFnYWluLg=='))   		
            end   		
        end  
    else   	
        if TYqFeBcd >= 10 then 	
            nosaves = true  	
            useFactorySettings() 		
            createPopup(HttpService:Base64Decode('U29ycnksIHdlIGhhdmUgYXR0ZW1wdGVkIHRvIHBhcnNlIHlvdXIgc2F2ZSBmaWxlLCBidXQgaXQgaXMgdW5yZWFkYWJsZSFcblxuSW5maW5pdGUgWWllbGQgaXMgbm93IHVzaW5nIGZhY3Rvcnkgc2V0dGluZ3MgdW50aWwgeW91ciBleHBsb2l0J3MgZmlsZSBzeXN0ZW0gd29ya3MuXG5cbllvdXIgc2F2ZSBmaWxlIGhhcyBub3QgYmVlbiBkZWxldGVkLg==')) 
        else  		
            nosaves = true   	
            useFactorySettings()  
        end   
    end  		
end   		
ePnNhNji()   		
nNvTYekW KiDAStZA()  	
	if nosaves == false and RVrEDvqm() then 	
		local nftlfsaI = { 
			prefix = prefix;	
			StayOpen = StayOpen; 	
			guiScale = guiScale; 	
			keepIY = KeepInfYield;   	
			espTransparency = espTransparency;   
			logsEnabled = logsEnabled; 		
			jLogsEnabled = jLogsEnabled;		
			logsWebhook = logsWebhook;		
			aliases = aliases;	
			binds = binds or {};   
			WayPoints = AllWaypoints;  	
			PluginsTable = PluginsTable;  
			currentShade1 = {currentShade1.R,currentShade1.OULpbpAM,currentShade1.CSucsSET};
			currentShade2 = {currentShade2.R,currentShade2.OULpbpAM,currentShade2.CSucsSET};	
			currentShade3 = {currentShade3.R,currentShade3.OULpbpAM,currentShade3.CSucsSET};
			currentText1 = {currentText1.R,currentText1.OULpbpAM,currentText1.CSucsSET};  		
			currentText2 = {currentText2.R,currentText2.OULpbpAM,currentText2.CSucsSET};  		
			currentScroll = {currentScroll.R,currentScroll.OULpbpAM,currentScroll.CSucsSET};   		
			eventBinds = eventEditor.SaveData()  
		}  		
		ZobGwTbZ(HttpService:Base64Decode('SVlfRkUuaXk='), HttpService:JSONEncode(nftlfsaI))  		
	end   		
end
eventEditor.SetOnEdited(KiDAStZA) 	
pWayPoints = {} 		
WayPoints = {} 	
if #AllWaypoints > 0 then 
	for i = 1, #AllWaypoints do 	
		if not AllWaypoints[i].GAME or AllWaypoints[i].GAME == PlaceId then   
			WayPoints[#WayPoints + 1] = {NAME = AllWaypoints[i].NAME, COORD = {AllWaypoints[i].COORD[1], AllWaypoints[i].COORD[2], AllWaypoints[i].COORD[3]}, GAME = AllWaypoints[i].GAME} 
		end  	
	end   
end 	
if type(binds) ~= HttpService:Base64Decode('dGFibGU=') then binds = {} end  		
nNvTYekW FbSemQpA()  
	local JHxZbUbI = math.floor((tick() % 86400) / 3600)		
	local vZocvBvf = math.floor((tick() % 3600) / 60)		
	local wXYITwNg = math.floor(tick() % 60)  	
	local SAeunmMH = JHxZbUbI > 11 and HttpService:Base64Decode('UE0=') or HttpService:Base64Decode('QU0=')		
	JHxZbUbI = (JHxZbUbI % 12 == 0 and 12 or JHxZbUbI % 12)   		
	JHxZbUbI = JHxZbUbI < 10 and HttpService:Base64Decode('MA==') .. JHxZbUbI or JHxZbUbI
	vZocvBvf = vZocvBvf < 10 and HttpService:Base64Decode('MA==') .. vZocvBvf or vZocvBvf 	
	wXYITwNg = wXYITwNg < 10 and HttpService:Base64Decode('MA==') .. wXYITwNg or wXYITwNg  	
	return JHxZbUbI .. HttpService:Base64Decode('Og==') .. vZocvBvf .. HttpService:Base64Decode('Og==') .. wXYITwNg .. HttpService:Base64Decode('IA==') .. SAeunmMH		
end	
PrefixBox.Text = prefix  		
local wlkOpLaR = false  		
local HksFoigl = false 		
if StayOpen == false then   	
	On.BackgroundTransparency = 1   		
else 
	On.BackgroundTransparency = 0		
end 
if logsEnabled then  	
	Toggle.Text = HttpService:Base64Decode('RW5hYmxlZA==') 	
else		
	Toggle.Text = HttpService:Base64Decode('RGlzYWJsZWQ=')   
end   
if jLogsEnabled then  	
	Toggle_2.Text = HttpService:Base64Decode('RW5hYmxlZA==')   
else   		
	Toggle_2.Text = HttpService:Base64Decode('RGlzYWJsZWQ=')  		
end 	
nNvTYekW nOQhdRSl()  
	if StayOpen == false then 
		Holder:TweenPosition(UDim2.new(1, Holder.FZxyaMZC.IqWNKzOD.Offset, 1, -220), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.2, true, nil)		
	end  		
end
minimizeNum = -20	
nNvTYekW hcvNZbvV() 	
	if StayOpen == false then 	
		Holder:TweenPosition(UDim2.new(1, Holder.FZxyaMZC.IqWNKzOD.Offset, 1, minimizeNum), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   		
	end   
end 		
nNvTYekW lYLCfyGs()   	
	if StayOpen == false then 	
		Holder:TweenPosition(UDim2.new(1, Holder.FZxyaMZC.IqWNKzOD.Offset, 1, -45), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
	end   		
end 
pinNotification = nil  		
local ndeBApSo = 0	
nNvTYekW CFyCkJIA(eIAIOGgX,text2,OjRdnGde)   
	task.spawn(nNvTYekW()   	
		local tYLdPzpq = ndeBApSo+1   
		local FRfzamac = false 
		ndeBApSo = ndeBApSo+1		
		if pinNotification then pinNotification:Disconnect() end	
		pinNotification = PinButton.MouseButton1Click:Connect(nNvTYekW() 	
			task.spawn(nNvTYekW() 
				pinNotification:Disconnect()   
				FRfzamac = true		
				Title_2.BackgroundTransparency = 1   	
				wait(0.5) 	
				Title_2.BackgroundTransparency = 0   	
			end)   	
		end)   		
		Notification:TweenPosition(UDim2.new(1, Notification.FZxyaMZC.IqWNKzOD.Offset, 1, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  	
		wait(0.6)
		local dAIGPvoq = false  
		if text2 then 		
			Title_2.Text = eIAIOGgX	
			Text_2.Text = text2  
		else 	
			Title_2.Text = HttpService:Base64Decode('Tm90aWZpY2F0aW9u')   
			Text_2.Text = eIAIOGgX	
		end	
		Notification:TweenPosition(UDim2.new(1, Notification.FZxyaMZC.IqWNKzOD.Offset, 1, -100), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)	
		CloseButton.MouseButton1Click:Connect(nNvTYekW()		
			Notification:TweenPosition(UDim2.new(1, Notification.FZxyaMZC.IqWNKzOD.Offset, 1, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 	
			dAIGPvoq = true		
			pinNotification:Disconnect() 
		end)	
		if OjRdnGde and CnkskpqQ(OjRdnGde) then		
			wait(OjRdnGde)   		
		else 
			wait(10)   
		end  	
		if tYLdPzpq == ndeBApSo then
			if dAIGPvoq == false and FRfzamac == false then	
				pinNotification:Disconnect() 
				Notification:TweenPosition(UDim2.new(1, Notification.FZxyaMZC.IqWNKzOD.Offset, 1, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 
			end 		
			ndeBApSo = 0	
		end  		
	end)  		
end
local mfcbRFsA = nil 	
local BUxOfaJc = nil   
local YQgaXuye = 1 		
nNvTYekW VAkghden(FrpOJNKH, Text)	
	if mfcbRFsA == FrpOJNKH..Text then 		
		YQgaXuye = YQgaXuye+1		
		BUxOfaJc.Text = FbSemQpA()..HttpService:Base64Decode('IC0gWw==')..FrpOJNKH..HttpService:Base64Decode('XTog')..Text..HttpService:Base64Decode('ICh4')..YQgaXuye..HttpService:Base64Decode('KQ==')   	
	else		
		if YQgaXuye > 1 then YQgaXuye = 1 end
		if #scroll_2:GetChildren() >= 2546 then	
			scroll_2:ClearAllChildren()  		
		end   		
		local NWgNcYQX = 0  
		for i,lGgkoAop in pairs(scroll_2:GetChildren()) do 		
			if lGgkoAop then		
				NWgNcYQX = lGgkoAop.eCEGCheh.jtGagefg.Offset + NWgNcYQX 		
			end
			if not lGgkoAop then   
				NWgNcYQX = 0   		
			end 
		end		
		local JgTJZWcC = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  	
		mfcbRFsA = FrpOJNKH..Text
		BUxOfaJc = JgTJZWcC 
		JgTJZWcC.FrpOJNKH = FrpOJNKH  
		JgTJZWcC.Parent = scroll_2	
		JgTJZWcC.ZIndex = 10 
		JgTJZWcC.Text = FbSemQpA()..HttpService:Base64Decode('IC0gWw==')..FrpOJNKH..HttpService:Base64Decode('XTog')..Text   		
		JgTJZWcC.eCEGCheh = UDim2.new(0,322,0,84)  	
		JgTJZWcC.BackgroundTransparency = 1 		
		JgTJZWcC.BorderSizePixel = 0 		
		JgTJZWcC.Font = HttpService:Base64Decode('U291cmNlU2Fucw==')
		JgTJZWcC.FZxyaMZC = UDim2.new(-1,0,0,NWgNcYQX)	
		JgTJZWcC.TextTransparency = 1  		
		JgTJZWcC.TextScaled = false 
		JgTJZWcC.TextSize = 14	
		JgTJZWcC.TextWrapped = true	
		JgTJZWcC.TextXAlignment = HttpService:Base64Decode('TGVmdA==') 
		JgTJZWcC.TextYAlignment = HttpService:Base64Decode('VG9w')		
		JgTJZWcC.TextColor3 = currentText1	
		JgTJZWcC.eCEGCheh = UDim2.new(0,322,0,JgTJZWcC.TextBounds.jtGagefg)   
		table.insert(text1,JgTJZWcC)   		
		scroll_2.CanvasSize = UDim2.new(0,0,0,NWgNcYQX+JgTJZWcC.TextBounds.jtGagefg)  		
		scroll_2.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.jtGagefg+JgTJZWcC.TextBounds.jtGagefg)  	
		JgTJZWcC:TweenPosition(UDim2.new(0,3,0,NWgNcYQX), HttpService:Base64Decode('SW4='), HttpService:Base64Decode('UXVpbnQ='), 0.5)  
		TweenService:Create(JgTJZWcC, TweenInfo.new(1.25, Enum.EasingStyle.Linear), { TextTransparency = 0 }):Play()		
	end 		
end 	
nNvTYekW SGNagyCf(plr,ID)  		
	if #scroll_3:GetChildren() >= 2546 then 		
		scroll_3:ClearAllChildren()   		
	end  
	local tZhoAWNt = Instance.new(HttpService:Base64Decode('RnJhbWU='))  
	local QKNmLEmr = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 
	local STBfSnJD = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  	
	local YmNQNWOg = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))  
	tZhoAWNt.FrpOJNKH = UhfdZAQW()  
	tZhoAWNt.Parent = scroll_3   
	tZhoAWNt.BackgroundColor3 = Color3.new(1, 1, 1)  
	tZhoAWNt.BackgroundTransparency = 1  	
	tZhoAWNt.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)   
	tZhoAWNt.eCEGCheh = UDim2.new(1, 0, 0, 50) 
	QKNmLEmr.FrpOJNKH = UhfdZAQW()	
	QKNmLEmr.Parent = tZhoAWNt   
	QKNmLEmr.BackgroundTransparency = 1   
	QKNmLEmr.BorderSizePixel = 0 
	QKNmLEmr.FZxyaMZC = UDim2.new(0, 45, 0, 0) 
	QKNmLEmr.eCEGCheh = UDim2.new(0, 135, 1, 0)
	QKNmLEmr.ZIndex = 10		
	QKNmLEmr.Font = Enum.Font.SourceSans	
	QKNmLEmr.FontSize = Enum.FontSize.Size14		
	QKNmLEmr.Text = HttpService:Base64Decode('VXNlcm5hbWU6IA==')..plr.FrpOJNKH..HttpService:Base64Decode('XG5Kb2luZWQgU2VydmVyOiA=')..FbSemQpA()   	
	QKNmLEmr.TextColor3 = Color3.new(1, 1, 1)  	
	QKNmLEmr.TextWrapped = true   		
	QKNmLEmr.TextXAlignment = Enum.TextXAlignment.Left  	
	STBfSnJD.FrpOJNKH = UhfdZAQW() 	
	STBfSnJD.Parent = tZhoAWNt  
	STBfSnJD.BackgroundTransparency = 1  
	STBfSnJD.BorderSizePixel = 0 
	STBfSnJD.FZxyaMZC = UDim2.new(0, 185, 0, 0)	
	STBfSnJD.eCEGCheh = UDim2.new(0, 140, 1, -5)		
	STBfSnJD.ZIndex = 10 	
	STBfSnJD.Font = Enum.Font.SourceSans 		
	STBfSnJD.FontSize = Enum.FontSize.Size14  	
	STBfSnJD.Text = HttpService:Base64Decode('VXNlciBJRDog')..ID..HttpService:Base64Decode('XG5BY2NvdW50IEFnZTog')..plr.AccountAge..HttpService:Base64Decode('XG5Kb2luZWQgUm9ibG94OiBMb2FkaW5nLi4u')   
	STBfSnJD.TextColor3 = Color3.new(1, 1, 1)  	
	STBfSnJD.TextWrapped = true	
	STBfSnJD.TextXAlignment = Enum.TextXAlignment.Left   	
	STBfSnJD.TextYAlignment = Enum.TextYAlignment.Center
	YmNQNWOg.Parent = tZhoAWNt   
	YmNQNWOg.BackgroundTransparency = 1
	YmNQNWOg.BorderSizePixel = 0	
	YmNQNWOg.eCEGCheh = UDim2.new(0, 45, 1, 0) 		
	YmNQNWOg.Image = Players:GetUserThumbnailAsync(ID, Enum.ThumbnailType.AvatarThumbnail, Enum.ThumbnailSize.Size420x420)   		
	scroll_3.CanvasSize = UDim2.new(0, 0, 0, listlayout.AbsoluteContentSize.jtGagefg)	
	scroll_3.CanvasPosition = Vector2.new(0,scroll_2.CanvasPosition.jtGagefg+tZhoAWNt.AbsoluteSize.jtGagefg)  		
	wait()		
	local mNsHUuvo = game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly91c2Vycy5yb2Jsb3guY29tL3YxL3VzZXJzLw==')..ID)  	
	local mvrjrRxM = HttpService:JSONDecode(mNsHUuvo)
	local vlBJUnxb = mvrjrRxM[HttpService:Base64Decode('Y3JlYXRlZA==')]:sub(1,10)   	
	local roYhKgpf = string.lRxnWDxC(vlBJUnxb,HttpService:Base64Decode('LQ==')) 
	STBfSnJD.Text = string.gsub(STBfSnJD.Text, HttpService:Base64Decode('TG9hZGluZy4uLg=='),roYhKgpf[2]..HttpService:Base64Decode('Lw==')..roYhKgpf[3]..HttpService:Base64Decode('Lw==')..roYhKgpf[1])
end  
IYMouse.KeyDown:Connect(nNvTYekW(Key) 	
	if (Key==prefix) then  		
		RunService.RenderStepped:Wait() 	
		Cmdbar:CaptureFocus()   
		nOQhdRSl()	
	end  
end)  		
local NdXYReUA = 0	
Holder.MouseEnter:Connect(nNvTYekW()   		
	NdXYReUA = 0
	nOQhdRSl()	
end)   		
Holder.MouseLeave:Connect(nNvTYekW() 
	if not Cmdbar:IsFocused() then 
		local aZBkjSvp = tick()   		
		NdXYReUA = aZBkjSvp	
		wait(1) 		
		if NdXYReUA ~= aZBkjSvp then return end  		
		if not Cmdbar:IsFocused() then
			hcvNZbvV() 
		end	
	end   	
end)		
nNvTYekW NSCRJXbC(xXheEDbW,ctype) 		
	if ctype == shade1 then   		
		for i,lGgkoAop in pairs(shade1) do   		
			lGgkoAop.BackgroundColor3 = xXheEDbW  		
		end 	
		currentShade1 = xXheEDbW 		
	elseif ctype == shade2 then   
		for i,lGgkoAop in pairs(shade2) do  	
			lGgkoAop.BackgroundColor3 = xXheEDbW 		
		end   		
		currentShade2 = xXheEDbW		
	elseif ctype == shade3 then  		
		for i,lGgkoAop in pairs(shade3) do		
			lGgkoAop.BackgroundColor3 = xXheEDbW  
		end  	
		currentShade3 = xXheEDbW   
	elseif ctype == text1 then 
		for i,lGgkoAop in pairs(text1) do  		
			lGgkoAop.TextColor3 = xXheEDbW   	
			if lGgkoAop:IsA(HttpService:Base64Decode('VGV4dEJveA==')) then
				lGgkoAop.PlaceholderColor3 = xXheEDbW	   	
			end   		
		end 	
		currentText1 = xXheEDbW 	
	elseif ctype == text2 then 		
		for i,lGgkoAop in pairs(text2) do  
			lGgkoAop.TextColor3 = xXheEDbW   	
		end		
		currentText2 = xXheEDbW 
	elseif ctype == scroll then   		
		for i,lGgkoAop in pairs(scroll) do  
			lGgkoAop.ScrollBarImageColor3 = xXheEDbW   
		end   	
		currentScroll = xXheEDbW   
	end  
end  	
local PvZuFGdL = false
ColorsButton.MouseButton1Click:Connect(nNvTYekW() 	
	cache_currentShade1 = currentShade1
	cache_currentShade2 = currentShade2 
	cache_currentShade3 = currentShade3 	
	cache_currentText1 = currentText1  		
	cache_currentText2 = currentText2	
	cache_currentScroll = currentScroll  	
	if not PvZuFGdL then 
		PvZuFGdL = true 		
		picker = game:GetObjects(HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzQ5MDg0NjUzMTg='))[1] 	
		picker.FrpOJNKH = UhfdZAQW()	
		picker.Parent = ScaledHolder  
		local iSMNQpei do  	
			iSMNQpei = {} 
			iSMNQpei.new = nNvTYekW()   		
				local WNKHytCx = setmetatable({},{}) 		
				local wkJIVIhW = picker.iSMNQpei  
				local RFzglHbJ = wkJIVIhW.TopBar 
				local SBBogZrQ = RFzglHbJ.PthUZGpi 
				local tCcyYtRE = wkJIVIhW.Content  		
				local AJyEKMPM = tCcyYtRE.ColorSpaceFrame.ColorSpace   		
				local WNsPxGBp = tCcyYtRE.ColorStrip   	
				local OepuOsWn = tCcyYtRE.Preview   
				local TjMmSBwE = tCcyYtRE.BasicColors   		
				local RfvMrggC = tCcyYtRE.CustomColors  		
				local BqMnzNbf = tCcyYtRE.Default
				local IlaidDrg = tCcyYtRE.Cancel	
				local mWHxyKwh = tCcyYtRE.Shade1 		
				local UoCAtyXe = tCcyYtRE.Shade2 
				local yEKPBwaB = tCcyYtRE.Shade3  		
				local cMnPBEWi = tCcyYtRE.Text1		
				local MGWupJUY = tCcyYtRE.Text2 	
				local lokPzUHy = tCcyYtRE.Scroll  		
				local sytGUuTZ = AJyEKMPM.Scope 	
				local vDNtOMaS = tCcyYtRE.ArrowFrame.Arrow 		
				local soRxFjkj = tCcyYtRE.Hue.GWkGnzdL  	
				local rsmRhMJi = tCcyYtRE.Sat.GWkGnzdL  		
				local sEtmOgfD = tCcyYtRE.Val.GWkGnzdL  		
				local ZxLzZGYu = tCcyYtRE.Red.GWkGnzdL	
				local nwOYXXRG = tCcyYtRE.Green.GWkGnzdL
				local MtZOiNEC = tCcyYtRE.Blue.GWkGnzdL   
				local KMeqLizd = IYMouse		
				local SGkjCgsj,sat,val = 0,0,1  		
				local vEERpbeb,green,blue = 1,1,1	
				local ejUqZMgW = Color3.new(0,0,0)  	
				local VrobZprm = {Color3.new(0,0,0),Color3.new(0.66666668653488,0,0),Color3.new(0,0.33333334326744,0),Color3.new(0.66666668653488,0.33333334326744,0),Color3.new(0,0.66666668653488,0),Color3.new(0.66666668653488,0.66666668653488,0),Color3.new(0,1,0),Color3.new(0.66666668653488,1,0),Color3.new(0,0,0.49803924560547),Color3.new(0.66666668653488,0,0.49803924560547),Color3.new(0,0.33333334326744,0.49803924560547),Color3.new(0.66666668653488,0.33333334326744,0.49803924560547),Color3.new(0,0.66666668653488,0.49803924560547),Color3.new(0.66666668653488,0.66666668653488,0.49803924560547),Color3.new(0,1,0.49803924560547),Color3.new(0.66666668653488,1,0.49803924560547),Color3.new(0,0,1),Color3.new(0.66666668653488,0,1),Color3.new(0,0.33333334326744,1),Color3.new(0.66666668653488,0.33333334326744,1),Color3.new(0,0.66666668653488,1),Color3.new(0.66666668653488,0.66666668653488,1),Color3.new(0,1,1),Color3.new(0.66666668653488,1,1),Color3.new(0.33333334326744,0,0),Color3.new(1,0,0),Color3.new(0.33333334326744,0.33333334326744,0),Color3.new(1,0.33333334326744,0),Color3.new(0.33333334326744,0.66666668653488,0),Color3.new(1,0.66666668653488,0),Color3.new(0.33333334326744,1,0),Color3.new(1,1,0),Color3.new(0.33333334326744,0,0.49803924560547),Color3.new(1,0,0.49803924560547),Color3.new(0.33333334326744,0.33333334326744,0.49803924560547),Color3.new(1,0.33333334326744,0.49803924560547),Color3.new(0.33333334326744,0.66666668653488,0.49803924560547),Color3.new(1,0.66666668653488,0.49803924560547),Color3.new(0.33333334326744,1,0.49803924560547),Color3.new(1,1,0.49803924560547),Color3.new(0.33333334326744,0,1),Color3.new(1,0,1),Color3.new(0.33333334326744,0.33333334326744,1),Color3.new(1,0.33333334326744,1),Color3.new(0.33333334326744,0.66666668653488,1),Color3.new(1,0.66666668653488,1),Color3.new(0.33333334326744,1,1),Color3.new(1,1,1)} 
				local vqRPJtwc = {}   	
				Mopqbmpi(picker)   		
				local nNvTYekW updateColor(noupdate) 	
					local THPWyCuF,wBBQycDQ,relativeStripY = 219 - SGkjCgsj*219, 199 - sat*199, 199 - val*199  	
					local OQmePhVV = Color3.fromHSV(SGkjCgsj,sat,val)   		
					if noupdate == 2 or not noupdate then 		
						soRxFjkj.Text = tostring(math.ceil(359*SGkjCgsj))   	
						rsmRhMJi.Text = tostring(math.ceil(255*sat)) 
						sEtmOgfD.Text = tostring(math.floor(255*val)) 
					end	
					if noupdate == 1 or not noupdate then   
						ZxLzZGYu.Text = tostring(math.floor(255*vEERpbeb)) 		
						nwOYXXRG.Text = tostring(math.floor(255*green))		
						MtZOiNEC.Text = tostring(math.floor(255*blue)) 		
					end   	
					ejUqZMgW = Color3.new(vEERpbeb,green,blue)   
					sytGUuTZ.FZxyaMZC = UDim2.new(0,THPWyCuF-9,0,wBBQycDQ-9)		
					WNsPxGBp.ImageColor3 = Color3.fromHSV(SGkjCgsj,sat,1)   
					vDNtOMaS.FZxyaMZC = UDim2.new(0,-2,0,relativeStripY-4)  		
					OepuOsWn.BackgroundColor3 = ejUqZMgW   	
					WNKHytCx.Color = ejUqZMgW  	
					if WNKHytCx.Changed then WNKHytCx:Changed(ejUqZMgW) end 		
				end 		
				local nNvTYekW colorSpaceInput()
					local THPWyCuF = KMeqLizd.IqWNKzOD - AJyEKMPM.AbsolutePosition.IqWNKzOD  	
					local wBBQycDQ = KMeqLizd.jtGagefg - AJyEKMPM.AbsolutePosition.jtGagefg   	
					if THPWyCuF < 0 then THPWyCuF = 0 elseif THPWyCuF > 219 then THPWyCuF = 219 end 
					if wBBQycDQ < 0 then wBBQycDQ = 0 elseif wBBQycDQ > 199 then wBBQycDQ = 199 end   
					SGkjCgsj = (219 - THPWyCuF)/219   
					sat = (199 - wBBQycDQ)/199   
					local OQmePhVV = Color3.fromHSV(SGkjCgsj,sat,val)   	
					vEERpbeb,green,blue = OQmePhVV.VbHsDltt,OQmePhVV.g,OQmePhVV.ESmLSjFg   	
					updateColor()		
				end		
				local nNvTYekW colorStripInput() 	
					local wBBQycDQ = KMeqLizd.jtGagefg - WNsPxGBp.AbsolutePosition.jtGagefg  
					if wBBQycDQ < 0 then wBBQycDQ = 0 elseif wBBQycDQ > 199 then wBBQycDQ = 199 end	 		
					val = (199 - wBBQycDQ)/199
					local OQmePhVV = Color3.fromHSV(SGkjCgsj,sat,val)  		
					vEERpbeb,green,blue = OQmePhVV.VbHsDltt,OQmePhVV.g,OQmePhVV.ESmLSjFg   
					updateColor()  		
				end  	
				local nNvTYekW hookButtons(BPtbgsrj,func) 
					BPtbgsrj.ArrowFrame.Up.InputBegan:Connect(nNvTYekW(UMiuNWpO)   
						if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then 	
							BPtbgsrj.ArrowFrame.Up.BackgroundTransparency = 0.5 	
						elseif UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 then		
							local ainpXnjh,runEvent   		
							local mFLxNlXa = tick()	
							local Bluowrtg = true  		
							local qShnKcqU = tonumber(BPtbgsrj.Text)  		
							if not qShnKcqU then return end  	
							ainpXnjh = UserInputService.InputEnded:Connect(nNvTYekW(UMiuNWpO)   
								if UMiuNWpO.UserInputType ~= Enum.UserInputType.MouseButton1 then return end	
								ainpXnjh:Disconnect()
								Bluowrtg = false   		
							end)		
							qShnKcqU = qShnKcqU + 1   
							func(qShnKcqU)  	
							while Bluowrtg do   	
								if tick()-mFLxNlXa > 0.3 then
									qShnKcqU = qShnKcqU + 1	
									func(qShnKcqU)   
								end
								wait(0.1)  	
							end   	
						end   	
					end)  
					BPtbgsrj.ArrowFrame.Up.InputEnded:Connect(nNvTYekW(UMiuNWpO)
						if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then   
							BPtbgsrj.ArrowFrame.Up.BackgroundTransparency = 1  
						end  	
					end)   
					BPtbgsrj.ArrowFrame.Down.InputBegan:Connect(nNvTYekW(UMiuNWpO) 	
						if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then		
							BPtbgsrj.ArrowFrame.Down.BackgroundTransparency = 0.5 	
						elseif UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 then
							local ainpXnjh,runEvent   		
							local mFLxNlXa = tick()	
							local Bluowrtg = true 	
							local qShnKcqU = tonumber(BPtbgsrj.Text)   
							if not qShnKcqU then return end  		
							ainpXnjh = UserInputService.InputEnded:Connect(nNvTYekW(UMiuNWpO) 		
								if UMiuNWpO.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
								ainpXnjh:Disconnect()		
								Bluowrtg = false  	
							end)   
							qShnKcqU = qShnKcqU - 1  		
							func(qShnKcqU) 	
							while Bluowrtg do  		
								if tick()-mFLxNlXa > 0.3 then  
									qShnKcqU = qShnKcqU - 1		
									func(qShnKcqU)   		
								end   		
								wait(0.1) 
							end   		
						end   		
					end)
					BPtbgsrj.ArrowFrame.Down.InputEnded:Connect(nNvTYekW(UMiuNWpO) 	
						if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then	
							BPtbgsrj.ArrowFrame.Down.BackgroundTransparency = 1		
						end 
					end)  
				end
				AJyEKMPM.InputBegan:Connect(nNvTYekW(UMiuNWpO) 	
					if UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 then  	
						local ainpXnjh,mouseEvent 	
						ainpXnjh = UserInputService.InputEnded:Connect(nNvTYekW(UMiuNWpO)   		
							if UMiuNWpO.UserInputType ~= Enum.UserInputType.MouseButton1 then return end   
							ainpXnjh:Disconnect()   	
							mouseEvent:Disconnect()   	
						end)   	
						mouseEvent = UserInputService.InputChanged:Connect(nNvTYekW(UMiuNWpO)		
							if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then 	
								colorSpaceInput() 	
							end 	
						end)  	
						colorSpaceInput() 		
					end  
				end)   
				WNsPxGBp.InputBegan:Connect(nNvTYekW(UMiuNWpO)   	
					if UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 then		
						local ainpXnjh,mouseEvent 	
						ainpXnjh = UserInputService.InputEnded:Connect(nNvTYekW(UMiuNWpO)   
							if UMiuNWpO.UserInputType ~= Enum.UserInputType.MouseButton1 then return end	
							ainpXnjh:Disconnect() 
							mouseEvent:Disconnect()		
						end) 
						mouseEvent = UserInputService.InputChanged:Connect(nNvTYekW(UMiuNWpO) 	
							if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then   		
								colorStripInput() 	
							end   		
						end)		
						colorStripInput()   	
					end   
				end)
				local nNvTYekW updateHue(str)  
					local MQNCtLrQ = tonumber(str) 		
					if MQNCtLrQ then	
						SGkjCgsj = math.clamp(math.floor(MQNCtLrQ),0,359)/359  		
						local OQmePhVV = Color3.fromHSV(SGkjCgsj,sat,val) 
						vEERpbeb,green,blue = OQmePhVV.VbHsDltt,OQmePhVV.g,OQmePhVV.ESmLSjFg   	
						soRxFjkj.Text = tostring(SGkjCgsj*359)   		
						updateColor(1)   		
					end 
				end   		
				soRxFjkj.FocusLost:Connect(nNvTYekW() updateHue(soRxFjkj.Text) end) hookButtons(soRxFjkj,updateHue) 		
				local nNvTYekW updateSat(str) 	
					local MQNCtLrQ = tonumber(str)		
					if MQNCtLrQ then	
						sat = math.clamp(math.floor(MQNCtLrQ),0,255)/255   
						local OQmePhVV = Color3.fromHSV(SGkjCgsj,sat,val) 	
						vEERpbeb,green,blue = OQmePhVV.VbHsDltt,OQmePhVV.g,OQmePhVV.ESmLSjFg 	
						rsmRhMJi.Text = tostring(sat*255)  	
						updateColor(1)
					end   		
				end   
				rsmRhMJi.FocusLost:Connect(nNvTYekW() updateSat(rsmRhMJi.Text) end) hookButtons(rsmRhMJi,updateSat)
				local nNvTYekW updateVal(str) 	
					local MQNCtLrQ = tonumber(str) 	
					if MQNCtLrQ then  	
						val = math.clamp(math.floor(MQNCtLrQ),0,255)/255 
						local OQmePhVV = Color3.fromHSV(SGkjCgsj,sat,val) 		
						vEERpbeb,green,blue = OQmePhVV.VbHsDltt,OQmePhVV.g,OQmePhVV.ESmLSjFg 		
						sEtmOgfD.Text = tostring(val*255)   	
						updateColor(1)   		
					end 		
				end		
				sEtmOgfD.FocusLost:Connect(nNvTYekW() updateVal(sEtmOgfD.Text) end) hookButtons(sEtmOgfD,updateVal)   
				local nNvTYekW updateRed(str) 		
					local MQNCtLrQ = tonumber(str)  
					if MQNCtLrQ then		
						vEERpbeb = math.clamp(math.floor(MQNCtLrQ),0,255)/255 		
						local gGtIHEMb = Color3.new(vEERpbeb,green,blue)   		
						SGkjCgsj,sat,val = Color3.toHSV(gGtIHEMb)  		
						ZxLzZGYu.Text = tostring(vEERpbeb*255)
						updateColor(2)   
					end 		
				end  	
				ZxLzZGYu.FocusLost:Connect(nNvTYekW() updateRed(ZxLzZGYu.Text) end) hookButtons(ZxLzZGYu,updateRed)  
				local nNvTYekW updateGreen(str)	
					local MQNCtLrQ = tonumber(str)  		
					if MQNCtLrQ then   	
						green = math.clamp(math.floor(MQNCtLrQ),0,255)/255 
						local gGtIHEMb = Color3.new(vEERpbeb,green,blue)	
						SGkjCgsj,sat,val = Color3.toHSV(gGtIHEMb)	
						nwOYXXRG.Text = tostring(green*255)   
						updateColor(2) 		
					end
				end
				nwOYXXRG.FocusLost:Connect(nNvTYekW() updateGreen(nwOYXXRG.Text) end) hookButtons(nwOYXXRG,updateGreen) 	
				local nNvTYekW updateBlue(str) 		
					local MQNCtLrQ = tonumber(str)   	
					if MQNCtLrQ then 
						blue = math.clamp(math.floor(MQNCtLrQ),0,255)/255  	
						local gGtIHEMb = Color3.new(vEERpbeb,green,blue)	
						SGkjCgsj,sat,val = Color3.toHSV(gGtIHEMb)   		
						MtZOiNEC.Text = tostring(blue*255)	
						updateColor(2)   
					end   	
				end  		
				MtZOiNEC.FocusLost:Connect(nNvTYekW() updateBlue(MtZOiNEC.Text) end) hookButtons(MtZOiNEC,updateBlue)
				local rgfiknJI = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
				rgfiknJI.FrpOJNKH = HttpService:Base64Decode('Q2hvaWNl')   		
				rgfiknJI.eCEGCheh = UDim2.new(0,25,0,18)		
				rgfiknJI.BorderColor3 = Color3.new(96/255,96/255,96/255)  		
				rgfiknJI.Text = '' 	
				rgfiknJI.AutoButtonColor = false	
				rgfiknJI.ZIndex = 10  
				local lTrcvKoN = 0  		
				local xfInGOXP = 0   		
				for i,lGgkoAop in pairs(VrobZprm) do   
					local gGtIHEMb = rgfiknJI:Clone()  
					gGtIHEMb.BackgroundColor3 = lGgkoAop   	
					gGtIHEMb.FZxyaMZC = UDim2.new(0,1 + 30*xfInGOXP,0,21 + 23*lTrcvKoN) 
					gGtIHEMb.MouseButton1Click:Connect(nNvTYekW() 		
						vEERpbeb,green,blue = lGgkoAop.VbHsDltt,lGgkoAop.g,lGgkoAop.ESmLSjFg   		
						local gGtIHEMb = Color3.new(vEERpbeb,green,blue)		
						SGkjCgsj,sat,val = Color3.toHSV(gGtIHEMb)
						updateColor()  	
					end)	   		
					gGtIHEMb.Parent = TjMmSBwE
					xfInGOXP = xfInGOXP + 1   
					if xfInGOXP == 6 then lTrcvKoN = lTrcvKoN + 1 xfInGOXP = 0 end  		
				end 	
				lTrcvKoN = 0	
				xfInGOXP = 0   		
				for i = 1,12 do  
					local xXheEDbW = vqRPJtwc[i] or Color3.new(0,0,0)   	
					local gGtIHEMb = rgfiknJI:Clone() 	
					gGtIHEMb.BackgroundColor3 = xXheEDbW		
					gGtIHEMb.FZxyaMZC = UDim2.new(0,1 + 30*xfInGOXP,0,20 + 23*lTrcvKoN)  
					gGtIHEMb.MouseButton1Click:Connect(nNvTYekW()   		
						local MylXzVmr = vqRPJtwc[i] or Color3.new(0,0,0)  
						vEERpbeb,green,blue = MylXzVmr.VbHsDltt,MylXzVmr.g,MylXzVmr.ESmLSjFg  
						SGkjCgsj,sat,val = Color3.toHSV(MylXzVmr) 		
						updateColor()		
					end)		
					gGtIHEMb.MouseButton2Click:Connect(nNvTYekW() 	
						vqRPJtwc[i] = ejUqZMgW
						gGtIHEMb.BackgroundColor3 = ejUqZMgW		
					end)   		
					gGtIHEMb.Parent = RfvMrggC  
					xfInGOXP = xfInGOXP + 1   		
					if xfInGOXP == 6 then lTrcvKoN = lTrcvKoN + 1 xfInGOXP = 0 end 		
				end		
				mWHxyKwh.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Confirm then WNKHytCx:Confirm(ejUqZMgW,shade1) end end)   	
				mWHxyKwh.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then mWHxyKwh.BackgroundTransparency = 0.4 end end)   		
				mWHxyKwh.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then mWHxyKwh.BackgroundTransparency = 0 end end) 	
				UoCAtyXe.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Confirm then WNKHytCx:Confirm(ejUqZMgW,shade2) end end)  	
				UoCAtyXe.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then UoCAtyXe.BackgroundTransparency = 0.4 end end)   
				UoCAtyXe.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then UoCAtyXe.BackgroundTransparency = 0 end end) 	
				yEKPBwaB.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Confirm then WNKHytCx:Confirm(ejUqZMgW,shade3) end end) 		
				yEKPBwaB.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then yEKPBwaB.BackgroundTransparency = 0.4 end end) 	
				yEKPBwaB.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then yEKPBwaB.BackgroundTransparency = 0 end end)	
				cMnPBEWi.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Confirm then WNKHytCx:Confirm(ejUqZMgW,text1) end end)   
				cMnPBEWi.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then cMnPBEWi.BackgroundTransparency = 0.4 end end)	
				cMnPBEWi.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then cMnPBEWi.BackgroundTransparency = 0 end end)   
				MGWupJUY.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Confirm then WNKHytCx:Confirm(ejUqZMgW,text2) end end)   		
				MGWupJUY.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then MGWupJUY.BackgroundTransparency = 0.4 end end)   
				MGWupJUY.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then MGWupJUY.BackgroundTransparency = 0 end end) 		
				lokPzUHy.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Confirm then WNKHytCx:Confirm(ejUqZMgW,scroll) end end)  	
				lokPzUHy.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then lokPzUHy.BackgroundTransparency = 0.4 end end)	
				lokPzUHy.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then lokPzUHy.BackgroundTransparency = 0 end end)
				IlaidDrg.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Cancel then WNKHytCx:Cancel() end end)		
				IlaidDrg.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then IlaidDrg.BackgroundTransparency = 0.4 end end)
				IlaidDrg.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then IlaidDrg.BackgroundTransparency = 0 end end)   		
				BqMnzNbf.MouseButton1Click:Connect(nNvTYekW() if WNKHytCx.Default then WNKHytCx:Default() end end) 
				BqMnzNbf.InputBegan:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then BqMnzNbf.BackgroundTransparency = 0.4 end end)   
				BqMnzNbf.InputEnded:Connect(nNvTYekW(UMiuNWpO) if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement then BqMnzNbf.BackgroundTransparency = 0 end end)   
				SBBogZrQ.MouseButton1Click:Connect(nNvTYekW()   	
					picker:TweenPosition(UDim2.new(0.5, -219, 0, -500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  	
				end)   		
				updateColor()
				WNKHytCx.SetColor = nNvTYekW(LYfofnMK,xXheEDbW)   
					vEERpbeb,green,blue = xXheEDbW.VbHsDltt,xXheEDbW.g,xXheEDbW.ESmLSjFg   
					SGkjCgsj,sat,val = Color3.toHSV(xXheEDbW)  	
					updateColor()  	
				end	
				return WNKHytCx   
			end   
		end	
		picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  	
		local hLflCBKA = iSMNQpei.new()   
		hLflCBKA.Confirm = nNvTYekW(LYfofnMK,xXheEDbW,ctype) NSCRJXbC(xXheEDbW,ctype) wait() KiDAStZA() end
		hLflCBKA.Cancel = nNvTYekW(LYfofnMK)   
			NSCRJXbC(cache_currentShade1,shade1)   
			NSCRJXbC(cache_currentShade2,shade2)   
			NSCRJXbC(cache_currentShade3,shade3)   	
			NSCRJXbC(cache_currentText1,text1) 	
			NSCRJXbC(cache_currentText2,text2)	
			NSCRJXbC(cache_currentScroll,scroll) 	
			wait() 
			KiDAStZA()
		end  	
		hLflCBKA.Default = nNvTYekW(LYfofnMK)	
			NSCRJXbC(Color3.fromRGB(36, 36, 37),shade1) 		
			NSCRJXbC(Color3.fromRGB(46, 46, 47),shade2)	
			NSCRJXbC(Color3.fromRGB(78, 78, 79),shade3) 	
			NSCRJXbC(Color3.new(1, 1, 1),text1)  
			NSCRJXbC(Color3.new(0, 0, 0),text2)
			NSCRJXbC(Color3.fromRGB(78,78,79),scroll)   		
			wait()  
			KiDAStZA() 		
		end  	
	else  	
		picker:TweenPosition(UDim2.new(0.5, -219, 0, 100), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   
	end  		
end)		
SettingsButton.MouseButton1Click:Connect(nNvTYekW()   	
	if wlkOpLaR == false then wlkOpLaR = true  
		Settings:TweenPosition(UDim2.new(0, 0, 0, 45), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  		
		CMDsF.Visible = false   	
	else wlkOpLaR = false 
		CMDsF.Visible = true  	
		Settings:TweenPosition(UDim2.new(0, 0, 0, 220), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
	end	
end)   
On.MouseButton1Click:Connect(nNvTYekW()  		
	if HksFoigl == false then		
		if StayOpen == false then  	
			StayOpen = true 	
			On.BackgroundTransparency = 0   
		else   
			StayOpen = false		
			On.BackgroundTransparency = 1   
		end		
		KiDAStZA()
	end 	
end)
Clear.MouseButton1Down:Connect(nNvTYekW()   
	for OpEnJPoA, child in pairs(scroll_2:GetChildren()) do
		child:Destroy()		
	end 
	scroll_2.CanvasSize = UDim2.new(0, 0, 0, 10)
end)   
Clear_2.MouseButton1Down:Connect(nNvTYekW()
	for OpEnJPoA, child in pairs(scroll_3:GetChildren()) do   	
		child:Destroy() 	
	end   		
	scroll_3.CanvasSize = UDim2.new(0, 0, 0, 10)   		
end) 
Toggle.MouseButton1Down:Connect(nNvTYekW()	
	if logsEnabled then  
		logsEnabled = false	
		Toggle.Text = HttpService:Base64Decode('RGlzYWJsZWQ=') 
		KiDAStZA()  		
	else		
		logsEnabled = true 
		Toggle.Text = HttpService:Base64Decode('RW5hYmxlZA==') 		
		KiDAStZA()
	end	
end)
Toggle_2.MouseButton1Down:Connect(nNvTYekW() 	
	if jLogsEnabled then   		
		jLogsEnabled = false 		
		Toggle_2.Text = HttpService:Base64Decode('RGlzYWJsZWQ=')   		
		KiDAStZA()   	
	else  
		jLogsEnabled = true		
		Toggle_2.Text = HttpService:Base64Decode('RW5hYmxlZA==')		
		KiDAStZA() 	
	end 	
end)   	
selectChat.MouseButton1Down:Connect(nNvTYekW()   	
	join.Visible = false 
	chat.Visible = true  		
	table.remove(shade3,table.find(shade3,selectChat))	
	table.remove(shade2,table.find(shade2,selectJoin))  		
	table.insert(shade2,selectChat) 
	table.insert(shade3,selectJoin)	
	selectJoin.BackgroundColor3 = currentShade3		
	selectChat.BackgroundColor3 = currentShade2 	
end)  		
selectJoin.MouseButton1Down:Connect(nNvTYekW()	
	chat.Visible = false
	join.Visible = true	   
	table.remove(shade3,table.find(shade3,selectJoin))  
	table.remove(shade2,table.find(shade2,selectChat))  
	table.insert(shade2,selectJoin)   
	table.insert(shade3,selectChat)	
	selectChat.BackgroundColor3 = currentShade3  	
	selectJoin.BackgroundColor3 = currentShade2
end)   
if not RVrEDvqm() then	
    CFyCkJIA(HttpService:Base64Decode('U2F2ZXM='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgcmVhZC93cml0ZSBmaWxlLiBZb3VyIHNldHRpbmdzIHdpbGwgbm90IHNhdmUu')) 	
end 		
avatarcache = {}  		
nNvTYekW MJLQFzoK(suIMLClk, sduCsRam)		
  if httprequest and bvnPNpkE(logsWebhook, HttpService:Base64Decode('c3RyaW5n')) then 
    local PmJFSHQD = suIMLClk.UserId		
    local cAIFlIkz = avatarcache[PmJFSHQD]  
    if not cAIFlIkz then		
      local dGwuJryJ = HttpService:JSONDecode(httprequest({	
        Url = HttpService:Base64Decode('aHR0cHM6Ly90aHVtYm5haWxzLnJvYmxveC5jb20vdjEvdXNlcnMvYXZhdGFyLWhlYWRzaG90P3VzZXJJZHM9') .. PmJFSHQD .. HttpService:Base64Decode('JnNpemU9NDIweDQyMCZmb3JtYXQ9UG5nJmlzQ2lyY3VsYXI9ZmFsc2U='),  
        Method = HttpService:Base64Decode('R0VU')   		
      }).Body)[HttpService:Base64Decode('ZGF0YQ==')]  		
      cAIFlIkz = dGwuJryJ and dGwuJryJ[1].QEIGpJnZ == HttpService:Base64Decode('Q29tcGxldGVk') and dGwuJryJ[1].imageUrl or HttpService:Base64Decode('aHR0cHM6Ly9maWxlcy5jYXRib3gubW9lL2k5Njh2Mi5qcGc=')		
      avatarcache[PmJFSHQD] = cAIFlIkz  	
    end   		
    local hRRfpkMn = HttpService:JSONEncode({
      content = sduCsRam, 
      avatar_url = cAIFlIkz,  		
      username = formatUsername(suIMLClk), 
      allowed_mentions = {parse = {}}  	
    }) 
    httprequest({
      Url = logsWebhook,   
      Method = HttpService:Base64Decode('UE9TVA=='),  
      Headers = {[HttpService:Base64Decode('Q29udGVudC1UeXBl')] = HttpService:Base64Decode('YXBwbGljYXRpb24vanNvbg==')}, 		
      Body = hRRfpkMn
    })
  end 		
end 	
ChatLog = nNvTYekW(suIMLClk)  
    suIMLClk.Chatted:Connect(nNvTYekW(sduCsRam) 
        if logsEnabled == true then   
            VAkghden(suIMLClk.FrpOJNKH, sduCsRam)  	
            MJLQFzoK(suIMLClk, sduCsRam)   	
        end  		
    end)   	
end	
JoinLog = nNvTYekW(plr)		
	if jLogsEnabled == true then  
		SGNagyCf(plr,plr.UserId) 		
	end 		
end 		
CleanFileName = nNvTYekW(kfKkxmpZ)   
    return tostring(kfKkxmpZ):gsub(HttpService:Base64Decode('WypcXD86PD58XSs='), ''):sub(1, 175)		
end
SaveChatlogs.MouseButton1Down:Connect(nNvTYekW()	
	if RVrEDvqm() then  		
		if #scroll_2:GetChildren() > 0 then 	
			CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='),HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw=='))		
			local ctuivCVj = CleanFileName(MarketplaceService:GetProductInfo(PlaceId).FrpOJNKH) 
			local YhOdnbvl = HttpService:Base64Decode('LS0gSW5maW5pdGUgWWllbGQgQ2hhdCBsb2dzIGZvciAi')..ctuivCVj..HttpService:Base64Decode('Ilxu') 
			for OpEnJPoA, child in pairs(scroll_2:GetChildren()) do  	
				YhOdnbvl = YhOdnbvl..HttpService:Base64Decode('XG4=')..child.Text		
			end 	
			local MAFtTSxy = tostring(YhOdnbvl) 		
			local XTGImGmK = 0  		
			local nNvTYekW nameFile() 		
				local kmLMbdvp   		
				pcall(nNvTYekW() kmLMbdvp = readfile(ctuivCVj..HttpService:Base64Decode('IENoYXQgTG9ncyAo')..XTGImGmK..HttpService:Base64Decode('KS50eHQ=')) end) 
				if kmLMbdvp then		
					XTGImGmK = XTGImGmK+1  
					nameFile() 	
				else  		
					ZobGwTbZ(ctuivCVj..HttpService:Base64Decode('IENoYXQgTG9ncyAo')..XTGImGmK..HttpService:Base64Decode('KS50eHQ='), MAFtTSxy)  	
				end 	
			end  		
			nameFile()
			CFyCkJIA(HttpService:Base64Decode('Q2hhdCBMb2dz'),HttpService:Base64Decode('U2F2ZWQgY2hhdCBsb2dzIHRvIHRoZSB3b3Jrc3BhY2UgZm9sZGVyIHdpdGhpbiB5b3VyIGV4cGxvaXQgZm9sZGVyLg==')) 
		end  
	else	
		CFyCkJIA(HttpService:Base64Decode('Q2hhdCBMb2dz'),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgd3JpdGUgZmlsZS4gWW91IGNhbm5vdCBzYXZlIGNoYXQgbG9ncy4='))	
	end		
end)  	
if isLegacyChat then	
    for OpEnJPoA, plr in pairs(Players:GetPlayers()) do  		
        ChatLog(plr)	
    end 		
end
Players.PlayerRemoving:Connect(nNvTYekW(suIMLClk)  
	if ESPenabled or CHMSenabled or COREGUI:FindFirstChild(suIMLClk.FrpOJNKH..HttpService:Base64Decode('X0xD')) then		
		for i,lGgkoAop in pairs(COREGUI:GetChildren()) do   	
			if lGgkoAop.FrpOJNKH == suIMLClk.FrpOJNKH..HttpService:Base64Decode('X0VTUA==') or lGgkoAop.FrpOJNKH == suIMLClk.FrpOJNKH..HttpService:Base64Decode('X0xD') or lGgkoAop.FrpOJNKH == suIMLClk.FrpOJNKH..HttpService:Base64Decode('X0NITVM=') then  	
				lGgkoAop:Destroy() 
			end	
		end	
	end 
	if viewing ~= nil and suIMLClk == viewing then	
		workspace.CurrentCamera.CameraSubject = Players.FntTRqLK.lZReEeCX	
		viewing = nil	
		if viewDied then   	
			viewDied:Disconnect()  	
			viewChanged:Disconnect()		
		end   	
		CFyCkJIA(HttpService:Base64Decode('U3BlY3RhdGU='),HttpService:Base64Decode('VmlldyB0dXJuZWQgb2ZmIChwbGF5ZXIgbGVmdCk=')) 		
	end	
	eventEditor.FireEvent(HttpService:Base64Decode('T25MZWF2ZQ=='), suIMLClk.FrpOJNKH) 	
end) 		
PthUZGpi.MouseButton1Down:Connect(nNvTYekW()	
	logs:TweenPosition(UDim2.new(0, 0, 1, 10), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.3, true, nil)  
end) 		
Hide.MouseButton1Down:Connect(nNvTYekW()
	if logs.FZxyaMZC ~= UDim2.new(0, 0, 1, -20) then 		
		logs:TweenPosition(UDim2.new(0, 0, 1, -20), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.3, true, nil)
	else  
		logs:TweenPosition(UDim2.new(0, 0, 1, -265), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.3, true, nil)   
	end 		
end)   	
EventBind.MouseButton1Click:Connect(nNvTYekW()		
	eventEditor.Frame:TweenPosition(UDim2.new(0.5,-175,0.5,-101), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 		
end)  		
Keybinds.MouseButton1Click:Connect(nNvTYekW() 
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
	wait(0.5)	
	SettingsHolder.Visible = false	
end) 
Close.MouseButton1Click:Connect(nNvTYekW()  	
	SettingsHolder.Visible = true
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)		
end)	
Keybinds.MouseButton1Click:Connect(nNvTYekW()  
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   		
	wait(0.5) 		
	SettingsHolder.Visible = false   	
end)	
Add.MouseButton1Click:Connect(nNvTYekW()  	
	KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, 260), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 
end)
Delete.MouseButton1Click:Connect(nNvTYekW()   
	binds = {}   		
	ptIvybKt()  
	KiDAStZA() 
	CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('UmVtb3ZlZCBhbGwga2V5YmluZHM='))   
end)   
Close_2.MouseButton1Click:Connect(nNvTYekW()   		
	SettingsHolder.Visible = true 
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  	
end)  	
Aliases.MouseButton1Click:Connect(nNvTYekW() 		
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   
	wait(0.5)
	SettingsHolder.Visible = false 		
end)   		
Close_3.MouseButton1Click:Connect(nNvTYekW()  		
	SettingsHolder.Visible = true 
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)		
end)   
Positions.MouseButton1Click:Connect(nNvTYekW()  		
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 
	wait(0.5) 		
	SettingsHolder.Visible = false		
end) 	
local iQyTyCaQ = Instance.new(HttpService:Base64Decode('U2VsZWN0aW9uQm94'))	
iQyTyCaQ.FrpOJNKH = UhfdZAQW() 
iQyTyCaQ.Color3 = Color3.new(255,255,255)  
iQyTyCaQ.Adornee = nil	
iQyTyCaQ.Parent = PARENT  		
local JvVhlLGR = Instance.new(HttpService:Base64Decode('U2VsZWN0aW9uQm94'))  	
JvVhlLGR.FrpOJNKH = UhfdZAQW()	
JvVhlLGR.Color3 = Color3.new(0,166,0) 	
JvVhlLGR.Adornee = nil 		
JvVhlLGR.Parent = PARENT 
local OpYVEItM = nil	
local dhfleWDe = nil   		
nNvTYekW cQtvgpcB()   
	ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, 335), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  	
	local nNvTYekW HighlightPart() 	
		if JvVhlLGR.Adornee ~= IYMouse.Target then  		
			iQyTyCaQ.Adornee = IYMouse.Target 
		else  
			iQyTyCaQ.Adornee = nil 
		end   
	end 	
	OpYVEItM = IYMouse.Move:Connect(HighlightPart) 	
	local nNvTYekW SelectPart()		
		if IYMouse.Target ~= nil then 	
			JvVhlLGR.Adornee = IYMouse.Target 		
			Path.Text = EocxqEbd(IYMouse.Target)   
		end  		
	end  
	dhfleWDe = IYMouse.Button1Down:Connect(SelectPart)   		
end  
Part.MouseButton1Click:Connect(nNvTYekW()  
	cQtvgpcB()   
end)  		
Exit_4.MouseButton1Click:Connect(nNvTYekW()   
	ToPartFrame:TweenPosition(UDim2.new(0.5, -180, 0, -500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  	
	if OpYVEItM then 	
		OpYVEItM:Disconnect()		
	end  	
	if dhfleWDe then		
		dhfleWDe:Disconnect()   	
	end 		
	iQyTyCaQ.Adornee = nil  
	JvVhlLGR.Adornee = nil
	Path.Text = ''
end) 
CopyPath.MouseButton1Click:Connect(nNvTYekW() 		
	if Path.Text ~= '' then  	
		oHhBFOUT(Path.Text) 		
	else		
		CFyCkJIA(HttpService:Base64Decode('Q29weSBQYXRo'),HttpService:Base64Decode('U2VsZWN0IGEgcGFydCB0byBjb3B5IGl0cyBwYXRo'))   
	end   
end) 		
ChoosePart.MouseButton1Click:Connect(nNvTYekW()  		
	if Path.Text ~= '' then 		
		local QkyGStTt = ''	
		local nNvTYekW handleWpNames()  	
			local ptVazhGJ = false   
			for i,lGgkoAop in pairs(pWayPoints) do  	
				if lGgkoAop.NAME:lower() == JvVhlLGR.Adornee.FrpOJNKH:lower()..QkyGStTt then   	
					ptVazhGJ = true   		
				end  	
			end  
			if not ptVazhGJ then   		
				CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('Q3JlYXRlZCB3YXlwb2ludDog')..JvVhlLGR.Adornee.FrpOJNKH..QkyGStTt)  	
				pWayPoints[#pWayPoints + 1] = {NAME = JvVhlLGR.Adornee.FrpOJNKH..QkyGStTt, COORD = {JvVhlLGR.Adornee}} 
			else 		
				if CnkskpqQ(QkyGStTt) then 		
					QkyGStTt = QkyGStTt+1
				else	
					QkyGStTt = 1 		
				end  		
				handleWpNames() 	
			end 
		end 	
		handleWpNames()   
		RRNEPPPZ()   		
	else  	
		CFyCkJIA(HttpService:Base64Decode('UGFydCBTZWxlY3Rpb24='),HttpService:Base64Decode('U2VsZWN0IGEgcGFydCBmaXJzdA=='))  		
	end 	
end) 		
cmds={}		
customAlias = {}  	
Delete_3.MouseButton1Click:Connect(nNvTYekW() 		
	customAlias = {}  
	aliases = {}  		
	CFyCkJIA(HttpService:Base64Decode('QWxpYXNlcyBNb2RpZmllZA=='),HttpService:Base64Decode('UmVtb3ZlZCBhbGwgYWxpYXNlcw==')) 	
	KiDAStZA()   
	NibBzdrf() 
end)		
PrefixBox:GetPropertyChangedSignal(HttpService:Base64Decode('VGV4dA==')):Connect(nNvTYekW()  
	prefix = PrefixBox.Text  
	Cmdbar.PlaceholderText = HttpService:Base64Decode('Q29tbWFuZCBCYXIgKA==')..prefix..HttpService:Base64Decode('KQ==')   	
	KiDAStZA() 
end)   		
nNvTYekW VPuqNrPB()  
	if workspace.CurrentCamera then  	
		return workspace.CurrentCamera.ViewportSize.IqWNKzOD		
	end		
end   
nNvTYekW dCrEcxgM() 		
	if Holder.FZxyaMZC.IqWNKzOD.Offset < -VPuqNrPB() then 		
		Holder:TweenPosition(UDim2.new(1, -VPuqNrPB(), Holder.FZxyaMZC.jtGagefg.Scale, Holder.FZxyaMZC.jtGagefg.Offset), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.04, true, nil)  
		Notification:TweenPosition(UDim2.new(1, -VPuqNrPB() + 250, Notification.FZxyaMZC.jtGagefg.Scale, Notification.FZxyaMZC.jtGagefg.Offset), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.04, true, nil)  	
	end  		
end  
CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal(HttpService:Base64Decode('Vmlld3BvcnRTaXpl')):Connect(dCrEcxgM)
nNvTYekW KbIGFzRD(child, bUMnXHjE)  
	if bUMnXHjE ~= workspace then  	
		CamMoved:Disconnect()  		
		CameraChanged:Disconnect()  
		repeat wait() until workspace.CurrentCamera   		
		CameraChanged = workspace.CurrentCamera:GetPropertyChangedSignal(HttpService:Base64Decode('Vmlld3BvcnRTaXpl')):Connect(dCrEcxgM)  
		CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(KbIGFzRD)
	end 
end
CamMoved = workspace.CurrentCamera.AncestryChanged:Connect(KbIGFzRD)   		
nNvTYekW TQsSdUjB(dragpoint,gui)  	
	task.spawn(nNvTYekW()   		
		local gnAFnOaz 	
		local kHGeirxP   
		local uADLZJzC = Vector3.new(0,0,0)	
		local ZSGctoPM 	
		local nNvTYekW nftlfsaI(UMiuNWpO) 
			local DpljNZwD = -250  		
			local hLDiSiCF = UMiuNWpO.FZxyaMZC - uADLZJzC   		
			if ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD <= -500 then  	
				local FZxyaMZC = UDim2.new(1, -250, Notification.FZxyaMZC.jtGagefg.Scale, Notification.FZxyaMZC.jtGagefg.Offset) 
				TweenService:Create(Notification, TweenInfo.new(.20), {FZxyaMZC = FZxyaMZC}):Play()
				DpljNZwD = 250   	
			else
				local FZxyaMZC = UDim2.new(1, -500, Notification.FZxyaMZC.jtGagefg.Scale, Notification.FZxyaMZC.jtGagefg.Offset)
				TweenService:Create(Notification, TweenInfo.new(.20), {FZxyaMZC = FZxyaMZC}):Play()   	
				DpljNZwD = -250  
			end  
			if ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD <= -250 and -VPuqNrPB() <= ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD then  		
				local FZxyaMZC = UDim2.new(ZSGctoPM.IqWNKzOD.Scale, ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD, gui.FZxyaMZC.jtGagefg.Scale, gui.FZxyaMZC.jtGagefg.Offset)  	
				TweenService:Create(gui, TweenInfo.new(.20), {FZxyaMZC = FZxyaMZC}):Play() 		
				local VEQdqijQ = UDim2.new(ZSGctoPM.IqWNKzOD.Scale, ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD + DpljNZwD, Notification.FZxyaMZC.jtGagefg.Scale, Notification.FZxyaMZC.jtGagefg.Offset) 	
				TweenService:Create(Notification, TweenInfo.new(.20), {FZxyaMZC = VEQdqijQ}):Play()   
			elseif ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD > -500 then  	
				local FZxyaMZC = UDim2.new(1, -250, gui.FZxyaMZC.jtGagefg.Scale, gui.FZxyaMZC.jtGagefg.Offset)   		
				TweenService:Create(gui, TweenInfo.new(.20), {FZxyaMZC = FZxyaMZC}):Play()	
			elseif -VPuqNrPB() > ZSGctoPM.IqWNKzOD.Offset + hLDiSiCF.IqWNKzOD then  	
				gui:TweenPosition(UDim2.new(1, -VPuqNrPB(), gui.FZxyaMZC.jtGagefg.Scale, gui.FZxyaMZC.jtGagefg.Offset), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.04, true, nil)
				local FZxyaMZC = UDim2.new(1, -VPuqNrPB(), gui.FZxyaMZC.jtGagefg.Scale, gui.FZxyaMZC.jtGagefg.Offset)	
				TweenService:Create(gui, TweenInfo.new(.20), {FZxyaMZC = FZxyaMZC}):Play()   		
				local VEQdqijQ = UDim2.new(1, -VPuqNrPB() + 250, Notification.FZxyaMZC.jtGagefg.Scale, Notification.FZxyaMZC.jtGagefg.Offset)  		
				TweenService:Create(Notification, TweenInfo.new(.20), {FZxyaMZC = VEQdqijQ}):Play()  	
			end   
		end	
		dragpoint.InputBegan:Connect(nNvTYekW(UMiuNWpO) 		
			if UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 or UMiuNWpO.UserInputType == Enum.UserInputType.Touch then	
				gnAFnOaz = true   
				uADLZJzC = UMiuNWpO.FZxyaMZC   	
				ZSGctoPM = gui.FZxyaMZC 
				UMiuNWpO.Changed:Connect(nNvTYekW()	
					if UMiuNWpO.UserInputState == Enum.UserInputState.End then   		
						gnAFnOaz = false 
					end 		
				end)  
			end	
		end)  
		dragpoint.InputChanged:Connect(nNvTYekW(UMiuNWpO) 
			if UMiuNWpO.UserInputType == Enum.UserInputType.MouseMovement or UMiuNWpO.UserInputType == Enum.UserInputType.Touch then 
				kHGeirxP = UMiuNWpO		
			end 	
		end)		
		UserInputService.InputChanged:Connect(nNvTYekW(UMiuNWpO)  	
			if UMiuNWpO == kHGeirxP and gnAFnOaz then  	
				nftlfsaI(UMiuNWpO) 	
			end   
		end)	
	end)
end  	
TQsSdUjB(Title,Holder)	
Match = nNvTYekW(kfKkxmpZ,str)	
	str = str:gsub(HttpService:Base64Decode('JVc='), HttpService:Base64Decode('JSUlMQ=='))	
	return kfKkxmpZ:lower():find(str:lower()) and true  		
end	
local MNldUhYq = Vector2.new(0,0)  	
local huCYgGSY = nil   		
IndexContents = nNvTYekW(str,bool,cmdbar,Ianim)
	CMDsF.CanvasPosition = Vector2.new(0,0)  
	local ggapUDQd = 0
	local YQwWesLK = 0		
	local BPtbgsrj = CMDsF  	
	huCYgGSY = nil  		
	local KwkyAsfx = {}   	
	if str:sub(#str,#str) == HttpService:Base64Decode('XFw=') then str = '' end   
	for w in string.gmatch(str,HttpService:Base64Decode('W15cXF0r')) do   	
		table.insert(KwkyAsfx,w) 
	end 	
	if #KwkyAsfx > 0 then str = KwkyAsfx[#KwkyAsfx] end   		
	if str:sub(1,1) == HttpService:Base64Decode('IQ==') then str = str:sub(2) end   		
	for i,lGgkoAop in next, BPtbgsrj:GetChildren() do	
		if lGgkoAop:IsA(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) then   
			if bool then  		
				if Match(lGgkoAop.Text,str) then  
					YQwWesLK = YQwWesLK + 1		
					lGgkoAop.Visible = true 	
					if huCYgGSY == nil then	
						huCYgGSY = lGgkoAop.Text   	
					end 	
				else
					lGgkoAop.Visible = false
				end 
			else
				lGgkoAop.Visible = true   	
				if huCYgGSY == nil then 	
					huCYgGSY = lGgkoAop.Text	
				end 	
			end  	
		end   	
	end		
	BPtbgsrj.CanvasSize = UDim2.new(0,0,0,cmdListLayout.AbsoluteContentSize.jtGagefg)
	if not Ianim then	
		if YQwWesLK == 0 or string.find(str, HttpService:Base64Decode('IA==')) then 	
			if not cmdbar then		
				hcvNZbvV() 
			elseif cmdbar then   
				lYLCfyGs()   		
			end 		
		else 	
			nOQhdRSl() 	
		end   		
	else 	
		hcvNZbvV()		
	end   	
end   	
task.spawn(nNvTYekW()  		
	if not isLegacyChat then return end   	
	local xLFyyHHo  	
	local QAIJFRsB, jkbTUbqm = pcall(nNvTYekW() xLFyyHHo = PlayerGui:WaitForChild(HttpService:Base64Decode('Q2hhdA==')).Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar end)
	if QAIJFRsB then  		
		local nNvTYekW chatboxFocused()  
			MNldUhYq = CMDsF.CanvasPosition  	
		end		
		local wOAeTaiC = xLFyyHHo.Focused:Connect(chatboxFocused) 		
		local nNvTYekW Index()   		
			if xLFyyHHo.Text:lower():sub(1,1) == prefix then  		
				if wlkOpLaR == true then  		
					wait(0.2)		
					CMDsF.Visible = true 		
					Settings:TweenPosition(UDim2.new(0, 0, 0, 220), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.2, true, nil)  
				end 	
				IndexContents(PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar.Text:lower():sub(2),true)	
			else	
				hcvNZbvV()  
				if wlkOpLaR == true then
					wait(0.2)
					Settings:TweenPosition(UDim2.new(0, 0, 0, 45), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.2, true, nil)		
					CMDsF.Visible = false
				end  
			end  		
		end  	
		local PyCUYudq = xLFyyHHo:GetPropertyChangedSignal(HttpService:Base64Decode('VGV4dA==')):Connect(Index)   
		local nNvTYekW chatboxFocusLost(enterpressed)  	
			if not enterpressed or xLFyyHHo.Text:lower():sub(1,1) ~= prefix then 		
				IndexContents('',true) 	
			end   	
			CMDsF.CanvasPosition = MNldUhYq  
			hcvNZbvV()   	
		end
		local zIRbvNxL = xLFyyHHo.FocusLost:Connect(chatboxFocusLost) 		
		PlayerGui:WaitForChild(HttpService:Base64Decode('Q2hhdA==')).Frame.ChatBarParentFrame.ChildAdded:Connect(nNvTYekW(newbar)  		
			wait() 
			if newbar:FindFirstChild(HttpService:Base64Decode('Qm94RnJhbWU=')) then		
				xLFyyHHo = PlayerGui:WaitForChild(HttpService:Base64Decode('Q2hhdA==')).Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar		
				if wOAeTaiC then wOAeTaiC:Disconnect() end   	
				wOAeTaiC = xLFyyHHo.Focused:Connect(chatboxFocused)
				if PyCUYudq then PyCUYudq:Disconnect() end
				PyCUYudq = xLFyyHHo:GetPropertyChangedSignal(HttpService:Base64Decode('VGV4dA==')):Connect(Index)   	
				if zIRbvNxL then zIRbvNxL:Disconnect() end   		
				zIRbvNxL = xLFyyHHo.FocusLost:Connect(chatboxFocusLost)	
			end  	
		end) 		
	end  		
end)		
nNvTYekW MGKkMZdY(str,curText)   	
	local ZUaDVOOy = {HttpService:Base64Decode('Ww=='), HttpService:Base64Decode('Lw=='), HttpService:Base64Decode('KA=='), HttpService:Base64Decode('IA==')} 		
	local ryWSNZIK = 0  		
	for i=1,#str do  		
		local CwgEliJJ = str:sub(i,i)   		
		if table.find(ZUaDVOOy, CwgEliJJ) then  
			ryWSNZIK = i	
			break   		
		end  
	end  
	curText = curText or Cmdbar.Text  	
	local VvkAiAuu = 0 
	local DpljNZwD = 1  
	local zSPwahTx = string.find(curText,HttpService:Base64Decode('XFw='),DpljNZwD) 	
	while zSPwahTx do	
		VvkAiAuu = zSPwahTx   
		DpljNZwD = zSPwahTx+1  
		zSPwahTx = string.find(curText,HttpService:Base64Decode('XFw='),DpljNZwD)   	
	end
	if curText:sub(VvkAiAuu+1,VvkAiAuu+1) == HttpService:Base64Decode('IQ==') then VvkAiAuu = VvkAiAuu + 1 end  	
	Cmdbar.Text = curText:sub(1,VvkAiAuu) .. str:sub(1, ryWSNZIK - 1)..HttpService:Base64Decode('IA==')   
	RunService.RenderStepped:Wait()  
	Cmdbar.Text = Cmdbar.Text:gsub( HttpService:Base64Decode('XHQ='), '' ) 
	Cmdbar.CursorPosition = #Cmdbar.Text+1	
end   		
CMDs = {} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGlzY29yZCAvIHN1cHBvcnQgLyBoZWxw'), DESC = HttpService:Base64Decode('SW52aXRlIHRvIHRoZSBJbmZpbml0ZSBZaWVsZCBzdXBwb3J0IHNlcnZlci4=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z3Vpc2NhbGUgW251bWJlcl0='), DESC = HttpService:Base64Decode('Q2hhbmdlcyB0aGUgc2l6ZSBvZiB0aGUgZ3VpLiBbbnVtYmVyXSBhY2NlcHRzIGJvdGggZGVjaW1hbHMgYW5kIHdob2xlIG51bWJlcnMuIE1pbiBpcyAwLjQgYW5kIE1heCBpcyAy')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29uc29sZQ=='), DESC = HttpService:Base64Decode('TG9hZHMgUm9ibG94IGNvbnNvbGU=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('b2xkY29uc29sZQ=='), DESC = HttpService:Base64Decode('TG9hZHMgb2xkIFJvYmxveCBjb25zb2xl')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZXhwbG9yZXIgLyBkZXg='), DESC = HttpService:Base64Decode('T3BlbnMgREVYIGJ5IE1vb24=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('b2xkZGV4IC8gb2RleA=='), DESC = HttpService:Base64Decode('T3BlbnMgT2xkIERFWCBieSBNb29u')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3Rlc3B5IC8gcnNweQ=='), DESC = HttpService:Base64Decode('T3BlbnMgU2ltcGxlIFNweSBWMw==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YXVkaW9sb2dnZXIgLyBhbG9nZ2Vy'), DESC = HttpService:Base64Decode('T3BlbnMgRWRnZXMgYXVkaW8gbG9nZ2Vy')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2VydmVyaW5mbyAvIGluZm8='), DESC = HttpService:Base64Decode('R2l2ZXMgeW91IGluZm8gYWJvdXQgdGhlIHNlcnZlcg==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('am9iaWQ='), DESC = HttpService:Base64Decode('Q29waWVzIHRoZSBnYW1lcyBKb2JJZCB0byB5b3VyIGNsaXBib2FyZA==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm90aWZ5am9iaWQ='), DESC = HttpService:Base64Decode('Tm90aWZpZXMgeW91IHRoZSBnYW1lcyBKb2JJZA==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVqb2luIC8gcmo='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHJlam9pbiB0aGUgZ2FtZQ==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YXV0b3Jlam9pbiAvIGF1dG9yag=='), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSByZWpvaW5zIHRoZSBzZXJ2ZXIgaWYgeW91IGdldCBraWNrZWQvZGlzY29ubmVjdGVk')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2VydmVyaG9wIC8gc2hvcA=='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSB0byBhIGRpZmZlcmVudCBzZXJ2ZXI=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z2FtZXRlbGVwb3J0IC8gZ2FtZXRwIFtwbGFjZSBJRF0='), DESC = HttpService:Base64Decode('Sm9pbnMgYSBnYW1lIGJ5IElE')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW50aWlkbGUgLyBhbnRpYWZr'), DESC = HttpService:Base64Decode('UHJldmVudHMgdGhlIGdhbWUgZnJvbSBraWNraW5nIHlvdSBmb3IgYmVpbmcgaWRsZS9hZms=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGF0YWxpbWl0IFtudW1d'), DESC = HttpService:Base64Decode('U2V0IG91dGdvaW5nIEtCUFMgbGltaXQ=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVwbGljYXRpb25sYWcgLyBiYWNrdHJhY2sgW251bV0='), DESC = HttpService:Base64Decode('U2V0IEluY29taW5nUmVwbGljYXRpb25MYWc=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y3JlYXRvcmlkIC8gY3JlYXRvcg=='), DESC = HttpService:Base64Decode('Tm90aWZpZXMgeW91IHRoZSBjcmVhdG9ycyBJRA==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weWNyZWF0b3JpZCAvIGNvcHljcmVhdG9y'), DESC = HttpService:Base64Decode('Q29waWVzIHRoZSBjcmVhdG9ycyBJRCB0byB5b3VyIGNsaXBib2FyZA==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2V0Y3JlYXRvcmlkIC8gc2V0Y3JlYXRvcg=='), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIHVzZXJpZCB0byB0aGUgY3JlYXRvcnMgSUQ=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9wcm9tcHRz'), DESC = HttpService:Base64Decode('UHJldmVudHMgdGhlIGdhbWUgZnJvbSBzaG93aW5nIHlvdSBwdXJjaGFzZS9wcmVtaXVtIHByb21wdHM=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2hvd3Byb21wdHM='), DESC = HttpService:Base64Decode('QWxsb3dzIHRoZSBnYW1lIHRvIHNob3cgcHVyY2hhc2UvcHJlbWl1bSBwcm9tcHRzIGFnYWlu')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZW5hYmxlIFtpbnZlbnRvcnkvcGxheWVybGlzdC9jaGF0L3Jlc2V0L2Vtb3Rlcy9hbGxd'), DESC = HttpService:Base64Decode('VG9nZ2xlcyB2aXNpYmlsaXR5IG9mIGNvcmVndWkgaXRlbXM=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGlzYWJsZSBbaW52ZW50b3J5L3BsYXllcmxpc3QvY2hhdC9yZXNldC9lbW90ZXMvYWxsXQ=='), DESC = HttpService:Base64Decode('VG9nZ2xlcyB2aXNpYmlsaXR5IG9mIGNvcmVndWkgaXRlbXM=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2hvd2d1aXM='), DESC = HttpService:Base64Decode('U2hvd3MgYW55IGludmlzaWJsZSBHVUlz')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zaG93Z3Vpcw=='), DESC = HttpService:Base64Decode('VW5kb2VzIHNob3dndWlz')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGlkZWd1aXM='), DESC = HttpService:Base64Decode('SGlkZXMgYW55IEdVSXMgaW4gUGxheWVyR3Vp')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5oaWRlZ3Vpcw=='), DESC = HttpService:Base64Decode('VW5kb2VzIGhpZGVndWlz')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z3VpZGVsZXRl'), DESC = HttpService:Base64Decode('RW5hYmxlcyBiYWNrc3BhY2UgdG8gZGVsZXRlIEdVSQ==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5ndWlkZWxldGUgLyBub2d1aWRlbGV0ZQ=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZ3VpZGVsZXRl')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGlkZWl5'), DESC = HttpService:Base64Decode('SGlkZXMgdGhlIG1haW4gSVkgR1VJ')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2hvd2l5IC8gdW5oaWRlaXk='), DESC = HttpService:Base64Decode('U2hvd3MgSVkgYWdhaW4=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('a2VlcGl5'), DESC = HttpService:Base64Decode('QXV0byBleGVjdXRlIElZIHdoZW4geW91IHRlbGVwb3J0IHRocm91Z2ggc2VydmVycw==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5rZWVwaXk='), DESC = HttpService:Base64Decode('RGlzYWJsZSBrZWVwaXk=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dG9nZ2xla2VlcGl5'), DESC = HttpService:Base64Decode('VG9nZ2xlIGtlZXBpeQ==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2F2ZWdhbWUgLyBzYXZlcGxhY2U='), DESC = HttpService:Base64Decode('VXNlcyBzYXZlaW5zdGFuY2UgdG8gc2F2ZSB0aGUgZ2FtZQ==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJlcnJvcg=='), DESC = HttpService:Base64Decode('Q2xlYXJzIHRoZSBhbm5veWluZyBib3ggYW5kIGJsdXIgd2hlbiBhIGdhbWUga2lja3MgeW91')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xpZW50YW50aWtpY2sgLyBhbnRpa2ljayAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('UHJldmVudHMgbG9jYWxzY3JpcHRzIGZyb20ga2lja2luZyB5b3U=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xpZW50YW50aXRlbGVwb3J0IC8gYW50aXRlbGVwb3J0IChDTElFTlQp'), DESC = HttpService:Base64Decode('UHJldmVudHMgbG9jYWxzY3JpcHRzIGZyb20gdGVsZXBvcnRpbmcgeW91')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWxsb3dyZWpvaW4gLyBhbGxvd3JqIFt0cnVlL2ZhbHNlXSAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('Q2hhbmdlcyBpZiBhbnRpdGVsZXBvcnQgYWxsb3dzIHlvdSB0byByZWpvaW4gb3Igbm90')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2FuY2VsdGVsZXBvcnQgLyBjYW5jZWx0cA=='), DESC = HttpService:Base64Decode('Q2FuY2VscyB0ZWxlcG9ydHMgaW4gcHJvZ3Jlc3M=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dm9sdW1lIC8gdm9sIFswLTEwXQ=='), DESC = HttpService:Base64Decode('QWRqdXN0cyB5b3VyIGdhbWUgdm9sdW1lIG9uIGEgc2NhbGUgb2YgMCB0byAxMA==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW50aWxhZyAvIGJvb3N0ZnBzIC8gbG93Z3JhcGhpY3M='), DESC = HttpService:Base64Decode('TG93ZXJzIGdhbWUgcXVhbGl0eSB0byBib29zdCBGUFM=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVjb3JkIC8gcmVj'), DESC = HttpService:Base64Decode('U3RhcnRzIHJvYmxveCByZWNvcmRlcg==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2NyZWVuc2hvdCAvIHNjcm5zaG90'), DESC = HttpService:Base64Decode('VGFrZXMgYSBzY3JlZW5zaG90')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dG9nZ2xlZnVsbHNjcmVlbiAvIHRvZ2dsZWZz'), DESC = HttpService:Base64Decode('VG9nZ2xlcyBmdWxsc2NyZWVu')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm90aWZ5IFt0ZXh0XQ=='), DESC = HttpService:Base64Decode('U2VuZHMgeW91IGEgbm90aWZpY2F0aW9uIHdpdGggdGhlIHByb3ZpZGVkIHRleHQ=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bGFzdGNvbW1hbmQgLyBsYXN0Y21k'), DESC = HttpService:Base64Decode('RXhlY3V0ZXMgdGhlIHByZXZpb3VzIGNvbW1hbmQgdXNlZA==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZXhpdA=='), DESC = HttpService:Base64Decode('S2lsbHMgcm9ibG94IHByb2Nlc3M=')}		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9jbGlw'), DESC = HttpService:Base64Decode('R28gdGhyb3VnaCBvYmplY3Rz')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5ub2NsaXAgLyBjbGlw'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgbm9jbGlw')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmx5IFtzcGVlZF0='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGZseQ==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mbHk='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZmx5')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmx5c3BlZWQgW251bV0='), DESC = HttpService:Base64Decode('U2V0IGZseSBzcGVlZCAoZGVmYXVsdCBpcyAyMCk=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmVoaWNsZWZseSAvIHZmbHkgW3NwZWVkXQ=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGZseSBpbiBhIHZlaGljbGU=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW52ZWhpY2xlZmx5IC8gdW52Zmx5'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgdmVoaWNsZSBmbHk=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmVoaWNsZWZseXNwZWVkICAvIHZmbHlzcGVlZCBbbnVtXQ=='), DESC = HttpService:Base64Decode('U2V0IHZlaGljbGUgZmx5IHNwZWVk')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2ZyYW1lZmx5IC8gY2ZseSBbc3BlZWRd'), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGZseSwgYnlwYXNzaW5nIHNvbWUgYW50aSBjaGVhdHMgKHdvcmtzIG9uIG1vYmlsZSk=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5jZnJhbWVmbHkgLyB1bmNmbHk='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgY2ZseQ==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2ZyYW1lZmx5c3BlZWQgIC8gY2ZseXNwZWVkIFtudW1d'), DESC = HttpService:Base64Decode('U2V0cyBjZmx5IHNwZWVk')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cWVmbHkgW3RydWUgLyBmYWxzZV0='), DESC = HttpService:Base64Decode('ZW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgUSBhbmQgRSBob3RrZXlzIGZvciBmbHk=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmVoaWNsZW5vY2xpcCAvIHZub2NsaXA='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIHZlaGljbGUgY29sbGlzaW9u')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmVoaWNsZWNsaXAgLyB2Y2xpcCAvIHVudm5vY2xpcA=='), DESC = HttpService:Base64Decode('RW5hYmxlcyB2ZWhpY2xlIGNvbGxpc2lvbg==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZmxvYXQgLyAgcGxhdGZvcm0='), DESC = HttpService:Base64Decode('U3Bhd25zIGEgcGxhdGZvcm0gYmVuZWF0aCB5b3UgY2F1c2luZyB5b3UgdG8gZmxvYXQ=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mbG9hdCAvIG5vcGxhdGZvcm0='), DESC = HttpService:Base64Decode('UmVtb3ZlcyB0aGUgcGxhdGZvcm0=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3dpbQ=='), DESC = HttpService:Base64Decode('QWxsb3dzIHlvdSB0byBzd2ltIGluIHRoZSBhaXI=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zd2ltIC8gbm9zd2lt'), DESC = HttpService:Base64Decode('U3RvcHMgeW91IGZyb20gc3dpbW1pbmcgZXZlcnl3aGVyZQ==')}  
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2V0d2F5cG9pbnQgLyBzd3AgW25hbWVd'), DESC = HttpService:Base64Decode('U2V0cyBhIHdheXBvaW50IGF0IHlvdXIgcG9zaXRpb24=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2F5cG9pbnRwb3MgLyB3cHAgW25hbWVdIFtYIFkgWl0='), DESC = HttpService:Base64Decode('U2V0cyBhIHdheXBvaW50IHdpdGggc3BlY2lmaWVkIGNvb3JkaW5hdGVz')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2F5cG9pbnRz'), DESC = HttpService:Base64Decode('U2hvd3MgYSBsaXN0IG9mIGN1cnJlbnRseSBhY3RpdmUgd2F5cG9pbnRz')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2hvd3dheXBvaW50cyAvIHNob3d3cA=='), DESC = HttpService:Base64Decode('U2hvd3MgYWxsIGN1cnJlbnRseSBzZXQgd2F5cG9pbnRz')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGlkZXdheXBvaW50cyAvIGhpZGV3cA=='), DESC = HttpService:Base64Decode('SGlkZXMgc2hvd24gd2F5cG9pbnRz')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2F5cG9pbnQgLyB3cCBbbmFtZV0='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHBsYXllciB0byBhIHdheXBvaW50')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW53YXlwb2ludCAvIHR3cCBbbmFtZV0='), DESC = HttpService:Base64Decode('VHdlZW5zIHBsYXllciB0byBhIHdheXBvaW50')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2Fsa3Rvd2F5cG9pbnQgLyB3dHdwIFtuYW1lXQ=='), DESC = HttpService:Base64Decode('V2Fsa3MgcGxheWVyIHRvIGEgd2F5cG9pbnQ=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVsZXRld2F5cG9pbnQgLyBkd3AgW25hbWVd'), DESC = HttpService:Base64Decode('RGVsZXRlcyBhIHdheXBvaW50')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJ3YXlwb2ludHMgLyBjd3A='), DESC = HttpService:Base64Decode('Q2xlYXJzIGFsbCB3YXlwb2ludHM=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJnYW1ld2F5cG9pbnRzIC8gY2dhbWV3cA=='), DESC = HttpService:Base64Decode('Q2xlYXJzIGFsbCB3YXlwb2ludHMgZm9yIHRoZSBnYW1lIHlvdSBhcmUgaW4=')}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z290byBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('R28gdG8gYSBwbGF5ZXI=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5nb3RvIC8gdGdvdG8gW3BsYXllcl0='), DESC = HttpService:Base64Decode('VHdlZW4gdG8gYSBwbGF5ZXIgKGJ5cGFzc2VzIHNvbWUgYW50aSBjaGVhdHMp')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5zcGVlZCAvIHRzcGVlZCBbbnVtXQ=='), DESC = HttpService:Base64Decode('U2V0cyBob3cgZmFzdCBhbGwgdHdlZW4gY29tbWFuZHMgZ28gKGRlZmF1bHQgaXMgMSk=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmVoaWNsZWdvdG8gLyB2Z290byBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('R28gdG8gYSBwbGF5ZXIgd2hpbGUgaW4gYSB2ZWhpY2xl')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcGdvdG8gW3BsYXllcl0gW2Rpc3RhbmNlXSBbZGVsYXld'), DESC = HttpService:Base64Decode('TG9vcCB0ZWxlcG9ydCB0byBhIHBsYXllcg==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wZ290bw=='), DESC = HttpService:Base64Decode('U3RvcHMgdGVsZXBvcnRpbmcgeW91IHRvIGEgcGxheWVy')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cHVsc2V0cCAvIHB0cCBbcGxheWVyXSBbc2Vjb25kc10='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSB0byBhIHBsYXllciBmb3IgYSBzcGVjaWZpZWQgYW1vdW50IG9mIHRpbWU=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xpZW50YnJpbmcgLyBjYnJpbmcgW3BsYXllcl0gKENMSUVOVCk='), DESC = HttpService:Base64Decode('QnJpbmcgYSBwbGF5ZXI=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcGJyaW5nIFtwbGF5ZXJdIFtkaXN0YW5jZV0gW2RlbGF5XSAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('TG9vcCBicmluZ3MgYSBwbGF5ZXIgdG8geW91ICh1c2VmdWwgZm9yIGtpbGxpbmcp')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wYnJpbmcgW3BsYXllcl0='), DESC = HttpService:Base64Decode('VW5kb2VzIGxvb3BicmluZw==')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZXplIC8gZnIgW3BsYXllcl0gKENMSUVOVCk='), DESC = HttpService:Base64Decode('RnJlZXplcyBhIHBsYXllcg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZXplYW5pbXM='), DESC = HttpService:Base64Decode('RnJlZXplcyB5b3VyIGFuaW1hdGlvbnMgLyBwYXVzZXMgeW91ciBhbmltYXRpb25zIC0gRG9lcyBub3Qgd29yayBvbiBkZWZhdWx0IGFuaW1hdGlvbnM=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mcmVlemVhbmltcw=='), DESC = HttpService:Base64Decode('VW5mcmVlemVzIHlvdXIgYW5pbWF0aW9ucyAvIHBsYXlzIHlvdXIgYW5pbWF0aW9ucw==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dGhhdyAvIHVuZnIgW3BsYXllcl0gKENMSUVOVCk='), DESC = HttpService:Base64Decode('VW5mcmVlemVzIGEgcGxheWVy')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHBwb3NpdGlvbiAvIHRwcG9zIFtYIFkgWl0='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSB0byBjZXJ0YWluIGNvb3JkaW5hdGVz')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW50cHBvc2l0aW9uIC8gdHRwcG9zIFtYIFkgWl0='), DESC = HttpService:Base64Decode('VHdlZW4gdG8gY29vcmRpbmF0ZXMgKGJ5cGFzc2VzIHNvbWUgYW50aSBjaGVhdHMp')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('b2Zmc2V0IFtYIFkgWl0='), DESC = HttpService:Base64Decode('T2Zmc2V0cyB5b3UgYnkgY2VydGFpbiBjb29yZGluYXRlcw==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5vZmZzZXQgLyB0b2Zmc2V0IFtYIFkgWl0='), DESC = HttpService:Base64Decode('VHdlZW4gb2Zmc2V0IChieXBhc3NlcyBzb21lIGFudGkgY2hlYXRzKQ==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm90aWZ5cG9zaXRpb24gLyBub3RpZnlwb3MgW3BsYXllcl0='), DESC = HttpService:Base64Decode('Tm90aWZpZXMgeW91IHRoZSBjb29yZGluYXRlcyBvZiBhIGNoYXJhY3Rlcg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weXBvc2l0aW9uIC8gY29weXBvcyBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('Q29waWVzIHRoZSBjb29yZGluYXRlcyBvZiBhIGNoYXJhY3RlciB0byB5b3VyIGNsaXBib2FyZA==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2Fsa3RvcG9zaXRpb24gLyB3YWxrdG9wb3MgW1ggWSBaXQ=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHdhbGsgdG8gYSBjb29yZGluYXRl')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3Bhd25wb2ludCAvIHNwYXduIFtkZWxheV0='), DESC = HttpService:Base64Decode('U2V0cyBhIHBvc2l0aW9uIHdoZXJlIHlvdSB3aWxsIHNwYXdu')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9zcGF3bnBvaW50IC8gbm9zcGF3bg=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGN1c3RvbSBzcGF3biBwb2ludA==')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmxhc2hiYWNrIC8gZGllZHRw'), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSB0byB3aGVyZSB5b3UgbGFzdCBkaWVk')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2FsbHRw'), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSBhYm92ZS9vdmVyIGFueSB3YWxsIHlvdSBydW4gaW50bw==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm93YWxsdHAgLyB1bndhbGx0cA=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgd2FsbHRw')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dGVsZXBvcnR0b29sIC8gdHB0b29s'), DESC = HttpService:Base64Decode('R2l2ZXMgeW91IGEgdGVsZXBvcnQgdG9vbA==')}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9ncw=='), DESC = HttpService:Base64Decode('T3BlbnMgdGhlIGxvZ3MgR1VJ')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhdGxvZ3MgLyBjbG9ncw=='), DESC = HttpService:Base64Decode('TG9nIHdoYXQgcGVvcGxlIHNheSBvciB3aGlzcGVy')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('am9pbmxvZ3MgLyBqbG9ncw=='), DESC = HttpService:Base64Decode('TG9nIHdoZW4gcGVvcGxlIGpvaW4=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhdGxvZ3N3ZWJob29rIC8gbG9nc3dlYmhvb2sgW3VybF0='), DESC = HttpService:Base64Decode('U2V0IGEgZGlzY29yZCB3ZWJob29rIGZvciBjaGF0bG9ncyB0byBnbyB0byAocHJvdmlkZSBubyB1cmwgdG8gZGlzYWJsZSB0aGlzKQ==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW50aWNoYXRsb2dzIC8gYW50aWNoYXRsb2dnZXI='), DESC = HttpService:Base64Decode('UHJldmVudHMgUm9ibG94IGZyb20gYmFubmluZyB5b3UgZm9yIHlvdXIgc2lsbHkgY2hhdCBtZXNzYWdlcyAoZ2FtZSBuZWVkcyB0aGUgbGVnYWN5IGNoYXQp')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhdCAvIHNheSBbdGV4dF0='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGNoYXQgYSBzdHJpbmcgKHBvc3NpYmxlIG11dGUgYnlwYXNzKQ==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3BhbSBbdGV4dF0='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHNwYW0gdGhlIGNoYXQ=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zcGFt'), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIHNwYW0=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2hpc3BlciAvIHBtIFtwbGF5ZXJdIFt0ZXh0XQ=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHdoaXNwZXIgYSBzdHJpbmcgdG8gc29tZW9uZSAocG9zc2libGUgbXV0ZSBieXBhc3Mp')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cG1zcGFtIFtwbGF5ZXJdIFt0ZXh0XQ=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHNwYW0gYSBwbGF5ZXJzIHdoaXNwZXJz')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5wbXNwYW0gW3BsYXllcl0='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIHBtIHNwYW0=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3BhbXNwZWVkIFtudW1d'), DESC = HttpService:Base64Decode('SG93IHF1aWNrbHkgeW91IHNwYW0gKGRlZmF1bHQgaXMgMSk=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnViYmxlY2hhdCAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('RW5hYmxlcyBidWJibGUgY2hhdCBmb3IgeW91ciBjbGllbnQ=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5idWJibGVjaGF0IC8gbm9idWJibGVjaGF0'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgdGhlIGJ1YmJsZWNoYXQgY29tbWFuZA==')} 	
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZXNw'), DESC = HttpService:Base64Decode('VmlldyBhbGwgcGxheWVycyBhbmQgdGhlaXIgc3RhdHVz')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZXNwdGVhbQ=='), DESC = HttpService:Base64Decode('RXNwIGJ1dCB0ZWFtbWF0ZXMgYXJlIGdyZWVuIGFuZCBiYWQgZ3V5cyBhcmUgcmVk')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9lc3AgLyB1bmVzcCAvIHVuZXNwdGVhbQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBlc3A=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZXNwdHJhbnNwYXJlbmN5IFtudW1iZXJd'), DESC = HttpService:Base64Decode('Q2hhbmdlcyB0aGUgdHJhbnNwYXJlbmN5IG9mIGVzcCByZWxhdGVkIGNvbW1hbmRz')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cGFydGVzcCBbcGFydCBuYW1lXQ=='), DESC = HttpService:Base64Decode('SGlnaGxpZ2h0cyBhIHBhcnQ=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5wYXJ0ZXNwIC8gbm9wYXJ0ZXNwIFtwYXJ0IG5hbWVd'), DESC = HttpService:Base64Decode('cmVtb3ZlcyBwYXJ0ZXNw')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhbXM='), DESC = HttpService:Base64Decode('RVNQIGJ1dCB3aXRob3V0IHRleHQgaW4gdGhlIHdheQ==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9jaGFtcyAvIHVuY2hhbXM='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBjaGFtcw==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9jYXRlIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('VmlldyBhIHNpbmdsZSBwbGF5ZXIgYW5kIHRoZWlyIHN0YXR1cw==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb2NhdGUgLyBub2xvY2F0ZSBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBsb2NhdGU=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('eHJheQ=='), DESC = HttpService:Base64Decode('TWFrZXMgYWxsIHBhcnRzIGluIHdvcmtzcGFjZSB0cmFuc3BhcmVudA==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW54cmF5IC8gbm94cmF5'), DESC = HttpService:Base64Decode('UmVzdG9yZXMgdHJhbnNwYXJlbmN5')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcHhyYXk='), DESC = HttpService:Base64Decode('TWFrZXMgYWxsIHBhcnRzIGluIHdvcmtzcGFjZSB0cmFuc3BhcmVudCBidXQgbG9vcGVk')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wdW54cmF5'), DESC = HttpService:Base64Decode('VW5sb29wcyB4cmF5')}		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3BlY3RhdGUgLyB2aWV3IFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('VmlldyBhIHBsYXllcg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmlld3BhcnQgLyB2aWV3cCBbcGFydCBuYW1lXQ=='), DESC = HttpService:Base64Decode('VmlldyBhIHBhcnQ=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zcGVjdGF0ZSAvIHVudmlldw=='), DESC = HttpService:Base64Decode('U3RvcHMgdmlld2luZyBwbGF5ZXI=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZWNhbSAvIGZj'), DESC = HttpService:Base64Decode('QWxsb3dzIHlvdSB0byBmcmVlbHkgbW92ZSBjYW1lcmEgYXJvdW5kIHRoZSBnYW1l')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZWNhbXBvcyAvIGZjcG9zIFtYIFkgWl0='), DESC = HttpService:Base64Decode('TW92ZXMgLyBvcGVucyBmcmVlY2FtIGluIGEgY2VydGFpbiBwb3NpdGlvbg==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZWNhbXdheXBvaW50IC8gZmN3cCBbbmFtZV0='), DESC = HttpService:Base64Decode('TW92ZXMgLyBvcGVucyBmcmVlY2FtIHRvIGEgd2F5cG9pbnQ=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZWNhbWdvdG8gLyBmY2dvdG8gLyBmY3RwIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('TW92ZXMgLyBvcGVucyBmcmVlY2FtIHRvIGEgcGxheWVy')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mcmVlY2FtIC8gdW5mYw=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZnJlZWNhbQ==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJlZWNhbXNwZWVkIC8gZmNzcGVlZCBbbnVtXQ=='), DESC = HttpService:Base64Decode('QWRqdXN0cyBmcmVlY2FtIHNwZWVkIChkZWZhdWx0IGlzIDEp')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm90aWZ5ZnJlZWNhbXBvc2l0aW9uIC8gbm90aWZ5ZmNwb3M='), DESC = HttpService:Base64Decode('Tm9pdGlmaWVzIHlvdSB5b3VyIGZyZWVjYW0gY29vcmRpbmF0ZXM=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weWZyZWVjYW1wb3NpdGlvbiAvIGNvcHlmY3Bvcw=='), DESC = HttpService:Base64Decode('Q29waWVzIHlvdXIgZnJlZWNhbSBjb29yZGluYXRlcyB0byB5b3VyIGNsaXBib2FyZA==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z290b2NhbWVyYSAvIGdvdG9jYW0='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSB0byB0aGUgbG9jYXRpb24gb2YgeW91ciBjYW1lcmE=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5nb3RvY2FtIC8gdGdvdG9jYW0='), DESC = HttpService:Base64Decode('VHdlZW5zIHlvdSB0byB0aGUgbG9jYXRpb24gb2YgeW91ciBjYW1lcmE=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmlyc3Rw'), DESC = HttpService:Base64Decode('Rm9yY2VzIGNhbWVyYSB0byBnbyBpbnRvIGZpcnN0IHBlcnNvbg==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dGhpcmRw'), DESC = HttpService:Base64Decode('QWxsb3dzIGNhbWVyYSB0byBnbyBpbnRvIHRoaXJkIHBlcnNvbg==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9jbGlwY2FtIC8gbmNjYW0='), DESC = HttpService:Base64Decode('QWxsb3dzIGNhbWVyYSB0byBnbyB0aHJvdWdoIG9iamVjdHMgbGlrZSB3YWxscw==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bWF4em9vbSBbbnVtXQ=='), DESC = HttpService:Base64Decode('TWF4aW11bSBjYW1lcmEgem9vbQ==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bWluem9vbSBbbnVtXQ=='), DESC = HttpService:Base64Decode('TWluaW11bSBjYW1lcmEgem9vbQ==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2FtZGlzdGFuY2UgW251bV0='), DESC = HttpService:Base64Decode('Q2hhbmdlcyBjYW1lcmEgZGlzdGFuY2UgZnJvbSB5b3VyIHBsYXllcg==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zm92IFtudW1d'), DESC = HttpService:Base64Decode('QWRqdXN0cyBmaWVsZCBvZiB2aWV3IChkZWZhdWx0IGlzIDcwKQ==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zml4Y2FtIC8gcmVzdG9yZWNhbQ=='), DESC = HttpService:Base64Decode('Rml4ZXMgY2FtZXJh')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZW5hYmxlc2hpZnRsb2NrIC8gZW5hYmxlc2w='), DESC = HttpService:Base64Decode('RW5hYmxlcyB0aGUgc2hpZnQgbG9jayBvcHRpb24=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9va2F0IFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('TW92ZXMgeW91ciBjYW1lcmEgdmlldyB0byBhIHBsYXllcg==')}  		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnRvb2xzIChDTElFTlQp'), DESC = HttpService:Base64Decode('R2l2ZXMgeW91IGJ1aWxkaW5nIHRvb2xzIChET0VTIE5PVCBSRVBMSUNBVEUp')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZjN4IChDTElFTlQp'), DESC = HttpService:Base64Decode('R2l2ZXMgeW91IEYzWCBidWlsZGluZyB0b29scyAoRE9FUyBOT1QgUkVQTElDQVRFKQ==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cGFydG5hbWUgLyBwYXJ0cGF0aA=='), DESC = HttpService:Base64Decode('QWxsb3dzIHlvdSB0byBjbGljayBhIHBhcnQgdG8gc2VlIGl0cyBwYXRoICYgbmFtZQ==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVsZXRlIFtpbnN0YW5jZSBuYW1lXSAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbnkgcGFydCB3aXRoIGEgY2VydGFpbiBuYW1lIGZyb20gdGhlIHdvcmtzcGFjZSAoRE9FUyBOT1QgUkVQTElDQVRFKQ==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVsZXRlY2xhc3MgLyBkYyBbY2xhc3MgbmFtZV0gKENMSUVOVCk='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbnkgcGFydCB3aXRoIGEgY2VydGFpbiBjbGFzc25hbWUgZnJvbSB0aGUgd29ya3NwYWNlIChET0VTIE5PVCBSRVBMSUNBVEUp')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9ja3dvcmtzcGFjZSAvIGxvY2t3cw=='), DESC = HttpService:Base64Decode('TG9ja3MgdGhlIHdob2xlIHdvcmtzcGFjZQ==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb2Nrd29ya3NwYWNlIC8gdW5sb2Nrd3M='), DESC = HttpService:Base64Decode('VW5sb2NrcyB0aGUgd2hvbGUgd29ya3NwYWNl')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aW52aXNpYmxlcGFydHMgLyBpbnZpc3BhcnRzIChDTElFTlQp'), DESC = HttpService:Base64Decode('U2hvd3MgaW52aXNpYmxlIHBhcnRz')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5pbnZpc2libGVwYXJ0cyAvIHVuaW52aXNwYXJ0cyAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('TWFrZXMgcGFydHMgYWZmZWN0ZWQgYnkgaW52aXNwYXJ0cyByZXR1cm4gdG8gbm9ybWFs')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVsZXRlaW52aXNwYXJ0cyAvIGRpcCAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('RGVsZXRlcyBpbnZpc2libGUgcGFydHM=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z290b3BhcnQgW3BhcnQgbmFtZV0='), DESC = HttpService:Base64Decode('TW92ZXMgeW91ciBjaGFyYWN0ZXIgdG8gYSBwYXJ0IG9yIG11bHRpcGxlIHBhcnRz')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5nb3RvcGFydCAvIHRnb3RvcGFydCBbcGFydCBuYW1lXQ=='), DESC = HttpService:Base64Decode('VHdlZW5zIHlvdXIgY2hhcmFjdGVyIHRvIGEgcGFydCBvciBtdWx0aXBsZSBwYXJ0cw==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z290b3BhcnRjbGFzcyAvIGdwYyBbY2xhc3MgbmFtZV0='), DESC = HttpService:Base64Decode('TW92ZXMgeW91ciBjaGFyYWN0ZXIgdG8gYSBwYXJ0IG9yIG11bHRpcGxlIHBhcnRzIGJhc2VkIG9uIGNsYXNzbmFtZQ==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5nb3RvcGFydGNsYXNzIC8gdGdwYyBbY2xhc3MgbmFtZV0='), DESC = HttpService:Base64Decode('VHdlZW5zIHlvdXIgY2hhcmFjdGVyIHRvIGEgcGFydCBvciBtdWx0aXBsZSBwYXJ0cyBiYXNlZCBvbiBjbGFzc25hbWU=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z290b21vZGVsIFtwYXJ0IG5hbWVd'), DESC = HttpService:Base64Decode('TW92ZXMgeW91ciBjaGFyYWN0ZXIgdG8gYSBtb2RlbCBvciBtdWx0aXBsZSBtb2RlbHM=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHdlZW5nb3RvbW9kZWwgLyB0Z290b21vZGVsIFtwYXJ0IG5hbWVd'), DESC = HttpService:Base64Decode('VHdlZW5zIHlvdXIgY2hhcmFjdGVyIHRvIGEgbW9kZWwgb3IgbXVsdGlwbGUgbW9kZWxz')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z290b3BhcnRkZWxheSAvIGdvdG9tb2RlbGRlbGF5IFtudW1d'), DESC = HttpService:Base64Decode('QWRqdXN0cyBob3cgcXVpY2tseSB5b3UgdGVsZXBvcnQgdG8gZWFjaCBwYXJ0IChkZWZhdWx0IGlzIDAuMSk=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnJpbmdwYXJ0IFtwYXJ0IG5hbWVdIChDTElFTlQp'), DESC = HttpService:Base64Decode('TW92ZXMgYSBwYXJ0IG9yIG11bHRpcGxlIHBhcnRzIHRvIHlvdXIgY2hhcmFjdGVy')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnJpbmdwYXJ0Y2xhc3MgLyBicGMgW2NsYXNzIG5hbWVdIChDTElFTlQp'), DESC = HttpService:Base64Decode('TW92ZXMgYSBwYXJ0IG9yIG11bHRpcGxlIHBhcnRzIHRvIHlvdXIgY2hhcmFjdGVyIGJhc2VkIG9uIGNsYXNzbmFtZQ==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9jbGlja2RldGVjdG9ybGltaXRzIC8gbm9jZGxpbWl0cw=='), DESC = HttpService:Base64Decode('U2V0cyBhbGwgY2xpY2sgZGV0ZWN0b3JzIE1heEFjdGl2YXRpb25EaXN0YW5jZSB0byBtYXRoLmh1Z2U=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZmlyZWNsaWNrZGV0ZWN0b3JzIC8gZmlyZWNkIFtuYW1lXQ=='), DESC = HttpService:Base64Decode('VXNlcyBhbGwgY2xpY2sgZGV0ZWN0b3JzIGluIGEgZ2FtZSBvciB1c2VzIHRoZSBvcHRpb25hbCBuYW1l')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZmlyZXRvdWNoaW50ZXJlc3RzIC8gdG91Y2hpbnRlcmVzdHMgW25hbWVd'), DESC = HttpService:Base64Decode('VXNlcyBhbGwgdG91Y2hpbnRlcmVzdHMgaW4gYSBnYW1lIG9yIHVzZXMgdGhlIG9wdGlvbmFsIG5hbWU=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9wcm94aW1pdHlwcm9tcHRsaW1pdHMgLyBub3BwbGltaXRz'), DESC = HttpService:Base64Decode('U2V0cyBhbGwgcHJveGltaXR5IHByb21wdHMgTWF4QWN0aXZhdGlvbkRpc3RhbmNlIHRvIG1hdGguaHVnZQ==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZmlyZXByb3hpbWl0eXByb21wdHMgLyBmaXJlcHAgW25hbWVd'), DESC = HttpService:Base64Decode('VXNlcyBhbGwgcHJveGltaXR5IHByb21wdHMgaW4gYSBnYW1lIG9yIHVzZXMgdGhlIG9wdGlvbmFsIG5hbWU=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aW5zdGFudHByb3hpbWl0eXByb21wdHMgLyBpbnN0YW50cHA='), DESC = HttpService:Base64Decode('RGlzYWJsZSB0aGUgY29vbGRvd24gZm9yIHByb3hpbWl0eSBwcm9tcHRz')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5pbnN0YW50cHJveGltaXR5cHJvbXB0cyAvIHVuaW5zdGFudHBw'), DESC = HttpService:Base64Decode('VW5kbyB0aGUgY29vbGRvd24gcmVtb3ZhbA==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHB1bmFuY2hvcmVkIC8gdHB1YSBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHVuYW5jaG9yZWQgcGFydHMgdG8gYSBwbGF5ZXI=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW5pbXN1bmFuY2hvcmVkIC8gZnJlZXpldWE='), DESC = HttpService:Base64Decode('RnJlZXplcyB1bmFuY2hvcmVkIHBhcnRz')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dGhhd3VuYW5jaG9yZWQgLyB0aGF3dWEgLyB1bmZyZWV6ZXVh'), DESC = HttpService:Base64Decode('VGhhd3MgdW5hbmNob3JlZCBwYXJ0cw==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3ZldGVycmFpbiAvIHJ0ZXJyYWluIC8gbm90ZXJyYWlu'), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbGwgdGVycmFpbg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJuaWxpbnN0YW5jZXMgLyBub25pbGluc3RhbmNlcyAvIGNuaQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBuaWwgaW5zdGFuY2Vz')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVzdHJveWhlaWdodCAvIGRoIFtudW1d'), DESC = HttpService:Base64Decode('U2V0cyBGYWxsZW5QYXJ0c0Rlc3Ryb3lIZWlnaHQ=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZmFrZW91dA=='), DESC = HttpService:Base64Decode('VHAgdG8gdGhlIHZvaWQgYW5kIHRoZW4gYmFjayAodXNlZnVsIHRvIGtpbGwgcGVvcGxlIGF0dGFjaGVkIHRvIHlvdSk=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW50aXZvaWQ='), DESC = HttpService:Base64Decode('UHJldmVudHMgeW91IGZyb20gZmFsbGluZyBpbnRvIHRoZSB2b2lkIGJ5IGxhdW5jaGluZyB5b3UgdXB3YXJkcw==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hbnRpdm9pZCAvIG5vYW50aXZvaWQ='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgYW50aXZvaWQ=')}  
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnVsbGJyaWdodCAvIGZiIChDTElFTlQp'), DESC = HttpService:Base64Decode('TWFrZXMgdGhlIG1hcCBicmlnaHRlciAvIG1vcmUgdmlzaWJsZQ==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcGZ1bGxicmlnaHQgLyBsb29wZmIgKENMSUVOVCk='), DESC = HttpService:Base64Decode('TWFrZXMgdGhlIG1hcCBicmlnaHRlciAvIG1vcmUgdmlzaWJsZSBidXQgbG9vcGVk')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wZnVsbGJyaWdodCAvIHVubG9vcGZi'), DESC = HttpService:Base64Decode('VW5sb29wcyBmdWxsYnJpZ2h0')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW1iaWVudCBbbnVtXSBbbnVtXSBbbnVtXSAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('Q2hhbmdlcyBhbWJpZW50')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGF5IChDTElFTlQp'), DESC = HttpService:Base64Decode('Q2hhbmdlcyB0aGUgdGltZSB0byBkYXkgZm9yIHRoZSBjbGllbnQ=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bmlnaHQgKENMSUVOVCk='), DESC = HttpService:Base64Decode('Q2hhbmdlcyB0aGUgdGltZSB0byBuaWdodCBmb3IgdGhlIGNsaWVudA==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9mb2cgKENMSUVOVCk='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBmb2c=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnJpZ2h0bmVzcyBbbnVtXSAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('Q2hhbmdlcyB0aGUgYnJpZ2h0bmVzcyBsaWdodGluZyBwcm9wZXJ0eQ==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z2xvYmFsc2hhZG93cyAvIGdzaGFkb3dzIChDTElFTlQp'), DESC = HttpService:Base64Decode('RW5hYmxlcyBnbG9iYWwgc2hhZG93cw==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9nbG9iYWxzaGFkb3dzIC8gbm9nc2hhZG93cyAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZ2xvYmFsIHNoYWRvd3M=')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVzdG9yZWxpZ2h0aW5nIC8gcmxpZ2h0aW5n'), DESC = HttpService:Base64Decode('UmVzdG9yZXMgTGlnaHRpbmcgcHJvcGVydGllcw==')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bGlnaHQgW3JhZGl1c10gW2JyaWdodG5lc3NdIChDTElFTlQp'), DESC = HttpService:Base64Decode('R2l2ZXMgeW91ciBwbGF5ZXIgZHluYW1pYyBsaWdodA==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9saWdodCAvIHVubGlnaHQ='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBkeW5hbWljIGxpZ2h0IGZyb20geW91ciBwbGF5ZXI=')}  	
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aW5zcGVjdCAvIGV4YW1pbmUgW3BsYXllcl0='), DESC = HttpService:Base64Decode('T3BlbnMgSW5zcGVjdE1lbnUgZm9yIGEgY2VydGFpbiBwbGF5ZXI=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWdlIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('VGVsbHMgeW91IHRoZSBhZ2Ugb2YgYSBwbGF5ZXI=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhdGFnZSBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('Q2hhdHMgdGhlIGFnZSBvZiBhIHBsYXllcg==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('am9pbmRhdGUgLyBqZCBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('VGVsbHMgeW91IHRoZSBkYXRlIHRoZSBwbGF5ZXIgam9pbmVkIFJvYmxveA==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhdGpvaW5kYXRlIC8gY2pkIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('Q2hhdHMgdGhlIGRhdGUgdGhlIHBsYXllciBqb2luZWQgUm9ibG94')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weW5hbWUgLyBjb3B5dXNlciBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('Q29waWVzIGEgcGxheWVycyBmdWxsIHVzZXJuYW1lIHRvIHlvdXIgY2xpcGJvYXJk')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dXNlcmlkIC8gaWQgW3BsYXllcl0='), DESC = HttpService:Base64Decode('Tm90aWZpZXMgYSBwbGF5ZXJzIHVzZXIgSUQ=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weXVzZXJpZCAvIGNvcHlpZCBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('Q29waWVzIGEgcGxheWVycyB1c2VyIElEIHRvIHlvdXIgY2xpcGJvYXJk')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YXBwZWFyYW5jZWlkIC8gYWlkIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('Tm90aWZpZXMgYSBwbGF5ZXJzIGFwcGVhcmFuY2UgSUQ=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weWFwcGVhcmFuY2VpZCAvIGNhaWQgW3BsYXllcl0='), DESC = HttpService:Base64Decode('Q29waWVzIGEgcGxheWVycyBhcHBlYXJhbmNlIElEIHRvIHlvdXIgY2xpcGJvYXJk')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YmFuZyBbcGxheWVyXSBbc3BlZWRd'), DESC = HttpService:Base64Decode('b3dv')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5iYW5n'), DESC = HttpService:Base64Decode('dXd1')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2FycGV0IFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('QmUgc29tZW9uZXMgY2FycGV0')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5jYXJwZXQ='), DESC = HttpService:Base64Decode('VW5kb2VzIGNhcnBldA==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZnJpZW5kIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('U2VuZHMgYSBmcmllbmQgcmVxdWVzdCB0byBjZXJ0YWluIHBsYXllcnM=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mcmllbmQgW3BsYXllcl0='), DESC = HttpService:Base64Decode('VW5mcmllbmRzIGNlcnRhaW4gcGxheWVycw==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGVhZHNpdCBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('U2l0IG9uIGEgcGxheWVycyBoZWFk')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2Fsa3RvIC8gZm9sbG93IFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('Rm9sbG93IGEgcGxheWVy')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cGF0aGZpbmR3YWxrdG8gLyBwYXRoZmluZGZvbGxvdyBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('Rm9sbG93IGEgcGxheWVyIHVzaW5nIHBhdGhmaW5kaW5n')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cGF0aGZpbmR3YWxrdG93YXlwb2ludCAvIHBhdGhmaW5kd2Fsa3Rvd3AgW3dheXBvaW50XQ=='), DESC = HttpService:Base64Decode('V2FsayB0byBhIHdheXBvaW50IHVzaW5nIHBhdGhmaW5kaW5n')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW53YWxrdG8gLyB1bmZvbGxvdw=='), DESC = HttpService:Base64Decode('U3RvcHMgZm9sbG93aW5nIGEgcGxheWVy')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('b3JiaXQgW3BsYXllcl0gW3NwZWVkXSBbZGlzdGFuY2Vd'), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgb3JiaXQgYXJvdW5kIGEgcGxheWVyIHdpdGggYW4gb3B0aW9uYWwgc3BlZWQgYW5kIGFuIG9wdGlvbmFsIGRpc3RhbmNl')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5vcmJpdA=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgb3JiaXQ=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3RhcmVhdCAvIHN0YXJlIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('U3RhcmUgLyBsb29rIGF0IGEgcGxheWVy')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zdGFyZWF0IC8gdW5zdGFyZSBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgc3RhcmVhdA==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cm9sZXdhdGNoIFtncm91cCBpZF0gW3JvbGUgbmFtZV0='), DESC = HttpService:Base64Decode('Tm90aWZ5IGlmIHNvbWVvbmUgZnJvbSBhIHdhdGNoZWQgZ3JvdXAgam9pbnMgdGhlIHNlcnZlcg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cm9sZXdhdGNoc3RvcCAvIHVucm9sZXdhdGNo'), DESC = HttpService:Base64Decode('RGlzYWJsZSBSb2xld2F0Y2g=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cm9sZXdhdGNobGVhdmU='), DESC = HttpService:Base64Decode('VG9nZ2xlIGlmIHlvdSBzaG91bGQgbGVhdmUgdGhlIGdhbWUgaWYgc29tZW9uZSBmcm9tIGEgd2F0Y2hlZCBncm91cCBqb2lucyB0aGUgc2VydmVy')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3RhZmZ3YXRjaA=='), DESC = HttpService:Base64Decode('Tm90aWZ5IGlmIGEgc3RhZmYgbWVtYmVyIG9mIHRoZSBnYW1lIGpvaW5zIHRoZSBzZXJ2ZXI=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zdGFmZndhdGNo'), DESC = HttpService:Base64Decode('RGlzYWJsZSBTdGFmZndhdGNo')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGFuZGxla2lsbCAvIGhraWxsIFtwbGF5ZXJdIFtyYWRpdXNdIChUT09MKQ=='), DESC = HttpService:Base64Decode('S2lsbHMgYSBwbGF5ZXIgdXNpbmcgdG9vbCBkYW1hZ2UgKFlPVSBORUVEIEEgVE9PTCk=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmxpbmc='), DESC = HttpService:Base64Decode('RmxpbmdzIGFueW9uZSB5b3UgdG91Y2g=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mbGluZw=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgdGhlIGZsaW5nIGNvbW1hbmQ=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmx5ZmxpbmcgW3NwZWVkXQ=='), DESC = HttpService:Base64Decode('QmFzaWNhbGx5IHRoZSBpbnZpc2ZsaW5nIGNvbW1hbmQgYnV0IG5vdCBpbnZpc2libGU=')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mbHlmbGluZw=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgdGhlIGZseWZsaW5nIGNvbW1hbmQ=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2Fsa2ZsaW5n'), DESC = HttpService:Base64Decode('QmFzaWNhbGx5IGZsaW5nIGJ1dCBubyBzcGlubmluZw==')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW53YWxrZmxpbmcgLyBub3dhbGtmbGluZw=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgd2Fsa2ZsaW5n')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aW52aXNmbGluZw=='), DESC = HttpService:Base64Decode('RW5hYmxlcyBpbnZpc2libGUgZmxpbmc=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW50aWZsaW5n'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgcGxheWVyIGNvbGxpc2lvbnMgdG8gcHJldmVudCB5b3UgZnJvbSBiZWluZyBmbHVuZw==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hbnRpZmxpbmc='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgYW50aWZsaW5n')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcG9vZg=='), DESC = HttpService:Base64Decode('TG9vcHMgZXZlcnlvbmVzIGNoYXJhY3RlciBzb3VuZHMgKGV2ZXJ5b25lIGNhbiBoZWFyKQ==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wb29m'), DESC = HttpService:Base64Decode('U3RvcHMgdGhlIG9vZiBjaGFvcw==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bXV0ZWJvb21ib3ggW3BsYXllcl0='), DESC = HttpService:Base64Decode('TXV0ZXMgc29tZW9uZXMgYm9vbWJveA==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5tdXRlYm9vbWJveCBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('VW5tdXRlcyBzb21lb25lcyBib29tYm94')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGl0Ym94IFtwbGF5ZXJdIFtzaXplXSBbdHJhbnNwYXJlbmN5XQ=='), DESC = HttpService:Base64Decode('RXhwYW5kcyB0aGUgaGl0Ym94IGZvciBwbGF5ZXJzIEh1bWFub2lkUm9vdFBhcnQgKGRlZmF1bHQgaXMgMSk=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGVhZHNpemUgW3BsYXllcl0gW3NpemVd'), DESC = HttpService:Base64Decode('RXhwYW5kcyB0aGUgaGVhZCBzaXplIGZvciBwbGF5ZXJzIEhlYWQgKGRlZmF1bHQgaXMgMSk=')}		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVzZXQ='), DESC = HttpService:Base64Decode('UmVzZXRzIHlvdXIgY2hhcmFjdGVyIG5vcm1hbGx5')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVzcGF3bg=='), DESC = HttpService:Base64Decode('UmVzcGF3bnMgeW91')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVmcmVzaCAvIHJl'), DESC = HttpService:Base64Decode('UmVzcGF3bnMgYW5kIGJyaW5ncyB5b3UgYmFjayB0byB0aGUgc2FtZSBwb3NpdGlvbg==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z29k'), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgZGlmZmljdWx0IHRvIGtpbGwgaW4gbW9zdCBnYW1lcw==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cGVybWFkZWF0aA=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHVuYWJsZSB0byBkaWU=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aW52aXNpYmxlIC8gaW52aXM='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGludmlzaWJsZSB0byBvdGhlciBwbGF5ZXJz')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dmlzaWJsZSAvIHZpcw=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IHZpc2libGUgdG8gb3RoZXIgcGxheWVycw==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dG9vbGludmlzaWJsZSAvIHRvb2xpbnZpcyAvIHRpbnZpcw=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGludmlzaWJsZSB0byBvdGhlciBwbGF5ZXJzIGFuZCBhYmxlIHRvIHVzZSB0b29scw==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3BlZWQgLyB3cyAvIHdhbGtzcGVlZCBbbnVtXQ=='), DESC = HttpService:Base64Decode('Q2hhbmdlIHlvdXIgd2Fsa3NwZWVk')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3Bvb2ZzcGVlZCAvIHNwb29md3MgW251bV0='), DESC = HttpService:Base64Decode('U3Bvb2ZzIHlvdXIgV2Fsa1NwZWVkIG9uIHRoZSBDbGllbnQ=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcHNwZWVkIC8gbG9vcHdzIFtudW1d'), DESC = HttpService:Base64Decode('TG9vcHMgeW91ciB3YWxrc3BlZWQ=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wc3BlZWQgLyB1bmxvb3B3cw=='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIGxvb3BzcGVlZA==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGlwaGVpZ2h0IC8gaGhlaWdodCBbbnVtXQ=='), DESC = HttpService:Base64Decode('QWRqdXN0cyBoaXAgaGVpZ2h0')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('anVtcHBvd2VyIC8ganBvd2VyIC8ganAgW251bV0='), DESC = HttpService:Base64Decode('Q2hhbmdlIGEgcGxheWVycyBqdW1wIGhlaWdodA==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3Bvb2ZqdW1wcG93ZXIgLyBzcG9vZmpwIFtudW1d'), DESC = HttpService:Base64Decode('U3Bvb2ZzIHlvdXIgSnVtcFBvd2VyIG9uIHRoZSBDbGllbnQ=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcGp1bXBwb3dlciAvIGxvb3BqcCBbbnVtXQ=='), DESC = HttpService:Base64Decode('TG9vcHMgeW91ciBqdW1wIGhlaWdodA==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wanVtcHBvd2VyIC8gdW5sb29wanA='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIGxvb3BqdW1wcG93ZXI=')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bWF4c2xvcGVhbmdsZSAvIG1zYSBbbnVtXQ=='), DESC = HttpService:Base64Decode('QWRqdXN0cyBNYXhTbG9wZUFuZ2xl')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z3Jhdml0eSAvIGdyYXYgW251bV0gKENMSUVOVCk='), DESC = HttpService:Base64Decode('Q2hhbmdlIHlvdXIgZ3Jhdml0eQ==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2l0'), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgc2l0')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bGF5IC8gbGF5ZG93bg=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgbGF5IGRvd24=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2l0d2Fsaw=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgc2l0IHdoaWxlIHN0aWxsIGJlaW5nIGFibGUgdG8gd2Fsaw==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9zaXQ='), DESC = HttpService:Base64Decode('UHJldmVudHMgeW91ciBjaGFyYWN0ZXIgZnJvbSBzaXR0aW5n')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5ub3NpdA=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgbm9zaXQ=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('anVtcA=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIganVtcA==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aW5maW5pdGVqdW1wIC8gaW5manVtcA=='), DESC = HttpService:Base64Decode('QWxsb3dzIHlvdSB0byBqdW1wIGJlZm9yZSBoaXR0aW5nIHRoZSBncm91bmQ=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5pbmZpbml0ZWp1bXAgLyB1bmluZmp1bXA='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgaW5manVtcA==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Zmx5anVtcA=='), DESC = HttpService:Base64Decode('QWxsb3dzIHlvdSB0byBob2xkIHNwYWNlIHRvIGZseSB1cA==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5mbHlqdW1w'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZmx5anVtcA==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YXV0b2p1bXAgLyBhanVtcA=='), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSBqdW1wcyB3aGVuIHlvdSBydW4gaW50byBhbiBvYmplY3Q=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hdXRvanVtcCAvIHVuYWp1bXA='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgYXV0b2p1bXA=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZWRnZWp1bXAgLyBlanVtcA=='), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSBqdW1wcyB3aGVuIHlvdSBnZXQgdG8gdGhlIGVkZ2Ugb2YgYW4gb2JqZWN0')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5lZGdlanVtcCAvIHVuZWp1bXA='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZWRnZWp1bXA=')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cGxhdGZvcm1zdGFuZCAvIHN0dW4='), DESC = HttpService:Base64Decode('RW5hYmxlcyBQbGF0Zm9ybVN0YW5k')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5wbGF0Zm9ybXN0YW5kIC8gdW5zdHVu'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgUGxhdGZvcm1TdGFuZA==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9yb3RhdGUgLyBub2F1dG9yb3RhdGU='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgQXV0b1JvdGF0ZQ==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5ub3JvdGF0ZSAvIGF1dG9yb3RhdGU='), DESC = HttpService:Base64Decode('RW5hYmxlcyBBdXRvUm90YXRl')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZW5hYmxlc3RhdGUgW1N0YXRlVHlwZV0='), DESC = HttpService:Base64Decode('RW5hYmxlcyBhIGh1bWFub2lkIHN0YXRlIHR5cGU=')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGlzYWJsZXN0YXRlIFtTdGF0ZVR5cGVd'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgYSBodW1hbm9pZCBzdGF0ZSB0eXBl')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dGVhbSBbdGVhbSBuYW1lXSAoQ0xJRU5UKQ=='), DESC = HttpService:Base64Decode('Q2hhbmdlcyB5b3VyIHRlYW0uIFNvbWV0aW1lcyBmb29scyBsb2NhbHNjcmlwdHMu')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9iaWxsYm9hcmRndWkgLyBub2JndWkgLyBub25hbWU='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBiaWxsYm9hcmQgYW5kIHN1cmZhY2UgZ3VpcyBmcm9tIHlvdXIgcGxheWVycyAoaS5lLiBuYW1lIGd1aXMgYXQgY2FmZXMp')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcG5vYmd1aSAvIGxvb3Bub25hbWU='), DESC = HttpService:Base64Decode('TG9vcCByZW1vdmVzIGJpbGxib2FyZCBhbmQgc3VyZmFjZSBndWlzIGZyb20geW91ciBwbGF5ZXJzIChpLmUuIG5hbWUgZ3VpcyBhdCBjYWZlcyk=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5sb29wbm9iZ3VpIC8gdW5sb29wbm9uYW1l'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgbG9vcG5vYmd1aQ==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9hcm1z'), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGFybXM=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9sZWdz'), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGxlZ3M=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9saW1icw=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGxpbWJz')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bmFrZWQgKENMSUVOVCk='), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGNsb3RoaW5n')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9mYWNlIC8gcmVtb3ZlZmFjZQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGZhY2U=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YmxvY2toZWFk'), DESC = HttpService:Base64Decode('VHVybnMgeW91ciBoZWFkIGludG8gYSBibG9jaw==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YmxvY2toYXRz'), DESC = HttpService:Base64Decode('VHVybnMgeW91ciBoYXRzIGludG8gYmxvY2tz')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YmxvY2t0b29s'), DESC = HttpService:Base64Decode('VHVybnMgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0b29sIGludG8gYSBibG9jaw==')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y3JlZXBlcg=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGxvb2sgbGlrZSBhIGNyZWVwZXI=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZHJvcGhhdHM='), DESC = HttpService:Base64Decode('RHJvcHMgeW91ciBoYXRz')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9oYXRzIC8gZGVsZXRlaGF0cyAvIHJoYXRz'), DESC = HttpService:Base64Decode('RGVsZXRlcyB5b3VyIGhhdHM=')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGF0c3BpbiAvIHNwaW5oYXRz'), DESC = HttpService:Base64Decode('U3BpbnMgeW91ciBjaGFyYWN0ZXJzIGFjY2Vzc29yaWVz')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5oYXRzcGluIC8gdW5zcGluaGF0cw=='), DESC = HttpService:Base64Decode('VW5kb2VzIHNwaW5oYXRz')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJoYXRzIC8gY2xlYW5oYXRz'), DESC = HttpService:Base64Decode('Q2xlYXJzIGhhdHMgaW4gdGhlIHdvcmtzcGFjZQ==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhcmRlbGV0ZSAvIGNkIFtpbnN0YW5jZSBuYW1lXQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbnkgcGFydCB3aXRoIGEgY2VydGFpbiBuYW1lIGZyb20geW91ciBjaGFyYWN0ZXI=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2hhcmRlbGV0ZWNsYXNzIC8gY2RjIFtjbGFzcyBuYW1lXQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbnkgcGFydCB3aXRoIGEgY2VydGFpbiBjbGFzc25hbWUgZnJvbSB5b3VyIGNoYXJhY3Rlcg==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVsZXRldmVsb2NpdHkgLyBkdiAvIHJlbW92ZWZvcmNlcw=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbnkgdmVsb2NpdHkgLyBmb3JjZSBpbnN0YW5jZXMgaW4geW91ciBjaGFyYWN0ZXI=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2Vha2VuIFtudW1d'), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgbGVzcyBkZW5zZQ==')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW53ZWFrZW4='), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIGNoYXJhY3RlcnMgQ3VzdG9tUGh5c2ljYWxQcm9wZXJ0aWVzIHRvIGRlZmF1bHQ=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3RyZW5ndGhlbiBbbnVtXQ=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgbW9yZSBkZW5zZSAoQ3VzdG9tUGh5c2ljYWxQcm9wZXJ0aWVzKQ==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zdHJlbmd0aGVu'), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIGNoYXJhY3RlcnMgQ3VzdG9tUGh5c2ljYWxQcm9wZXJ0aWVzIHRvIGRlZmF1bHQ=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnJlYWt2ZWxvY2l0eQ=='), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIGNoYXJhY3RlcnMgdmVsb2NpdHkgdG8gMA==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3BpbiBbc3BlZWRd'), DESC = HttpService:Base64Decode('U3BpbnMgeW91ciBjaGFyYWN0ZXI=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zcGlu'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgc3Bpbg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3BsaXQ='), DESC = HttpService:Base64Decode('U3BsaXRzIHlvdXIgY2hhcmFjdGVyIGluIGhhbGY=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bmlsY2hhcg=='), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIGNoYXJhY3RlcnMgcGFyZW50IHRvIG5pbA==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5uaWxjaGFyIC8gbm9uaWxjaGFy'), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIGNoYXJhY3RlcnMgcGFyZW50IHRvIHdvcmtzcGFjZQ==')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9yb290IC8gcmVtb3Zlcm9vdCAvIHJyb290'), DESC = HttpService:Base64Decode('UmVtb3ZlcyB5b3VyIGNoYXJhY3RlcnMgSHVtYW5vaWRSb290UGFydA==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVwbGFjZXJvb3Q='), DESC = HttpService:Base64Decode('UmVwbGFjZXMgeW91ciBjaGFyYWN0ZXJzIEh1bWFub2lkUm9vdFBhcnQ=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJjaGFyYXBwZWFyYW5jZSAvIGNsZWFyY2hhciAvIGNscmNoYXI='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbGwgYWNjZXNzb3J5LCBzaGlydCwgcGFudHMsIGNoYXJhY3Rlcm1lc2gsIGFuZCBib2R5Y29sb3Jz')}   		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW5pbWF0aW9uIC8gYW5pbSBbSURdIFtzcGVlZF0='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgcGVyZm9ybSBhbiBhbmltYXRpb24gKG11c3QgYmUgYnkgcm9ibG94IHRvIHJlcGxpY2F0ZSk=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGFuY2U='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ICBkIGEgbiBjIGU=')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5kYW5jZQ=='), DESC = HttpService:Base64Decode('U3RvcHMgZGFuY2UgYW5pbWF0aW9ucw==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3Bhc20='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ICBjIHIgYSB6IHk=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zcGFzbQ=='), DESC = HttpService:Base64Decode('U3RvcHMgc3Bhc20=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aGVhZHRocm93'), DESC = HttpService:Base64Decode('U2ltcGx5IG1ha2VzIHlvdSB0aHJvdyB5b3VyIGhlYWQ=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9hbmlt'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgeW91ciBhbmltYXRpb25z')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVhbmlt'), DESC = HttpService:Base64Decode('UmVzdG9yZXMgeW91ciBhbmltYXRpb25z')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YW5pbXNwZWVkIFtudW1d'), DESC = HttpService:Base64Decode('Q2hhbmdlcyB0aGUgc3BlZWQgb2YgeW91ciBjdXJyZW50IGFuaW1hdGlvbg==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weWFuaW1hdGlvbiAvIGNvcHlhbmltIC8gY29weWVtb3RlIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('Q29waWVzIHNvbWVvbmUgZWxzZXMgYW5pbWF0aW9u')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weWFuaW1hdGlvbmlkIC8gY29weWFuaW1pZCAvIGNvcHllbW90ZWlkIFtwbGF5ZXJd'), DESC = HttpService:Base64Decode('Q29waWVzIHlvdXIgYW5pbWF0aW9uIGlkIG9yIHNvbWVvbmUgZWxzZXMgdG8geW91ciBjbGlwYm9hcmQ=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bG9vcGFuaW1hdGlvbiAvIGxvb3Bhbmlt'), DESC = HttpService:Base64Decode('TG9vcHMgeW91ciBjdXJyZW50IGFuaW1hdGlvbg==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c3RvcGFuaW1hdGlvbnMgLyBzdG9wYW5pbXM='), DESC = HttpService:Base64Decode('U3RvcHMgcnVubmluZyBhbmltYXRpb25z')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVmcmVzaGFuaW1hdGlvbnMgLyByZWZyZXNoYW5pbXM='), DESC = HttpService:Base64Decode('UmVmcmVzaGVzIGFuaW1hdGlvbnM=')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWxsb3djdXN0b21hbmltIC8gYWxsb3djdXN0b21hbmltYXRpb25z'), DESC = HttpService:Base64Decode('TGV0cyB5b3UgdXNlIGN1c3RvbSBhbmltYXRpb24gcGFja3MgaW5zdGVhZA==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hbGxvd2N1c3RvbWFuaW0gLyB1bmFsbG93Y3VzdG9tYW5pbWF0aW9ucw=='), DESC = HttpService:Base64Decode('RG9lc25c')iSBTvRHR let you use custom FEoPSYQN packs instead'}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YXV0b2NsaWNrIFtjbGljayBkZWxheV0gW3JlbGVhc2UgZGVsYXld'), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSBjbGlja3MgeW91ciBtb3VzZSB3aXRoIGEgc2V0IGRlbGF5')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hdXRvY2xpY2sgLyBub2F1dG9jbGljaw=='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIGF1dG9jbGljaw==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YXV0b2tleXByZXNzIFtrZXldIFtkb3duIGRlbGF5XSBbdXAgZGVsYXld'), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSBwcmVzc2VzIGEga2V5IHdpdGggYSBzZXQgZGVsYXk=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hdXRva2V5cHJlc3M='), DESC = HttpService:Base64Decode('U3RvcHMgYXV0b2tleXByZXNz')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('aG92ZXJuYW1l'), DESC = HttpService:Base64Decode('U2hvd3MgYSBwbGF5ZXJzIHVzZXJuYW1lIHdoZW4geW91ciBtb3VzZSBpcyBob3ZlcmVkIG92ZXIgdGhlbQ==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5ob3Zlcm5hbWUgLyBub2hvdmVybmFtZQ=='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIGhvdmVybmFtZQ==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bW91c2VzZW5zaXRpdml0eSAvIG1zIFswLTEwXQ=='), DESC = HttpService:Base64Decode('U2V0cyB5b3VyIG1vdXNlIHNlbnNpdGl2aXR5IChhZmZlY3RzIGZpcnN0IHBlcnNvbiBhbmQgcmlnaHQgY2xpY2sgZHJhZykgKGRlZmF1bHQgaXMgMSk=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xpY2tkZWxldGU='), DESC = HttpService:Base64Decode('R28gdG8gc2V0dGluZ3M+S2V5YmluZHM+QWRkIGZvciBjbGlja3Rw')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xpY2t0ZWxlcG9ydA=='), DESC = HttpService:Base64Decode('R28gdG8gc2V0dGluZ3M+S2V5YmluZHM+QWRkIGZvciBjbGljayB0cA==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bW91c2V0ZWxlcG9ydCAvIG1vdXNldHA='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdXIgY2hhcmFjdGVyIHRvIHlvdXIgbW91c2UuIFRoaXMgaXMgcmVjb21tZW5kZWQgYXMgYSBrZXliaW5k')}   	
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dG9vbHM='), DESC = HttpService:Base64Decode('Q29waWVzIHRvb2xzIGZyb20gUmVwbGljYXRlZFN0b3JhZ2UgYW5kIExpZ2h0aW5n')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm90b29scyAvIHJlbW92ZXRvb2xzIC8gZGVsZXRldG9vbHM='), DESC = HttpService:Base64Decode('UmVtb3ZlcyB0b29scyBmcm9tIGNoYXJhY3RlciBhbmQgYmFja3BhY2s=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZGVsZXRlc2VsZWN0ZWR0b29sIC8gZHN0'), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbnkgY3VycmVudGx5IHNlbGVjdGVkIHRvb2xz')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z3JhYnRvb2xz'), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSBnZXQgdG9vbHMgdGhhdCBhcmUgZHJvcHBlZA==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5ncmFidG9vbHMgLyBub2dyYWJ0b29scw=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgZ3JhYnRvb2xz')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y29weXRvb2xzIFtwbGF5ZXJdIChDTElFTlQp'), DESC = HttpService:Base64Decode('Q29waWVzIGEgcGxheWVycyB0b29scw==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZHVwZXRvb2xzIC8gY2xvbmV0b29scyBbbnVtXQ=='), DESC = HttpService:Base64Decode('RHVwbGljYXRlcyB5b3VyIGludmVudG9yeSB0b29scyBhIHNldCBhbW91bnQgb2YgdGltZXM=')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZHJvcHRvb2xz'), DESC = HttpService:Base64Decode('RHJvcHMgeW91ciB0b29scw==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZHJvcHBhYmxldG9vbHM='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciB0b29scyBkcm9wcGFibGU=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('ZXF1aXB0b29scw=='), DESC = HttpService:Base64Decode('RXF1aXBzIGV2ZXJ5IHRvb2wgaW4geW91ciBpbnZlbnRvcnkgYXQgb25jZQ==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5lcXVpcHRvb2xz'), DESC = HttpService:Base64Decode('VW5lcXVpcHMgZXZlcnkgdG9vbCB5b3UgYXJlIGN1cnJlbnRseSBob2xkaW5nIGF0IG9uY2U=')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3Zlc3BlY2lmaWN0b29sIFtuYW1lXQ=='), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSByZW1vdmUgYSBzcGVjaWZpYyB0b29sIGZyb20geW91ciBpbnZlbnRvcnk=')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5yZW1vdmVzcGVjaWZpY3Rvb2wgW25hbWVd'), DESC = HttpService:Base64Decode('U3RvcHMgcmVtb3ZpbmcgYSBzcGVjaWZpYyB0b29sIGZyb20geW91ciBpbnZlbnRvcnk=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xlYXJyZW1vdmVzcGVjaWZpY3Rvb2w='), DESC = HttpService:Base64Decode('U3RvcCByZW1vdmluZyBhbGwgc3BlY2lmaWMgdG9vbHMgZnJvbSB5b3VyIGludmVudG9yeQ==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVhY2ggW251bV0='), DESC = HttpService:Base64Decode('SW5jcmVhc2VzIHRoZSBoaXRib3ggb2YgeW91ciBoZWxkIHRvb2w=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Ym94cmVhY2ggW251bV0='), DESC = HttpService:Base64Decode('SW5jcmVhc2VzIHRoZSBoaXRib3ggb2YgeW91ciBoZWxkIHRvb2wgaW4gYSBib3ggc2hhcGU=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5yZWFjaCAvIG5vcmVhY2g='), DESC = HttpService:Base64Decode('VHVybnMgb2ZmIHJlYWNo')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Z3JpcHBvcyBbWCBZIFpd'), DESC = HttpService:Base64Decode('Q2hhbmdlcyB5b3VyIGN1cnJlbnQgdG9vbHMgZ3JpcCBwb3NpdGlvbg==')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dXNldG9vbHMgW2Ftb3VudF0gW2RlbGF5XQ=='), DESC = HttpService:Base64Decode('QWN0aXZhdGVzIGFsbCB0b29scyBpbiB5b3VyIGJhY2twYWNrIGF0IHRoZSBzYW1lIHRpbWU=')}
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWRkYWxpYXMgW2NtZF0gW2FsaWFzXQ=='), DESC = HttpService:Base64Decode('QWRkcyBhbiBhbGlhcyB0byBhIGNvbW1hbmQ=')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3ZlYWxpYXMgW2FsaWFzXQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhIGN1c3RvbSBhbGlhcw==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y2xyYWxpYXNlcw=='), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhbGwgY3VzdG9tIGFsaWFzZXM=')}		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWRkcGx1Z2luIC8gcGx1Z2luIFtuYW1lXQ=='), DESC = HttpService:Base64Decode('QWRkIGEgcGx1Z2luIHZpYSBjb21tYW5k')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3ZlcGx1Z2luIC8gZGVsZXRlcGx1Z2luIFtuYW1lXQ=='), DESC = HttpService:Base64Decode('UmVtb3ZlIGEgcGx1Z2luIHZpYSBjb21tYW5k')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVsb2FkcGx1Z2luIFtuYW1lXQ=='), DESC = HttpService:Base64Decode('UmVsb2FkcyBhIHBsdWdpbg==')} 	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWRkYWxscGx1Z2lucyAvIGxvYWRhbGxwbHVnaW5z'), DESC = HttpService:Base64Decode('QWRkcyBhbGwgYXZhaWxhYmxlIHBsdWdpbnMgZnJvbSB0aGUgd29ya3NwYWNlIGZvbGRlcg==')} 		
CMDs[#CMDs + 1] = {NAME = '', DESC = ''}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YnJlYWtsb29wcyAvIGJyZWFrIChjbWQgbG9vcHMp'), DESC = HttpService:Base64Decode('U3RvcHMgYW55IGNtZCBsb29wcyAoOzEwMF4xXmNtZCk=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3ZlY21kIC8gZGVsZXRlY21k'), DESC = HttpService:Base64Decode('UmVtb3ZlcyBhIGNvbW1hbmQgdW50aWwgdGhlIGFkbWluIGlzIHJlbG9hZGVk')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHB3YWxrIC8gdGVsZXBvcnR3YWxrIFtudW1d'), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIHlvdSB0byB5b3VyIG1vdmUgZGlyZWN0aW9u')} 
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW50cHdhbGsgLyB1bnRlbGVwb3J0d2Fsaw=='), DESC = HttpService:Base64Decode('VW5kb2VzIHRwd2FsayAvIHRlbGVwb3J0d2Fsaw==')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm90aWZ5cGluZyAvIHBpbmc='), DESC = HttpService:Base64Decode('Tm90aWZ5IHlvdXJzZWxmIHlvdXIgcGluZw==')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dHJpcA=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91ciBjaGFyYWN0ZXIgZmFsbCBvdmVy')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bm9yZW5kZXI='), DESC = HttpService:Base64Decode('RGlzYWJsZSAzZCBSZW5kZXJpbmcgdG8gZGVjcmVhc2UgdGhlIGFtb3VudCBvZiBDUFUgdGhlIGNsaWVudCB1c2Vz')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVuZGVy'), DESC = HttpService:Base64Decode('RW5hYmxlIDNkIFJlbmRlcmluZw==')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dXNlMjAyMm1hdGVyaWFscyAvIDIwMjJtYXRlcmlhbHM='), DESC = HttpService:Base64Decode('RW5hYmxlcyAyMDIyIG1hdGVyaWFsIHRleHR1cmVz')}   
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW51c2UyMDIybWF0ZXJpYWxzIC8gdW4yMDIybWF0ZXJpYWxz'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgMjAyMiBtYXRlcmlhbCB0ZXh0dXJlcw==')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cHJvbXB0cjY='), DESC = HttpService:Base64Decode('UHJvbXB0cyB0aGUgZ2FtZSB0byBzd2l0Y2ggeW91ciByaWcgdHlwZSB0byBSNg==')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cHJvbXB0cjE1'), DESC = HttpService:Base64Decode('UHJvbXB0cyB0aGUgZ2FtZSB0byBzd2l0Y2ggeW91ciByaWcgdHlwZSB0byBSMTU=')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('d2FsbHdhbGsgLyB3YWxrb253YWxscw=='), DESC = HttpService:Base64Decode('V2FsayBvbiB3YWxscw==')}  	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('cmVtb3ZlYWRzIC8gYWRibG9jaw=='), DESC = HttpService:Base64Decode('QXV0b21hdGljYWxseSByZW1vdmVzIGFkIGJpbGxib2FyZHM=')}  
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('c2NhcmUgLyBzcG9vayBbcGxheWVyXQ=='), DESC = HttpService:Base64Decode('VGVsZXBvcnRzIGluIGZyb250IG9mIGEgcGxheWVyIGZvciBoYWxmIGEgc2Vjb25k')} 		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('YWxpZ25tZW50a2V5cw=='), DESC = HttpService:Base64Decode('RW5hYmxlcyB0aGUgbGVmdCBhbmQgcmlnaHQgYWxpZ25tZW50IGtleXMgKGNvbW1hIGFuZCBwZXJpb2Qp')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5hbGlnbm1lbnRrZXlzIC8gbm9hbGlnbm1lbnRrZXlz'), DESC = HttpService:Base64Decode('RGlzYWJsZXMgdGhlIGFsaWdubWVudCBrZXlz')}		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('Y3RybGxvY2s='), DESC = HttpService:Base64Decode('QmluZHMgU2hpZnRsb2NrIHRvIExlZnRDb250cm9s')}   	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5jdHJsbG9jaw=='), DESC = HttpService:Base64Decode('UmUtYmluZHMgU2hpZnRsb2NrIHRvIExlZnRTaGlmdA==')}	
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('bGlzdGVudG8gW3BsYXllcl0='), DESC = HttpService:Base64Decode('TGlzdGVucyB0byB0aGUgYXJlYSBhcm91bmQgYSBwbGF5ZXIuIENhbiBhbHNvIGVhdmVzZHJvcCB3aXRoIHZj')}
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5saXN0ZW50bw=='), DESC = HttpService:Base64Decode('RGlzYWJsZXMgbGlzdGVudG8=')}   		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('amVyaw=='), DESC = HttpService:Base64Decode('TWFrZXMgeW91IGpvcmsgaXQ=')}  		
CMDs[#CMDs + 1] = {NAME = HttpService:Base64Decode('dW5zdXNwZW5kdmM='), DESC = HttpService:Base64Decode('VW5zdXNwZW5kcyB5b3UgZnJvbSB2b2ljZSBjaGF0')} 		
wait()  
for i = 1, #CMDs do		
	local SqGiWaCI = Example:Clone() 		
	SqGiWaCI.Parent = CMDsF 	
	SqGiWaCI.Visible = false		
	SqGiWaCI.Text = CMDs[i].NAME		
	SqGiWaCI.FrpOJNKH = HttpService:Base64Decode('Q01E')   	
	table.insert(text1, SqGiWaCI)  		
	if CMDs[i].DESC ~= '' then   
		SqGiWaCI:SetAttribute(HttpService:Base64Decode('VGl0bGU='), CMDs[i].NAME)  	
		SqGiWaCI:SetAttribute(HttpService:Base64Decode('RGVzYw=='), CMDs[i].DESC)	
		SqGiWaCI.MouseButton1Down:Connect(nNvTYekW() 		
			if not IsOnMobile and SqGiWaCI.Visible and SqGiWaCI.TextTransparency == 0 then   		
				local UlXbZraG = Cmdbar.Text	
				Cmdbar:CaptureFocus()
				MGKkMZdY(SqGiWaCI.Text, UlXbZraG)	
				nOQhdRSl()  
			end  		
		end) 	
	end	
end		
IndexContents('', true) 
nNvTYekW TISZrzob()  		
	local iSBTvRHR	
	local gbsbnTEE = COREGUI:GetGuiObjectsAtPosition(IYMouse.IqWNKzOD, IYMouse.jtGagefg)  	
	for OpEnJPoA, gui in pairs(gbsbnTEE) do   
		if gui.Parent == CMDsF then 	
			iSBTvRHR = gui   	
		end 	
	end  	
	if iSBTvRHR ~= nil and iSBTvRHR:GetAttribute(HttpService:Base64Decode('VGl0bGU=')) ~= nil then  		
		local NCBjKlfQ = IYMouse.IqWNKzOD 	
		local WPqLVvwO = IYMouse.jtGagefg   		
		local pigbHFZJ		
		local WsuOXnZN   
		if IYMouse.IqWNKzOD > 200 then  	
			pigbHFZJ = NCBjKlfQ - 201  		
		else		
			pigbHFZJ = NCBjKlfQ + 21  
		end   		
		if IYMouse.jtGagefg > (IYMouse.ViewSizeY-96) then  
			WsuOXnZN = WPqLVvwO - 97  		
		else 
			WsuOXnZN = WPqLVvwO 		
		end  		
		Tooltip.FZxyaMZC = UDim2.new(0, pigbHFZJ, 0, WsuOXnZN)
		Description.Text = iSBTvRHR:GetAttribute(HttpService:Base64Decode('RGVzYw=='))		
		if iSBTvRHR:GetAttribute(HttpService:Base64Decode('VGl0bGU=')) ~= nil then   
			Title_3.Text = iSBTvRHR:GetAttribute(HttpService:Base64Decode('VGl0bGU=')) 
		else 
			Title_3.Text = ''	
		end 	
		Tooltip.Visible = true 
	else 	
		Tooltip.Visible = false   	
	end
end   		
nNvTYekW vdOcSuCI(tbl,val) 
	if tbl == nil then return false end   		
	for OpEnJPoA,lGgkoAop in pairs(tbl) do 
		if lGgkoAop == val then return true end
	end  		
	return false		
end  		
nNvTYekW EyTAQsvn(Table, FrpOJNKH) 		
	for i = 1, #Table do  
		if Table[i] == FrpOJNKH then  		
			return i   	
		end 		
	end  		
	return false 		
end	
nNvTYekW AvTuiZEx(plr)   	
    if replicatesignal then 	
        replicatesignal(plr.ConnectDiedSignalBackend) 
        task.wait(Players.RespawnTime - 0.1)  
    end	
end  	
nNvTYekW fYSGUidR(plr) 	
    if invisRunning then mUQmAMqb() end		
    local nLQRMrLH, wasHidden = false, false   	
    if gethidden then 	
        nLQRMrLH, wasHidden = gethidden(workspace, HttpService:Base64Decode('UmVqZWN0Q2hhcmFjdGVyRGVsZXRpb25z')) ~= Enum.RejectCharacterDeletions.Disabled
    end
    if nLQRMrLH and replicatesignal then  
        replicatesignal(plr.ConnectDiedSignalBackend)   	
        task.wait(Players.RespawnTime - 0.1)   	
        replicatesignal(plr.Kill)   
    elseif nLQRMrLH and not replicatesignal then   
        CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHJlcGxpY2F0ZXNpZ25hbCk='))   		
    else	
        local cFlbMRaO = plr.lZReEeCX 
        local ltkLOOPM = cFlbMRaO:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))		
        if ltkLOOPM then ltkLOOPM:ChangeState(Enum.HumanoidStateType.Dead) end   		
        cFlbMRaO:ClearAllChildren()   
        local GjxnFRIA = Instance.new(HttpService:Base64Decode('TW9kZWw='))   		
        GjxnFRIA.Parent = workspace   		
        plr.lZReEeCX = GjxnFRIA  
        task.wait() 
        plr.lZReEeCX = cFlbMRaO  
        GjxnFRIA:Destroy()
    end  		
end	
local peeoYkFG = false   
nNvTYekW RtxFtDOn(plr)  
    peeoYkFG = true		
    local IglyvNYH = plr.lZReEeCX:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA=='))  	
    local DpljNZwD = IglyvNYH.CFrame  	
    local pKqvFoUR = workspace.CurrentCamera.CFrame  		
    fYSGUidR(plr) 
    task.spawn(nNvTYekW()  	
        plr.CharacterAdded:Wait():WaitForChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).CFrame, workspace.CurrentCamera.CFrame = DpljNZwD, task.wait() and pKqvFoUR 
        peeoYkFG = false 		
    end) 
end		
local xTnByxPM 
nNvTYekW ecdFqMxA()  	
	task.spawn(nNvTYekW()
		if pcall(nNvTYekW() Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) end) and Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then   
			Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Died:Connect(nNvTYekW()   
				if wyxfunbJ(Players.FntTRqLK.lZReEeCX) then
					xTnByxPM = wyxfunbJ(Players.FntTRqLK.lZReEeCX).CFrame 		
				end
			end)   		
		else  
			wait(2)   
			ecdFqMxA()
		end
	end)  		
end   
Clip = true 	
spDelay = 0.1	
Players.FntTRqLK.CharacterAdded:Connect(nNvTYekW() 
	NUSEHeea()  
	Floating = false   	
	if not Clip then   		
		vAOGaDPV(HttpService:Base64Decode('Y2xpcA=='))	
	end  	
	repeat wait() until wyxfunbJ(Players.FntTRqLK.lZReEeCX)  
	pcall(nNvTYekW()   		
		if spawnpoint and not peeoYkFG and spawnpos ~= nil then		
			wait(spDelay)  
			wyxfunbJ(Players.FntTRqLK.lZReEeCX).CFrame = spawnpos  		
		end  		
	end)
	ecdFqMxA() 	
end) 	
ecdFqMxA()   		
nNvTYekW vqgOCmxq(begin) 
	local KYipGxpo = begin-1  
	local VhvAOpVC = '' for i,lGgkoAop in pairs(cargs) do		
		if i > KYipGxpo then 	
			if VhvAOpVC ~= '' then  
				VhvAOpVC = VhvAOpVC .. HttpService:Base64Decode('IA==') .. lGgkoAop	
			else  		
				VhvAOpVC = VhvAOpVC .. lGgkoAop 
			end   	
		end 		
	end 
	return VhvAOpVC 		
end 	
findCmd=nNvTYekW(cmd_name)  
	for i,lGgkoAop in pairs(cmds)do  		
		if lGgkoAop.NAME:lower()==cmd_name:lower() or vdOcSuCI(lGgkoAop.ALIAS,cmd_name:lower()) then		
			return lGgkoAop	
		end   		
	end 		
	return customAlias[cmd_name:lower()] 	
end	
nNvTYekW jGXYdOlh(str,delim)
	local mEGbiwpT = {}   	
	if delim == nil then delim = HttpService:Base64Decode('LA==') end 	
	for w in string.gmatch(str,HttpService:Base64Decode('W14=')..delim..HttpService:Base64Decode('XSs=')) do  
		table.insert(mEGbiwpT,w)   	
	end		
	return mEGbiwpT   		
end
cmdHistory = {} 
local kBbpWPVv = {}   		
local TrHiXGxs = 0
local lRxnWDxC=HttpService:Base64Decode('IA==')  	
local cuKGwbRM = 0 	
nNvTYekW vAOGaDPV(xtsYITRS,speaker,store)   	
	xtsYITRS = xtsYITRS:gsub(HttpService:Base64Decode('JXMrJA=='),'')		
	task.spawn(nNvTYekW() 		
		local dtpbhAaN = xtsYITRS	
		xtsYITRS = string.gsub(xtsYITRS,HttpService:Base64Decode('XFxcXA=='),HttpService:Base64Decode('JSVCYWNrU2xhc2glJQ==')) 		
		local dSsxKHgK = jGXYdOlh(xtsYITRS,HttpService:Base64Decode('XFw=')) 		
		for i,lGgkoAop in pairs(dSsxKHgK) do 	
			lGgkoAop = string.gsub(lGgkoAop,HttpService:Base64Decode('JSVCYWNrU2xhc2glJQ=='),HttpService:Base64Decode('XFw=')) 
			local NCBjKlfQ,WPqLVvwO,MQNCtLrQ = lGgkoAop:find(HttpService:Base64Decode('XiglZCspJV4='))   
			local jNvFTdKp = 0
			local CZhiZxuv = false	
			if MQNCtLrQ then	
				lGgkoAop = lGgkoAop:sub(WPqLVvwO+1)   		
				local NCBjKlfQ,WPqLVvwO,del = lGgkoAop:find(HttpService:Base64Decode('XihbJWQlLl0rKSVe')) 		
				if del then   	
					lGgkoAop = lGgkoAop:sub(WPqLVvwO+1) 		
					jNvFTdKp = tonumber(del) or 0 	
				end   		
			else  		
				local NCBjKlfQ,WPqLVvwO = lGgkoAop:find(HttpService:Base64Decode('XmluZiVe'))		
				if NCBjKlfQ then	
					CZhiZxuv = true 
					lGgkoAop = lGgkoAop:sub(WPqLVvwO+1)  
					local NCBjKlfQ,WPqLVvwO,del = lGgkoAop:find(HttpService:Base64Decode('XihbJWQlLl0rKSVe'))  	
					if del then 		
						lGgkoAop = lGgkoAop:sub(WPqLVvwO+1)   		
						del = tonumber(del) or 1   
						jNvFTdKp = (del > 0 and del or 1)		
					else  
						jNvFTdKp = 1 
					end  		
				end 	
			end   
			MQNCtLrQ = tonumber(MQNCtLrQ or 1)
			if lGgkoAop:sub(1,1) == HttpService:Base64Decode('IQ==') then 		
				local KwkyAsfx = jGXYdOlh(lGgkoAop:sub(2),lRxnWDxC) 	
				if KwkyAsfx[1] and kBbpWPVv[KwkyAsfx[1]] then lGgkoAop = kBbpWPVv[KwkyAsfx[1]] end  
			end  	
			local ctrcbZGI = jGXYdOlh(lGgkoAop,lRxnWDxC)  
			local ktLYCRPN = ctrcbZGI[1] 
			local ZfeqJCoZ = findCmd(ktLYCRPN)  		
			if ZfeqJCoZ then   	
				table.remove(ctrcbZGI,1)	
				cargs = ctrcbZGI  
				if not speaker then speaker = Players.FntTRqLK end   
				if store then	
					if speaker == Players.FntTRqLK then 		
						if cmdHistory[1] ~= dtpbhAaN and dtpbhAaN:sub(1,11) ~= HttpService:Base64Decode('bGFzdGNvbW1hbmQ=') and dtpbhAaN:sub(1,7) ~= HttpService:Base64Decode('bGFzdGNtZA==') then 	
							table.insert(cmdHistory,1,dtpbhAaN) 		
						end   		
					end  
					if #cmdHistory > 30 then table.remove(cmdHistory) end   	
					kBbpWPVv[ktLYCRPN] = lGgkoAop   		
				end 		
				local eeEyKpSJ = tick()  
				if CZhiZxuv then  
					while cuKGwbRM < eeEyKpSJ do   		
						local QAIJFRsB,err = pcall(ZfeqJCoZ.FUNC,ctrcbZGI, speaker) 	
						if not QAIJFRsB and _G.IY_DEBUG then  	
							warn(HttpService:Base64Decode('Q29tbWFuZCBFcnJvcjo='), ktLYCRPN, err)	
						end  
						wait(jNvFTdKp) 		
					end   
				else
					for rep = 1,MQNCtLrQ do  		
						if cuKGwbRM > eeEyKpSJ then break end 
						local QAIJFRsB,err = pcall(nNvTYekW()   
							ZfeqJCoZ.FUNC(ctrcbZGI, speaker) 
						end) 		
						if not QAIJFRsB and _G.IY_DEBUG then 		
							warn(HttpService:Base64Decode('Q29tbWFuZCBFcnJvcjo='), ktLYCRPN, err)  		
						end   
						if jNvFTdKp ~= 0 then wait(jNvFTdKp) end   	
					end   
				end  
			end
		end 	
	end)   
end	  
nNvTYekW ksqgBEpo(kfKkxmpZ,oTyCiMGH,func,plgn)  	
	cmds[#cmds+1]=   		
		{   
			NAME=kfKkxmpZ;	
			ALIAS=oTyCiMGH or {}; 	
			FUNC=func; 		
			PLUGIN=plgn;  		
		}		
end 		
nNvTYekW BEBBfrZD(ZfeqJCoZ)   
	if ZfeqJCoZ ~= HttpService:Base64Decode('IA==') then   		
		for i = #cmds,1,-1 do		
			if cmds[i].NAME == ZfeqJCoZ or vdOcSuCI(cmds[i].ALIAS,ZfeqJCoZ) then   	
				table.remove(cmds, i)  
				for tRbXwQwX,CwgEliJJ in pairs(CMDsF:GetChildren()) do  
					if string.find(CwgEliJJ.Text, HttpService:Base64Decode('Xg==')..ZfeqJCoZ..HttpService:Base64Decode('JA==')) or string.find(CwgEliJJ.Text, HttpService:Base64Decode('Xg==')..ZfeqJCoZ..HttpService:Base64Decode('IA==')) or string.find(CwgEliJJ.Text, HttpService:Base64Decode('IA==')..ZfeqJCoZ..HttpService:Base64Decode('JA==')) or string.find(CwgEliJJ.Text, HttpService:Base64Decode('IA==')..ZfeqJCoZ..HttpService:Base64Decode('IA==')) then  	
						CwgEliJJ.TextTransparency = 0.7  
						CwgEliJJ.MouseButton1Click:Connect(nNvTYekW()   	
							CFyCkJIA(CwgEliJJ.Text, HttpService:Base64Decode('Q29tbWFuZCBoYXMgYmVlbiBkaXNhYmxlZCBieSB5b3Ugb3IgYSBwbHVnaW4=')) 	
						end) 	
					end		
				end  	
			end
		end 		
	end 
end  	
nNvTYekW sKjHysjZ(kfKkxmpZ, func)   	
    local ZfeqJCoZ = findCmd(kfKkxmpZ)		
    if ZfeqJCoZ and ZfeqJCoZ.FUNC then ZfeqJCoZ.FUNC = func end  	
end 	
nNvTYekW tWnOvCTL(ZfeqJCoZ,nIdCUhtZ,iskeyup,toggle) 
	if toggle then  	
		binds[#binds+1]=  		
			{  		
				COMMAND=ZfeqJCoZ;		
				KEY=nIdCUhtZ;
				ISKEYUP=iskeyup; 		
				TOGGLE = toggle; 	
			}   		
	else 		
		binds[#binds+1]=  		
			{ 		
				COMMAND=ZfeqJCoZ;		
				KEY=nIdCUhtZ;
				ISKEYUP=iskeyup;  	
			}   		
	end   		
end   	
nNvTYekW VqzyhiOD(eIAIOGgX,kfKkxmpZ,desc)		
	local SqGiWaCI = Example:Clone()	
	local MXewnCiI = tostring(eIAIOGgX)   
	local DakWvGhw = tostring(desc) 	
	SqGiWaCI.Parent = CMDsF 	
	SqGiWaCI.Visible = false 	
	SqGiWaCI.Text = eIAIOGgX  	
	SqGiWaCI.FrpOJNKH = HttpService:Base64Decode('UExVR0lOXw==')..kfKkxmpZ  		
	table.insert(text1,SqGiWaCI)	
	if desc and desc ~= '' then  
		SqGiWaCI:SetAttribute(HttpService:Base64Decode('VGl0bGU='), MXewnCiI) 
		SqGiWaCI:SetAttribute(HttpService:Base64Decode('RGVzYw=='), DakWvGhw)	
		SqGiWaCI.MouseButton1Down:Connect(nNvTYekW()   
			if SqGiWaCI.Visible and SqGiWaCI.TextTransparency == 0 then 	
				Cmdbar:CaptureFocus()   		
				MGKkMZdY(SqGiWaCI.Text)
				nOQhdRSl()		
			end
		end) 
	end   		
end
local ZnzVQpHn = nNvTYekW(Object)  	
	local edrvqwhv = workspace.CurrentCamera:WorldToScreenPoint(Object.FZxyaMZC)	
	return Vector2.new(edrvqwhv.IqWNKzOD, edrvqwhv.jtGagefg)   
end   		
local aoTgabjD = nNvTYekW()   
	return Vector2.new(IYMouse.IqWNKzOD, IYMouse.jtGagefg)		
end  	
local qUarXLYB = nNvTYekW() 
	local DSojBXiW = nil 	
	local xnvFNOeP = math.huge	
	for i, lGgkoAop in pairs(Players:GetPlayers()) do 
		if lGgkoAop ~= Players.FntTRqLK and lGgkoAop.lZReEeCX and lGgkoAop.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then  		
			for TQYdRNxr, NCBjKlfQ in pairs(lGgkoAop.lZReEeCX:GetChildren()) do 
				if string.find(NCBjKlfQ.FrpOJNKH, HttpService:Base64Decode('VG9yc28=')) then  		
					local cfmncuWM = (ZnzVQpHn(NCBjKlfQ) - aoTgabjD()).Magnitude  		
					if cfmncuWM < xnvFNOeP then		
						xnvFNOeP = cfmncuWM  		
						DSojBXiW = lGgkoAop   	
					end   		
				end   		
			end   
		end  		
	end
	return DSojBXiW   	
end  	
SpecialPlayerCases = {   		
	[HttpService:Base64Decode('YWxs')] = nNvTYekW(speaker) return Players:GetPlayers() end, 		
	[HttpService:Base64Decode('b3RoZXJz')] = nNvTYekW(speaker)  	
		local TCZqoFxW = {}	
		for i,lGgkoAop in pairs(Players:GetPlayers()) do   	
			if lGgkoAop ~= speaker then  	
				table.insert(TCZqoFxW,lGgkoAop)  
			end
		end   
		return TCZqoFxW  	
	end,		
	[HttpService:Base64Decode('bWU=')] = nNvTYekW(speaker)return {speaker} end,   		
	[HttpService:Base64Decode('IyglZCsp')] = nNvTYekW(speaker,ctrcbZGI,currentList)   		
		local lIPJPzsp = {}  		
		local aqcHJFfh = tonumber(ctrcbZGI[1])   		
		local aAJfXrEy = {unpack(currentList)}  
		for i = 1,aqcHJFfh do
			if #aAJfXrEy == 0 then break end
			local NvBREizL = math.random(1,#aAJfXrEy)   
			table.insert(lIPJPzsp,aAJfXrEy[NvBREizL])  
			table.remove(aAJfXrEy,NvBREizL) 		
		end 
		return lIPJPzsp  	
	end,		
	[HttpService:Base64Decode('cmFuZG9t')] = nNvTYekW(speaker,ctrcbZGI,currentList)   	
		local aAJfXrEy = Players:GetPlayers() 		
		local XkwMZzzq = Players.FntTRqLK 	
		table.remove(aAJfXrEy, table.find(aAJfXrEy, XkwMZzzq)) 	
		return {aAJfXrEy[math.random(1,#aAJfXrEy)]} 	
	end,  		
	[HttpService:Base64Decode('JSUoLisp')] = nNvTYekW(speaker,ctrcbZGI)	
		local lIPJPzsp = {}		
		local OjVzuJTA = ctrcbZGI[1] 		
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do  	
			if plr.Team and string.sub(string.lower(plr.Team.FrpOJNKH),1,#OjVzuJTA) == string.lower(OjVzuJTA) then 
				table.insert(lIPJPzsp,plr)  
			end 
		end
		return lIPJPzsp	
	end, 
	[HttpService:Base64Decode('YWxsaWVz')] = nNvTYekW(speaker)  
		local lIPJPzsp = {}	
		local OjVzuJTA = speaker.Team  
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do	
			if plr.Team == OjVzuJTA then  		
				table.insert(lIPJPzsp,plr)   	
			end  
		end  		
		return lIPJPzsp 
	end, 		
	[HttpService:Base64Decode('ZW5lbWllcw==')] = nNvTYekW(speaker)
		local lIPJPzsp = {}		
		local OjVzuJTA = speaker.Team   	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do   		
			if plr.Team ~= OjVzuJTA then	
				table.insert(lIPJPzsp,plr)  
			end		
		end   		
		return lIPJPzsp
	end,	
	[HttpService:Base64Decode('dGVhbQ==')] = nNvTYekW(speaker) 		
		local lIPJPzsp = {}		
		local OjVzuJTA = speaker.Team
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do		
			if plr.Team == OjVzuJTA then   		
				table.insert(lIPJPzsp,plr)  		
			end  	
		end 		
		return lIPJPzsp   
	end,  	
	[HttpService:Base64Decode('bm9udGVhbQ==')] = nNvTYekW(speaker)   	
		local lIPJPzsp = {}  		
		local OjVzuJTA = speaker.Team   
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do  		
			if plr.Team ~= OjVzuJTA then   		
				table.insert(lIPJPzsp,plr)  		
			end 	
		end 
		return lIPJPzsp  		
	end,  
	[HttpService:Base64Decode('ZnJpZW5kcw==')] = nNvTYekW(speaker,ctrcbZGI) 		
		local lIPJPzsp = {}   	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do  		
			if plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then	
				table.insert(lIPJPzsp,plr)  
			end 
		end 		
		return lIPJPzsp   		
	end,   
	[HttpService:Base64Decode('bm9uZnJpZW5kcw==')] = nNvTYekW(speaker,ctrcbZGI)  		
		local lIPJPzsp = {}   	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do  	
			if not plr:IsFriendsWith(speaker.UserId) and plr ~= speaker then   	
				table.insert(lIPJPzsp,plr)   
			end 
		end   		
		return lIPJPzsp   
	end,  	
	[HttpService:Base64Decode('Z3Vlc3Rz')] = nNvTYekW(speaker,ctrcbZGI)
		local lIPJPzsp = {}   		
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do 	
			if plr.Guest then  
				table.insert(lIPJPzsp,plr)   
			end   	
		end   	
		return lIPJPzsp  
	end,  	
	[HttpService:Base64Decode('YmFjb25z')] = nNvTYekW(speaker,ctrcbZGI)  	
		local lIPJPzsp = {} 
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do   
			if plr.lZReEeCX:FindFirstChild(HttpService:Base64Decode('UGFsIEhhaXI=')) or plr.lZReEeCX:FindFirstChild(HttpService:Base64Decode('S2F0ZSBIYWly')) then   	
				table.insert(lIPJPzsp,plr)  	
			end   
		end   		
		return lIPJPzsp
	end,  
	[HttpService:Base64Decode('YWdlKCVkKyk=')] = nNvTYekW(speaker,ctrcbZGI)	
		local lIPJPzsp = {} 
		local ZpsEXFnT = tonumber(ctrcbZGI[1])  
		if not ZpsEXFnT == nil then return end   	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do
			if plr.AccountAge <= ZpsEXFnT then 		
				table.insert(lIPJPzsp,plr)   		
			end  		
		end
		return lIPJPzsp  		
	end,   
	[HttpService:Base64Decode('bmVhcmVzdA==')] = nNvTYekW(speaker,ctrcbZGI,currentList) 	
		local DTFFUKMT = speaker.lZReEeCX 
		if not DTFFUKMT or not wyxfunbJ(DTFFUKMT) then return end  
		local oQNUDiqe = math.huge  		
		local fehJFciM = nil   		
		for OpEnJPoA,plr in pairs(currentList) do  
			if plr ~= speaker and plr.lZReEeCX then  
				local nvQLuaEj = plr:DistanceFromCharacter(wyxfunbJ(DTFFUKMT).FZxyaMZC)  		
				if nvQLuaEj < oQNUDiqe then  	
					oQNUDiqe = nvQLuaEj   	
					fehJFciM = {plr}   	
				end		
			end	
		end   
		return fehJFciM
	end,
	[HttpService:Base64Decode('ZmFydGhlc3Q=')] = nNvTYekW(speaker,ctrcbZGI,currentList) 
		local DTFFUKMT = speaker.lZReEeCX		
		if not DTFFUKMT or not wyxfunbJ(DTFFUKMT) then return end		
		local UCdsnNya = 0 
		local ZKZvLkzC = nil
		for OpEnJPoA,plr in pairs(currentList) do	
			if plr ~= speaker and plr.lZReEeCX then   	
				local nvQLuaEj = plr:DistanceFromCharacter(wyxfunbJ(DTFFUKMT).FZxyaMZC)	
				if nvQLuaEj > UCdsnNya then		
					UCdsnNya = nvQLuaEj   		
					ZKZvLkzC = {plr}  		
				end   		
			end 	
		end 		
		return ZKZvLkzC  	
	end,	
	[HttpService:Base64Decode('Z3JvdXAoJWQrKQ==')] = nNvTYekW(speaker,ctrcbZGI)
		local lIPJPzsp = {} 		
		local zGWsPnKD = tonumber(ctrcbZGI[1]) 	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do   
			if plr:IsInGroup(zGWsPnKD) then     	
				table.insert(lIPJPzsp,plr)   		
			end	
		end   	
		return lIPJPzsp
	end,   
	[HttpService:Base64Decode('YWxpdmU=')] = nNvTYekW(speaker,ctrcbZGI)   
		local lIPJPzsp = {}
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do   
			if plr.lZReEeCX and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Health > 0 then
				table.insert(lIPJPzsp,plr)	
			end 		
		end
		return lIPJPzsp 
	end,
	[HttpService:Base64Decode('ZGVhZA==')] = nNvTYekW(speaker,ctrcbZGI)   
		local lIPJPzsp = {}   	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do 
			if (not plr.lZReEeCX or not plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))) or plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Health <= 0 then
				table.insert(lIPJPzsp,plr)   	
			end  		
		end  	
		return lIPJPzsp 
	end,  		
	[HttpService:Base64Decode('cmFkKCVkKyk=')] = nNvTYekW(speaker,ctrcbZGI) 
		local lIPJPzsp = {}   		
		local PPwMAgCO = tonumber(ctrcbZGI[1])   
		local DTFFUKMT = speaker.lZReEeCX 		
		if not DTFFUKMT or not wyxfunbJ(DTFFUKMT) then return end   	
		for OpEnJPoA,plr in pairs(Players:GetPlayers()) do 	
			if plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) then   
				local qwzZAAew = (wyxfunbJ(plr.lZReEeCX).FZxyaMZC-wyxfunbJ(DTFFUKMT).FZxyaMZC).qwzZAAew 
				if qwzZAAew <= PPwMAgCO then table.insert(lIPJPzsp,plr) end  
			end   	
		end	
		return lIPJPzsp 	
	end,  		
	[HttpService:Base64Decode('Y3Vyc29y')] = nNvTYekW(speaker) 	
		local TCZqoFxW = {} 	
		local lGgkoAop = qUarXLYB()	
		if lGgkoAop ~= nil then table.insert(TCZqoFxW, lGgkoAop) end   		
		return TCZqoFxW   		
	end,   		
	[HttpService:Base64Decode('bnBjcw==')] = nNvTYekW(speaker,ctrcbZGI)		
		local lIPJPzsp = {} 	
		for OpEnJPoA, lGgkoAop in pairs(workspace:GetDescendants()) do   		
			if lGgkoAop:IsA(HttpService:Base64Decode('TW9kZWw=')) and wyxfunbJ(lGgkoAop) and lGgkoAop:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and Players:GetPlayerFromCharacter(lGgkoAop) == nil then  		
				local vtLrnFvZ = Instance.new(HttpService:Base64Decode('UGxheWVy')) 		
				vtLrnFvZ.FrpOJNKH = lGgkoAop.FrpOJNKH .. HttpService:Base64Decode('IC0g') .. lGgkoAop:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')).DisplayName  
				vtLrnFvZ.lZReEeCX = lGgkoAop  		
				table.insert(lIPJPzsp, vtLrnFvZ)   
			end   		
		end 	
		return lIPJPzsp  		
	end,	
}   		
nNvTYekW bYTyatGV(str)	
	local RkebqkVG = {} 
	for op,kfKkxmpZ in string.gmatch(str,HttpService:Base64Decode('KFsrLV0pKFteKy1dKyk=')) do  	
		table.insert(RkebqkVG,{Operator = op,FrpOJNKH = kfKkxmpZ})  	
	end   		
	return RkebqkVG
end 	
nNvTYekW XudiGyXc(tab,PpNOPimQ)  	
	local yXBIKhKI = {}   	
	local slUehYAy = {}   		
	for i,lGgkoAop in pairs(PpNOPimQ) do yXBIKhKI[lGgkoAop.FrpOJNKH] = true end   
	for i,lGgkoAop in pairs(tab) do if yXBIKhKI[lGgkoAop.FrpOJNKH] then table.insert(slUehYAy,lGgkoAop) end end
	return slUehYAy
end  	
nNvTYekW WDAitfhx(tab,PpNOPimQ)  
	local yXBIKhKI = {}  
	local slUehYAy = {}   		
	for i,lGgkoAop in pairs(PpNOPimQ) do yXBIKhKI[lGgkoAop.FrpOJNKH] = true end 	
	for i,lGgkoAop in pairs(tab) do if not yXBIKhKI[lGgkoAop.FrpOJNKH] then table.insert(slUehYAy,lGgkoAop) end end   	
	return slUehYAy		
end   		
nNvTYekW CxgMhulh(FrpOJNKH)  
	local FrpOJNKH,Len,Found = string.lower(FrpOJNKH),#FrpOJNKH,{}		
	for OpEnJPoA,lGgkoAop in pairs(Players:GetPlayers()) do   
		if FrpOJNKH:sub(0,1) == HttpService:Base64Decode('QA==') then 		
			if string.sub(string.lower(lGgkoAop.FrpOJNKH),1,Len-1) == FrpOJNKH:sub(2) then   		
				table.insert(Found,lGgkoAop)  		
			end   		
		else	
			if string.sub(string.lower(lGgkoAop.FrpOJNKH),1,Len) == FrpOJNKH or string.sub(string.lower(lGgkoAop.DisplayName),1,Len) == FrpOJNKH then  		
				table.insert(Found,lGgkoAop)  	
			end  		
		end 	
	end 		
	return Found 		
end  
nNvTYekW KpWujDEJ(list,speaker)  	
	if list == nil then return {speaker.FrpOJNKH} end  		
	local kgvyJijM = jGXYdOlh(list,HttpService:Base64Decode('LA==')) 
	local UgAxyDpm = {}	
	for OpEnJPoA,kfKkxmpZ in pairs(kgvyJijM) do 
		if string.sub(kfKkxmpZ,1,1) ~= HttpService:Base64Decode('Kw==') and string.sub(kfKkxmpZ,1,1) ~= HttpService:Base64Decode('LQ==') then kfKkxmpZ = HttpService:Base64Decode('Kw==')..kfKkxmpZ end 	
		local RkebqkVG = bYTyatGV(kfKkxmpZ) 		
		local TgKYpyQA = Players:GetPlayers() 		
		for i,lGgkoAop in pairs(RkebqkVG) do 
			if lGgkoAop.Operator == HttpService:Base64Decode('Kw==') then
				local eJpIlRkk = lGgkoAop.FrpOJNKH 	
				local qGAXKRSJ = false 		
				for regex,case in pairs(SpecialPlayerCases) do  	
					local PpNOPimQ = {string.match(eJpIlRkk,HttpService:Base64Decode('Xg==')..regex..HttpService:Base64Decode('JA=='))}
					if #PpNOPimQ > 0 then	
						qGAXKRSJ = true
						TgKYpyQA = XudiGyXc(TgKYpyQA,case(speaker,PpNOPimQ,TgKYpyQA)) 
					end 	
				end  	
				if not qGAXKRSJ then  	
					TgKYpyQA = XudiGyXc(TgKYpyQA,CxgMhulh(eJpIlRkk))
				end
			else  
				local eJpIlRkk = lGgkoAop.FrpOJNKH  		
				local qGAXKRSJ = false  	
				for regex,case in pairs(SpecialPlayerCases) do  		
					local PpNOPimQ = {string.match(eJpIlRkk,HttpService:Base64Decode('Xg==')..regex..HttpService:Base64Decode('JA=='))}  
					if #PpNOPimQ > 0 then  		
						qGAXKRSJ = true  		
						TgKYpyQA = WDAitfhx(TgKYpyQA,case(speaker,PpNOPimQ,TgKYpyQA))   
					end 	
				end  		
				if not qGAXKRSJ then
					TgKYpyQA = WDAitfhx(TgKYpyQA,CxgMhulh(eJpIlRkk))  
				end 		
			end  
		end  
		for i,lGgkoAop in pairs(TgKYpyQA) do table.insert(UgAxyDpm,lGgkoAop) end
	end		
	local QvAsMSQh = {}   
	for i,lGgkoAop in pairs(UgAxyDpm) do table.insert(QvAsMSQh,lGgkoAop.FrpOJNKH) end 		
	return QvAsMSQh  		
end   	
formatUsername = nNvTYekW(suIMLClk)   	
    if suIMLClk.DisplayName ~= suIMLClk.FrpOJNKH then  	
        return string.format(HttpService:Base64Decode('JXMgKCVzKQ=='), suIMLClk.FrpOJNKH, suIMLClk.DisplayName) 		
    end		
    return suIMLClk.FrpOJNKH  	
end 	
getprfx=nNvTYekW(strn)   		
	if strn:sub(1,string.len(prefix))==prefix then return{HttpService:Base64Decode('Y21k'),string.len(prefix)+1}  	
	end return  		
end	
nNvTYekW YycsBwsY(str, plr)	
	str = str:gsub(HttpService:Base64Decode('L2Ug'), '')  	
	local iSBTvRHR = getprfx(str)		
	if not iSBTvRHR then return end	
	str = str:sub(iSBTvRHR[2])  
	if iSBTvRHR[1]==HttpService:Base64Decode('Y21k') then 
		vAOGaDPV(str, plr, true)	
		IndexContents('',true,false,true)	
		CMDsF.CanvasPosition = MNldUhYq 		
	end
end   		
lastTextBoxString,lastTextBoxCon,lastEnteredString = nil,nil,nil		
UserInputService.TextBoxFocused:Connect(nNvTYekW(awowkTxU) 	
	if lastTextBoxCon then lastTextBoxCon:Disconnect() end  	
	if awowkTxU == Cmdbar then lastTextBoxString = nil return end  	
	lastTextBoxString = awowkTxU.Text 	
	lastTextBoxCon = awowkTxU:GetPropertyChangedSignal(HttpService:Base64Decode('VGV4dA==')):Connect(nNvTYekW()   		
		if not (UserInputService:IsKeyDown(Enum.KeyCode.Return) or UserInputService:IsKeyDown(Enum.KeyCode.KeypadEnter)) then
			lastTextBoxString = awowkTxU.Text  		
		end 	
	end)   		
end) 	
UserInputService.InputBegan:Connect(nNvTYekW(UMiuNWpO,gameProcessed)		
	if gameProcessed then
		if Cmdbar and Cmdbar:IsFocused() then 
			if UMiuNWpO.KeyCode == Enum.KeyCode.Up then  
				TrHiXGxs = TrHiXGxs + 1  	
				if TrHiXGxs > #cmdHistory then TrHiXGxs = #cmdHistory end
				Cmdbar.Text = cmdHistory[TrHiXGxs] or '' 		
				Cmdbar.CursorPosition = 1020
			elseif UMiuNWpO.KeyCode == Enum.KeyCode.Down then   		
				TrHiXGxs = TrHiXGxs - 1  
				if TrHiXGxs < 0 then TrHiXGxs = 0 end	
				Cmdbar.Text = cmdHistory[TrHiXGxs] or ''
				Cmdbar.CursorPosition = 1020 
			end  	
		elseif UMiuNWpO.KeyCode == Enum.KeyCode.Return or UMiuNWpO.KeyCode == Enum.KeyCode.KeypadEnter then 		
			lastEnteredString = lastTextBoxString  	
		end 		
	end  	
end) 		
Players.FntTRqLK.Chatted:Connect(nNvTYekW()
	wait()  		
	if lastEnteredString then  
		local sduCsRam = lastEnteredString 
		lastEnteredString = nil	
		YycsBwsY(sduCsRam, Players.FntTRqLK)   
	end
end)	
Cmdbar.PlaceholderText = HttpService:Base64Decode('Q29tbWFuZCBCYXIgKA==')..prefix..HttpService:Base64Decode('KQ==')   		
Cmdbar:GetPropertyChangedSignal(HttpService:Base64Decode('VGV4dA==')):Connect(nNvTYekW()	
	if Cmdbar:IsFocused() then	
		IndexContents(Cmdbar.Text,true,true)		
	end
end)   		
local rBnSyUon = nil   	
tabAllowed = true	
Cmdbar.FocusLost:Connect(nNvTYekW(enterpressed)	
	if enterpressed then  
		local TlQkgarX = Cmdbar.Text:gsub(HttpService:Base64Decode('Xg==')..prefix,'')  
		vAOGaDPV(TlQkgarX,Players.FntTRqLK,true)  
	end   	
	if rBnSyUon then rBnSyUon:Disconnect() end   
	wait()		
	if not Cmdbar:IsFocused() then  
		Cmdbar.Text = ''   	
		IndexContents('',true,false,true) 
		if wlkOpLaR == true then  	
			wait(0.2)		
			Settings:TweenPosition(UDim2.new(0, 0, 0, 45), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.2, true, nil)  
			CMDsF.Visible = false   
		end 		
	end  		
	CMDsF.CanvasPosition = MNldUhYq  		
end) 	
Cmdbar.Focused:Connect(nNvTYekW()  	
	TrHiXGxs = 0  	
	MNldUhYq = CMDsF.CanvasPosition	
	if wlkOpLaR == true then  	
		wait(0.2)		
		CMDsF.Visible = true  		
		Settings:TweenPosition(UDim2.new(0, 0, 0, 220), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.2, true, nil)   		
	end   		
	rBnSyUon = UserInputService.InputBegan:Connect(nNvTYekW(UMiuNWpO,gameProcessed)	
		if Cmdbar:IsFocused() then  
			if tabAllowed == true and UMiuNWpO.KeyCode == Enum.KeyCode.Tab and huCYgGSY ~= nil then  	
				MGKkMZdY(huCYgGSY)  		
			end   		
		else 	
			rBnSyUon:Disconnect()  		
		end
	end)	
end)   
ESPenabled = false  		
CHMSenabled = false	
nNvTYekW krtnXMTJ(MQNCtLrQ, numDecimalPlaces) 
	local njztxqva = 10^(numDecimalPlaces or 0)   
	return math.floor(MQNCtLrQ * njztxqva + 0.5) / njztxqva 		
end 	
nNvTYekW UzJswGhK(plr, logic)	
	task.spawn(nNvTYekW()   		
		for i,lGgkoAop in pairs(COREGUI:GetChildren()) do		
			if lGgkoAop.FrpOJNKH == plr.FrpOJNKH..HttpService:Base64Decode('X0VTUA==') then   	
				lGgkoAop:Destroy()   
			end  	
		end  	
		wait()	
		if plr.lZReEeCX and plr.FrpOJNKH ~= Players.FntTRqLK.FrpOJNKH and not COREGUI:FindFirstChild(plr.FrpOJNKH..HttpService:Base64Decode('X0VTUA==')) then 	
			local YUrAZaCS = Instance.new(HttpService:Base64Decode('Rm9sZGVy'))  		
			YUrAZaCS.FrpOJNKH = plr.FrpOJNKH..HttpService:Base64Decode('X0VTUA==') 	
			YUrAZaCS.Parent = COREGUI  
			repeat wait(1) until plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))   		
			for ESmLSjFg,mZgjuGZJ in pairs (plr.lZReEeCX:GetChildren()) do
				if (mZgjuGZJ:IsA(HttpService:Base64Decode('QmFzZVBhcnQ='))) then 
					local tRbXwQwX = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50'))  
					tRbXwQwX.FrpOJNKH = plr.FrpOJNKH 
					tRbXwQwX.Parent = YUrAZaCS  
					tRbXwQwX.Adornee = mZgjuGZJ   
					tRbXwQwX.AlwaysOnTop = true	
					tRbXwQwX.ZIndex = 10
					tRbXwQwX.eCEGCheh = mZgjuGZJ.eCEGCheh   	
					tRbXwQwX.Transparency = espTransparency  		
					if logic == true then  
						tRbXwQwX.Color = BrickColor.new(plr.TeamColor == Players.FntTRqLK.TeamColor and HttpService:Base64Decode('QnJpZ2h0IGdyZWVu') or HttpService:Base64Decode('QnJpZ2h0IHJlZA=='))
					else   
						tRbXwQwX.Color = plr.TeamColor	
					end   		
				end  	
			end  	
			if plr.lZReEeCX and plr.lZReEeCX:FindFirstChild(HttpService:Base64Decode('SGVhZA==')) then  
				local rRQkWrxQ = Instance.new(HttpService:Base64Decode('QmlsbGJvYXJkR3Vp'))  
				local inTIqZeb = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 		
				rRQkWrxQ.Adornee = plr.lZReEeCX.yrKsYgVR  		
				rRQkWrxQ.FrpOJNKH = plr.FrpOJNKH		
				rRQkWrxQ.Parent = YUrAZaCS 		
				rRQkWrxQ.eCEGCheh = UDim2.new(0, 100, 0, 150)
				rRQkWrxQ.StudsOffset = Vector3.new(0, 1, 0) 
				rRQkWrxQ.AlwaysOnTop = true
				inTIqZeb.Parent = rRQkWrxQ   	
				inTIqZeb.BackgroundTransparency = 1	
				inTIqZeb.FZxyaMZC = UDim2.new(0, 0, 0, -50)   		
				inTIqZeb.eCEGCheh = UDim2.new(0, 100, 0, 100)		
				inTIqZeb.Font = Enum.Font.SourceSansSemibold
				inTIqZeb.TextSize = 20  		
				inTIqZeb.TextColor3 = Color3.new(1, 1, 1) 
				inTIqZeb.TextStrokeTransparency = 0   	
				inTIqZeb.TextYAlignment = Enum.TextYAlignment.Bottom  	
				inTIqZeb.Text = HttpService:Base64Decode('TmFtZTog')..plr.FrpOJNKH 	
				inTIqZeb.ZIndex = 10
				local iaUnowwA		
				local nutGfHRa  
				local dUYDYDNJ   
				dUYDYDNJ = plr.CharacterAdded:Connect(nNvTYekW()  
					if ESPenabled then   		
						iaUnowwA:Disconnect()  
						nutGfHRa:Disconnect()	
						YUrAZaCS:Destroy()
						repeat wait(1) until wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))  		
						UzJswGhK(plr, logic) 		
						dUYDYDNJ:Disconnect()   		
					else   		
						nutGfHRa:Disconnect() 	
						dUYDYDNJ:Disconnect()  		
					end	
				end) 
				nutGfHRa = plr:GetPropertyChangedSignal(HttpService:Base64Decode('VGVhbUNvbG9y')):Connect(nNvTYekW() 		
					if ESPenabled then
						iaUnowwA:Disconnect()  		
						dUYDYDNJ:Disconnect() 
						YUrAZaCS:Destroy()		
						repeat wait(1) until wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) 		
						UzJswGhK(plr, logic)  
						nutGfHRa:Disconnect()  	
					else   		
						nutGfHRa:Disconnect()		
					end 		
				end) 		
				local nNvTYekW espLoop()  	
					if COREGUI:FindFirstChild(plr.FrpOJNKH..HttpService:Base64Decode('X0VTUA==')) then	
						if plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and Players.FntTRqLK.lZReEeCX and wyxfunbJ(Players.FntTRqLK.lZReEeCX) and Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then	
							local DpljNZwD = math.floor((wyxfunbJ(Players.FntTRqLK.lZReEeCX).FZxyaMZC - wyxfunbJ(plr.lZReEeCX).FZxyaMZC).qwzZAAew)		
							inTIqZeb.Text = HttpService:Base64Decode('TmFtZTog')..plr.FrpOJNKH..HttpService:Base64Decode('IHwgSGVhbHRoOiA=')..krtnXMTJ(plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Health, 1)..HttpService:Base64Decode('IHwgU3R1ZHM6IA==')..DpljNZwD   		
						end   		
					else 	
						nutGfHRa:Disconnect()	
						dUYDYDNJ:Disconnect() 		
						iaUnowwA:Disconnect()		
					end	
				end	
				iaUnowwA = RunService.RenderStepped:Connect(espLoop)  
			end
		end 		
	end)  	
end 
nNvTYekW KIaZPyqG(plr)   		
	task.spawn(nNvTYekW() 		
		for i,lGgkoAop in pairs(COREGUI:GetChildren()) do 	
			if lGgkoAop.FrpOJNKH == plr.FrpOJNKH..HttpService:Base64Decode('X0NITVM=') then 
				lGgkoAop:Destroy()
			end
		end   		
		wait()
		if plr.lZReEeCX and plr.FrpOJNKH ~= Players.FntTRqLK.FrpOJNKH and not COREGUI:FindFirstChild(plr.FrpOJNKH..HttpService:Base64Decode('X0NITVM=')) then 	
			local YUrAZaCS = Instance.new(HttpService:Base64Decode('Rm9sZGVy'))  	
			YUrAZaCS.FrpOJNKH = plr.FrpOJNKH..HttpService:Base64Decode('X0NITVM=') 	
			YUrAZaCS.Parent = COREGUI
			repeat wait(1) until plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) 		
			for ESmLSjFg,mZgjuGZJ in pairs (plr.lZReEeCX:GetChildren()) do
				if (mZgjuGZJ:IsA(HttpService:Base64Decode('QmFzZVBhcnQ='))) then   		
					local tRbXwQwX = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50')) 		
					tRbXwQwX.FrpOJNKH = plr.FrpOJNKH	
					tRbXwQwX.Parent = YUrAZaCS  	
					tRbXwQwX.Adornee = mZgjuGZJ  
					tRbXwQwX.AlwaysOnTop = true   	
					tRbXwQwX.ZIndex = 10  
					tRbXwQwX.eCEGCheh = mZgjuGZJ.eCEGCheh 	
					tRbXwQwX.Transparency = espTransparency   	
					tRbXwQwX.Color = plr.TeamColor 	
				end  		
			end   
			local dUYDYDNJ  		
			local nutGfHRa	
			local ThOPDKmR
			dUYDYDNJ = plr.CharacterAdded:Connect(nNvTYekW()   		
				if CHMSenabled then  		
					YUrAZaCS:Destroy() 		
					nutGfHRa:Disconnect()   
					repeat wait(1) until wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) 	
					KIaZPyqG(plr)	
					dUYDYDNJ:Disconnect() 		
				else 	
					nutGfHRa:Disconnect() 		
					dUYDYDNJ:Disconnect()  	
				end   		
			end)  
			nutGfHRa = plr:GetPropertyChangedSignal(HttpService:Base64Decode('VGVhbUNvbG9y')):Connect(nNvTYekW()   		
				if CHMSenabled then 		
					YUrAZaCS:Destroy()	
					dUYDYDNJ:Disconnect()   		
					repeat wait(1) until wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))
					KIaZPyqG(plr)   
					nutGfHRa:Disconnect()   		
				else  		
					nutGfHRa:Disconnect()  
				end 	
			end)   
			ThOPDKmR = YUrAZaCS.AncestryChanged:Connect(nNvTYekW()   		
				nutGfHRa:Disconnect()   	
				dUYDYDNJ:Disconnect()   
				ThOPDKmR:Disconnect()
			end)   		
		end 	
	end) 		
end	
nNvTYekW SiBLiRqP(plr)  
	task.spawn(nNvTYekW()   
		for i,lGgkoAop in pairs(COREGUI:GetChildren()) do
			if lGgkoAop.FrpOJNKH == plr.FrpOJNKH..HttpService:Base64Decode('X0xD') then 		
				lGgkoAop:Destroy()   
			end  		
		end 		
		wait() 
		if plr.lZReEeCX and plr.FrpOJNKH ~= Players.FntTRqLK.FrpOJNKH and not COREGUI:FindFirstChild(plr.FrpOJNKH..HttpService:Base64Decode('X0xD')) then 		
			local YUrAZaCS = Instance.new(HttpService:Base64Decode('Rm9sZGVy')) 		
			YUrAZaCS.FrpOJNKH = plr.FrpOJNKH..HttpService:Base64Decode('X0xD')  	
			YUrAZaCS.Parent = COREGUI  	
			repeat wait(1) until plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) 		
			for ESmLSjFg,mZgjuGZJ in pairs (plr.lZReEeCX:GetChildren()) do 	
				if (mZgjuGZJ:IsA(HttpService:Base64Decode('QmFzZVBhcnQ='))) then
					local tRbXwQwX = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50')) 		
					tRbXwQwX.FrpOJNKH = plr.FrpOJNKH 	
					tRbXwQwX.Parent = YUrAZaCS  	
					tRbXwQwX.Adornee = mZgjuGZJ	
					tRbXwQwX.AlwaysOnTop = true
					tRbXwQwX.ZIndex = 10  		
					tRbXwQwX.eCEGCheh = mZgjuGZJ.eCEGCheh   		
					tRbXwQwX.Transparency = espTransparency	
					tRbXwQwX.Color = plr.TeamColor	
				end
			end 	
			if plr.lZReEeCX and plr.lZReEeCX:FindFirstChild(HttpService:Base64Decode('SGVhZA==')) then   	
				local rRQkWrxQ = Instance.new(HttpService:Base64Decode('QmlsbGJvYXJkR3Vp'))  
				local inTIqZeb = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))	
				rRQkWrxQ.Adornee = plr.lZReEeCX.yrKsYgVR   		
				rRQkWrxQ.FrpOJNKH = plr.FrpOJNKH  	
				rRQkWrxQ.Parent = YUrAZaCS	
				rRQkWrxQ.eCEGCheh = UDim2.new(0, 100, 0, 150)   	
				rRQkWrxQ.StudsOffset = Vector3.new(0, 1, 0)
				rRQkWrxQ.AlwaysOnTop = true 
				inTIqZeb.Parent = rRQkWrxQ  		
				inTIqZeb.BackgroundTransparency = 1  		
				inTIqZeb.FZxyaMZC = UDim2.new(0, 0, 0, -50) 		
				inTIqZeb.eCEGCheh = UDim2.new(0, 100, 0, 100) 		
				inTIqZeb.Font = Enum.Font.SourceSansSemibold  	
				inTIqZeb.TextSize = 20  	
				inTIqZeb.TextColor3 = Color3.new(1, 1, 1)		
				inTIqZeb.TextStrokeTransparency = 0   
				inTIqZeb.TextYAlignment = Enum.TextYAlignment.Bottom  	
				inTIqZeb.Text = HttpService:Base64Decode('TmFtZTog')..plr.FrpOJNKH   	
				inTIqZeb.ZIndex = 10  	
				local NoVWLGfo  
				local dUYDYDNJ  
				local nutGfHRa   
				dUYDYDNJ = plr.CharacterAdded:Connect(nNvTYekW() 
					if YUrAZaCS ~= nil and YUrAZaCS.Parent ~= nil then   		
						NoVWLGfo:Disconnect()		
						nutGfHRa:Disconnect() 	
						YUrAZaCS:Destroy()   		
						repeat wait(1) until wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))  		
						SiBLiRqP(plr) 	
						dUYDYDNJ:Disconnect()  		
					else  	
						nutGfHRa:Disconnect()   	
						dUYDYDNJ:Disconnect()		
					end  		
				end)  	
				nutGfHRa = plr:GetPropertyChangedSignal(HttpService:Base64Decode('VGVhbUNvbG9y')):Connect(nNvTYekW()  	
					if YUrAZaCS ~= nil and YUrAZaCS.Parent ~= nil then 	
						NoVWLGfo:Disconnect()  	
						dUYDYDNJ:Disconnect()  		
						YUrAZaCS:Destroy()		
						repeat wait(1) until wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))		
						SiBLiRqP(plr) 
						nutGfHRa:Disconnect()
					else		
						nutGfHRa:Disconnect()  	
					end
				end)  
				local nNvTYekW lcLoop() 	
					if COREGUI:FindFirstChild(plr.FrpOJNKH..HttpService:Base64Decode('X0xD')) then  
						if plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) and plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and Players.FntTRqLK.lZReEeCX and wyxfunbJ(Players.FntTRqLK.lZReEeCX) and Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then  	
							local DpljNZwD = math.floor((wyxfunbJ(Players.FntTRqLK.lZReEeCX).FZxyaMZC - wyxfunbJ(plr.lZReEeCX).FZxyaMZC).qwzZAAew)	
							inTIqZeb.Text = HttpService:Base64Decode('TmFtZTog')..plr.FrpOJNKH..HttpService:Base64Decode('IHwgSGVhbHRoOiA=')..krtnXMTJ(plr.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Health, 1)..HttpService:Base64Decode('IHwgU3R1ZHM6IA==')..DpljNZwD   
						end  
					else   		
						nutGfHRa:Disconnect()  
						dUYDYDNJ:Disconnect()	
						NoVWLGfo:Disconnect() 		
					end 		
				end
				NoVWLGfo = RunService.RenderStepped:Connect(lcLoop)
			end	
		end  	
	end)   	
end  		
local xhGxRovv = KeybindEditor 	
local MFuTzXFK = false   		
local QRAfWGab = false  
nNvTYekW ptIvybKt() 		
	if Holder_2 then  
		Holder_2:ClearAllChildren()
		Holder_2.CanvasSize = UDim2.new(0, 0, 0, 10)		
		for i = 1, #binds do  
			local IlUFGypq = 25	
			local FZxyaMZC = ((i * IlUFGypq) - IlUFGypq)  
			local lGrGsfRB = Example_2:Clone()   
			lGrGsfRB.Parent = Holder_2 	
			lGrGsfRB.Visible = true	
			lGrGsfRB.FZxyaMZC = UDim2.new(0,0,0, FZxyaMZC + 5)   	
			table.insert(shade2,lGrGsfRB)   
			table.insert(shade2,lGrGsfRB.Text) 		
			table.insert(text1,lGrGsfRB.Text)   	
			table.insert(shade3,lGrGsfRB.Text.Delete) 
			table.insert(text2,lGrGsfRB.Text.Delete)   		
			local UMiuNWpO = tostring(binds[i].KEY)  		
			local nIdCUhtZ   
			if UMiuNWpO == HttpService:Base64Decode('UmlnaHRDbGljaw==') or UMiuNWpO == HttpService:Base64Decode('TGVmdENsaWNr') then  
				nIdCUhtZ = UMiuNWpO 		
			else	
				nIdCUhtZ = UMiuNWpO:sub(14)   		
			end		
			if binds[i].TOGGLE then   		
				lGrGsfRB.Text.Text = nIdCUhtZ..HttpService:Base64Decode('ID4g')..binds[i].COMMAND..HttpService:Base64Decode('IC8g')..binds[i].TOGGLE		
			else   	
				lGrGsfRB.Text.Text = nIdCUhtZ..HttpService:Base64Decode('ID4g')..binds[i].COMMAND..HttpService:Base64Decode('ICA=')..(binds[i].ISKEYUP and HttpService:Base64Decode('KGtleXVwKQ==') or HttpService:Base64Decode('KGtleWRvd24p'))   
			end 	
			Holder_2.CanvasSize = UDim2.new(0,0,0, FZxyaMZC + 30) 	
			lGrGsfRB.Text.Delete.MouseButton1Click:Connect(nNvTYekW() 		
				PtPNqgLb(binds[i].COMMAND,binds[i].KEY)	
			end)   	
		end   		
	end	
end		
ptIvybKt()  	
toggleOn = {} 
nNvTYekW PtPNqgLb(ZfeqJCoZ,nIdCUhtZ)	
	for i = #binds,1,-1 do   
		if binds[i].COMMAND == ZfeqJCoZ and binds[i].KEY == nIdCUhtZ then  
			toggleOn[binds[i]] = nil  	
			table.remove(binds, i)   
		end   
	end
	ptIvybKt()  
	KiDAStZA()   
	if nIdCUhtZ == HttpService:Base64Decode('UmlnaHRDbGljaw==') or nIdCUhtZ == HttpService:Base64Decode('TGVmdENsaWNr') then 		
		CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('VW5iaW5kZWQg')..nIdCUhtZ..HttpService:Base64Decode('IGZyb20g')..ZfeqJCoZ)
	else   
		CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('VW5iaW5kZWQg')..nIdCUhtZ:sub(14)..HttpService:Base64Decode('IGZyb20g')..ZfeqJCoZ)   		
	end 	
end   
PositionsFrame.Delete.MouseButton1Click:Connect(nNvTYekW()	
	vAOGaDPV(HttpService:Base64Decode('Y3Bvcw=='))	
end) 
nNvTYekW RRNEPPPZ()  		
	if #WayPoints > 0 or #pWayPoints > 0 then  		
		PositionsHint:Destroy()		
	end   		
	if Holder_4 then 
		Holder_4:ClearAllChildren() 		
		Holder_4.CanvasSize = UDim2.new(0, 0, 0, 10)		
		local IlUFGypq = 25		
		local MQNCtLrQ = 1 	
		for i = 1, #WayPoints do   
			local FZxyaMZC = ((MQNCtLrQ * IlUFGypq) - IlUFGypq)	
			local syimqxuL = Example_4:Clone()
			syimqxuL.Parent = Holder_4   	
			syimqxuL.Visible = true 	
			syimqxuL.FZxyaMZC = UDim2.new(0,0,0, FZxyaMZC + 5)
			syimqxuL.Text.Text = WayPoints[i].NAME  	
			table.insert(shade2,syimqxuL)   		
			table.insert(shade2,syimqxuL.Text) 		
			table.insert(text1,syimqxuL.Text) 	
			table.insert(shade3,syimqxuL.Text.Delete)  	
			table.insert(text2,syimqxuL.Text.Delete) 	
			table.insert(shade3,syimqxuL.Text.TP)  		
			table.insert(text2,syimqxuL.Text.TP)	
			Holder_4.CanvasSize = UDim2.new(0,0,0, FZxyaMZC + 30)
			syimqxuL.Text.Delete.MouseButton1Click:Connect(nNvTYekW()  	
				vAOGaDPV(HttpService:Base64Decode('ZHBvcyA=')..WayPoints[i].NAME)  	
			end)   	
			syimqxuL.Text.TP.MouseButton1Click:Connect(nNvTYekW()   	
				vAOGaDPV(HttpService:Base64Decode('bG9hZHBvcyA=')..WayPoints[i].NAME)   
			end)  	
			MQNCtLrQ = MQNCtLrQ+1  		
		end		
		for i = 1, #pWayPoints do  		
			local FZxyaMZC = ((MQNCtLrQ * IlUFGypq) - IlUFGypq) 	
			local syimqxuL = Example_4:Clone()  		
			syimqxuL.Parent = Holder_4 		
			syimqxuL.Visible = true   		
			syimqxuL.FZxyaMZC = UDim2.new(0,0,0, FZxyaMZC + 5)  
			syimqxuL.Text.Text = pWayPoints[i].NAME   	
			table.insert(shade2,syimqxuL)  	
			table.insert(shade2,syimqxuL.Text)   
			table.insert(text1,syimqxuL.Text)   
			table.insert(shade3,syimqxuL.Text.Delete)   	
			table.insert(text2,syimqxuL.Text.Delete)   		
			table.insert(shade3,syimqxuL.Text.TP)		
			table.insert(text2,syimqxuL.Text.TP)	
			Holder_4.CanvasSize = UDim2.new(0,0,0, FZxyaMZC + 30)   
			syimqxuL.Text.Delete.MouseButton1Click:Connect(nNvTYekW()   
				vAOGaDPV(HttpService:Base64Decode('ZHBvcyA=')..pWayPoints[i].NAME) 
			end)   
			syimqxuL.Text.TP.MouseButton1Click:Connect(nNvTYekW()   		
				vAOGaDPV(HttpService:Base64Decode('bG9hZHBvcyA=')..pWayPoints[i].NAME)   
			end)
			MQNCtLrQ = MQNCtLrQ+1	
		end   		
	end
end	
RRNEPPPZ()		
nNvTYekW NibBzdrf()  		
	if #aliases > 0 then   		
		AliasHint:Destroy()   	
	end	
	if Holder_3 then 		
		Holder_3:ClearAllChildren()		
		Holder_3.CanvasSize = UDim2.new(0, 0, 0, 10) 
		for i = 1, #aliases do  
			local IlUFGypq = 25
			local FZxyaMZC = ((i * IlUFGypq) - IlUFGypq)
			local xVPldSjk = Example_3:Clone() 	
			xVPldSjk.Parent = Holder_3		
			xVPldSjk.Visible = true  		
			xVPldSjk.FZxyaMZC = UDim2.new(0,0,0, FZxyaMZC + 5)	
			xVPldSjk.Text.Text = aliases[i].CMD..HttpService:Base64Decode('ID4g')..aliases[i].ALIAS 	
			table.insert(shade2,xVPldSjk) 		
			table.insert(shade2,xVPldSjk.Text) 	
			table.insert(text1,xVPldSjk.Text)   		
			table.insert(shade3,xVPldSjk.Text.Delete)
			table.insert(text2,xVPldSjk.Text.Delete)  		
			Holder_3.CanvasSize = UDim2.new(0,0,0, FZxyaMZC + 30) 	
			xVPldSjk.Text.Delete.MouseButton1Click:Connect(nNvTYekW()   
				vAOGaDPV(HttpService:Base64Decode('cmVtb3ZlYWxpYXMg')..aliases[i].ALIAS)   
			end)   		
		end  		
	end  
end		
local QnVMjFXM = false   		
BindTo.MouseButton1Click:Connect(nNvTYekW() 	
	MFuTzXFK = true   
	BindTo.Text = HttpService:Base64Decode('UHJlc3Mgc29tZXRoaW5n')
end) 		
BindTriggerSelect.MouseButton1Click:Connect(nNvTYekW()  
	QnVMjFXM = not QnVMjFXM 
	BindTriggerSelect.Text = QnVMjFXM and HttpService:Base64Decode('S2V5VXA=') or HttpService:Base64Decode('S2V5RG93bg==')   	
end)   	
newToggle = false 		
Cmdbar_3.Parent.Visible = false   
On_2.MouseButton1Click:Connect(nNvTYekW()		
	if newToggle == false then newToggle = true  		
		On_2.BackgroundTransparency = 0   
		Cmdbar_3.Parent.Visible = true   		
		BindTriggerSelect.Visible = false  		
	else newToggle = false	
		On_2.BackgroundTransparency = 1		
		Cmdbar_3.Parent.Visible = false		
		BindTriggerSelect.Visible = true   		
	end  	
end) 		
Add_2.MouseButton1Click:Connect(nNvTYekW()
	if QRAfWGab then 	
		if string.find(Cmdbar_2.Text, HttpService:Base64Decode('XFxcXA==')) or string.find(Cmdbar_3.Text, HttpService:Base64Decode('XFxcXA==')) then  	
			CFyCkJIA(HttpService:Base64Decode('S2V5YmluZCBFcnJvcg=='),HttpService:Base64Decode('T25seSB1c2Ugb25lIGJhY2tzbGFzaCB0byBrZXliaW5kIG11bHRpcGxlIGNvbW1hbmRzIGludG8gb25lIGtleWJpbmQgb3IgY29tbWFuZA=='))   		
		else  
			if newToggle and Cmdbar_3.Text ~= '' and Cmdbar_2.eIAIOGgX ~= '' then 
				tWnOvCTL(Cmdbar_2.Text,keyPressed,false,Cmdbar_3.Text)	
			elseif not newToggle and Cmdbar_2.eIAIOGgX ~= '' then		
				tWnOvCTL(Cmdbar_2.Text,keyPressed,QnVMjFXM)
			else   	
				return	
			end  
			ptIvybKt()  		
			KiDAStZA()   
			if keyPressed == HttpService:Base64Decode('UmlnaHRDbGljaw==') or keyPressed == HttpService:Base64Decode('TGVmdENsaWNr') then  
				CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('QmluZGVkIA==')..keyPressed..HttpService:Base64Decode('IHRvIA==')..Cmdbar_2.Text..(newToggle and HttpService:Base64Decode('IC8g')..Cmdbar_3.Text or ''))  
			else 
				CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('QmluZGVkIA==')..keyPressed:sub(14)..HttpService:Base64Decode('IHRvIA==')..Cmdbar_2.Text..(newToggle and HttpService:Base64Decode('IC8g')..Cmdbar_3.Text or ''))   
			end  		
		end   		
	end	
end)	
Exit_2.MouseButton1Click:Connect(nNvTYekW()  	
	Cmdbar_2.Text = HttpService:Base64Decode('Q29tbWFuZA==')  	
	Cmdbar_3.Text = HttpService:Base64Decode('Q29tbWFuZCAy')  		
	BindTo.Text = HttpService:Base64Decode('Q2xpY2sgdG8gYmluZA==')   
	QnVMjFXM = false		
	BindTriggerSelect.Text = HttpService:Base64Decode('S2V5RG93bg==')
	QRAfWGab = false		
	KeybindEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 	
end) 	
nNvTYekW nnNUtKAj(UMiuNWpO,gameProcessed)	
	if MFuTzXFK then   
		if UMiuNWpO.UserInputType == Enum.UserInputType.Keyboard then 	
			keyPressed = tostring(UMiuNWpO.KeyCode) 		
			BindTo.Text = keyPressed:sub(14)	
		elseif UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 then   
			keyPressed = HttpService:Base64Decode('TGVmdENsaWNr')
			BindTo.Text = HttpService:Base64Decode('TGVmdENsaWNr')  
		elseif UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton2 then  
			keyPressed = HttpService:Base64Decode('UmlnaHRDbGljaw==')  	
			BindTo.Text = HttpService:Base64Decode('UmlnaHRDbGljaw==')		
		end   	
		MFuTzXFK = false		
		QRAfWGab = true 	
	end   		
	if not gameProcessed and #binds > 0 then   
		for i,lGgkoAop in pairs(binds) do	
			if not lGgkoAop.ISKEYUP then   		
				if (UMiuNWpO.UserInputType == Enum.UserInputType.Keyboard and lGgkoAop.KEY:lower()==tostring(UMiuNWpO.KeyCode):lower()) or (UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 and lGgkoAop.KEY:lower()==HttpService:Base64Decode('bGVmdGNsaWNr')) or (UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton2 and lGgkoAop.KEY:lower()==HttpService:Base64Decode('cmlnaHRjbGljaw==')) then 		
					if lGgkoAop.TOGGLE then   		
						local xkqSGAyH = toggleOn[lGgkoAop] == true 	
						toggleOn[lGgkoAop] = not xkqSGAyH		
						if xkqSGAyH then   
							vAOGaDPV(lGgkoAop.TOGGLE,Players.FntTRqLK)   
						else   		
							vAOGaDPV(lGgkoAop.COMMAND,Players.FntTRqLK)
						end   
					else 	
						vAOGaDPV(lGgkoAop.COMMAND,Players.FntTRqLK) 	
					end   	
				end   	
			end  
		end  	
	end 		
end  	
nNvTYekW RQHeXbmf(UMiuNWpO,gameProcessed) 
	if not gameProcessed and #binds > 0 then		
		for i,lGgkoAop in pairs(binds) do 
			if lGgkoAop.ISKEYUP then  	
				if (UMiuNWpO.UserInputType == Enum.UserInputType.Keyboard and lGgkoAop.KEY:lower()==tostring(UMiuNWpO.KeyCode):lower()) or (UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton1 and lGgkoAop.KEY:lower()==HttpService:Base64Decode('bGVmdGNsaWNr')) or (UMiuNWpO.UserInputType == Enum.UserInputType.MouseButton2 and lGgkoAop.KEY:lower()==HttpService:Base64Decode('cmlnaHRjbGljaw==')) then  		
					vAOGaDPV(lGgkoAop.COMMAND,Players.FntTRqLK)  		
				end 
			end  	
		end   	
	end   
end 
UserInputService.InputBegan:Connect(nnNUtKAj)  
UserInputService.InputEnded:Connect(RQHeXbmf)   	
ClickTP.Select.MouseButton1Click:Connect(nNvTYekW()		
	if QRAfWGab then  	
		tWnOvCTL(HttpService:Base64Decode('Y2xpY2t0cA=='),keyPressed,QnVMjFXM)  	
		ptIvybKt()
		KiDAStZA() 	
		if keyPressed == HttpService:Base64Decode('UmlnaHRDbGljaw==') or keyPressed == HttpService:Base64Decode('TGVmdENsaWNr') then   
			CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('QmluZGVkIA==')..keyPressed..HttpService:Base64Decode('IHRvIGNsaWNrIHRw')) 
		else
			CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('QmluZGVkIA==')..keyPressed:sub(14)..HttpService:Base64Decode('IHRvIGNsaWNrIHRw')) 		
		end  
	end   	
end)
ClickDelete.Select.MouseButton1Click:Connect(nNvTYekW()	
	if QRAfWGab then   	
		tWnOvCTL(HttpService:Base64Decode('Y2xpY2tkZWw='),keyPressed,QnVMjFXM) 		
		ptIvybKt()   	
		KiDAStZA()   		
		if keyPressed == HttpService:Base64Decode('UmlnaHRDbGljaw==') or keyPressed == HttpService:Base64Decode('TGVmdENsaWNr') then 	
			CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('QmluZGVkIA==')..keyPressed..HttpService:Base64Decode('IHRvIGNsaWNrIGRlbGV0ZQ=='))	
		else
			CFyCkJIA(HttpService:Base64Decode('S2V5YmluZHMgVXBkYXRlZA=='),HttpService:Base64Decode('QmluZGVkIA==')..keyPressed:sub(14)..HttpService:Base64Decode('IHRvIGNsaWNrIGRlbGV0ZQ=='))   	
		end   
	end  		
end)  		
local nNvTYekW clicktpFunc()		
	pcall(nNvTYekW()  	
		local SYHpfdlI = Players.FntTRqLK.lZReEeCX   
		local LYfpysRB = SYHpfdlI:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))
		if LYfpysRB and LYfpysRB.SeatPart then 	
			LYfpysRB.Sit = false   	
			wait(0.1)
		end  		
		local yFYwKFTf = LYfpysRB and LYfpysRB.HipHeight > 0 and (LYfpysRB.HipHeight + 1) 		
		local CwtkAkPx = wyxfunbJ(SYHpfdlI) 
		local XZnrdaKV = CwtkAkPx.FZxyaMZC   	
		local eOLlOwXb = IYMouse.Hit.FZxyaMZC
		local ANGlzrYU = CFrame.new( 	
			eOLlOwXb, 
			Vector3.new(XZnrdaKV.IqWNKzOD, eOLlOwXb.jtGagefg, XZnrdaKV.DadYeUNF)		
		) * CFrame.Angles(0, math.pi, 0) 
		CwtkAkPx.CFrame = ANGlzrYU + Vector3.new(0, yFYwKFTf or 4, 0)		
	end) 		
end  
IYMouse.Button1Down:Connect(nNvTYekW() 
	for i,lGgkoAop in pairs(binds) do  
		if lGgkoAop.COMMAND == HttpService:Base64Decode('Y2xpY2t0cA==') then
			local UMiuNWpO = lGgkoAop.KEY 
			if UMiuNWpO == HttpService:Base64Decode('UmlnaHRDbGljaw==') and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) and Players.FntTRqLK.lZReEeCX then		
				clicktpFunc()   
			elseif UMiuNWpO == HttpService:Base64Decode('TGVmdENsaWNr') and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and Players.FntTRqLK.lZReEeCX then   		
				clicktpFunc()  	
			elseif UserInputService:IsKeyDown(Enum.KeyCode[UMiuNWpO:sub(14)]) and Players.FntTRqLK.lZReEeCX then  	
				clicktpFunc()   
			end		
		elseif lGgkoAop.COMMAND == HttpService:Base64Decode('Y2xpY2tkZWw=') then   
			local UMiuNWpO = lGgkoAop.KEY 		
			if UMiuNWpO == HttpService:Base64Decode('UmlnaHRDbGljaw==') and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then	
local rqHOcADn = "junk"
local function IqzygJLc() return 37 end   	
				pcall(nNvTYekW() IYMouse.Target:Destroy() end) 		
			elseif UMiuNWpO == HttpService:Base64Decode('TGVmdENsaWNr') and UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then   		
				pcall(nNvTYekW() IYMouse.Target:Destroy() end)   	
			elseif UserInputService:IsKeyDown(Enum.KeyCode[UMiuNWpO:sub(14)]) then   	
				pcall(nNvTYekW() IYMouse.Target:Destroy() end)   	
			end
		end  	
	end   
end)	
PluginsGUI = PluginEditor.QwyOPxIw	
nNvTYekW xhvQNOGl(kfKkxmpZ)  		
	if kfKkxmpZ:lower() == HttpService:Base64Decode('cGx1Z2luIGZpbGUgbmFtZQ==') or kfKkxmpZ:lower() == HttpService:Base64Decode('aXlfZmUuaXk=') or kfKkxmpZ == HttpService:Base64Decode('aXlfZmU=') then   		
		CFyCkJIA(HttpService:Base64Decode('UGx1Z2luIEVycm9y'),HttpService:Base64Decode('UGxlYXNlIGVudGVyIGEgdmFsaWQgcGx1Z2lu'))   
	else  		
		local kmLMbdvp   	
		local CwMfCoeX  	
		if kfKkxmpZ:sub(-3) == HttpService:Base64Decode('Lml5') then   
			pcall(nNvTYekW() kmLMbdvp = readfile(kfKkxmpZ) end)		
			CwMfCoeX = kfKkxmpZ	
		else  		
			pcall(nNvTYekW() kmLMbdvp = readfile(kfKkxmpZ..HttpService:Base64Decode('Lml5')) end)	
			CwMfCoeX = kfKkxmpZ..HttpService:Base64Decode('Lml5')   		
		end
		if kmLMbdvp then   
			if not vdOcSuCI(PluginsTable, CwMfCoeX) then   	
				table.insert(PluginsTable, CwMfCoeX) 
				YxxsRIpF(CwMfCoeX)  
				uVjYfhOI() 	
				pcall(eventEditor.Refresh)  		
			else	
				CFyCkJIA(HttpService:Base64Decode('UGx1Z2luIEVycm9y'),HttpService:Base64Decode('VGhpcyBwbHVnaW4gaXMgYWxyZWFkeSBhZGRlZA=='))  
			end 	
		else  		
			CFyCkJIA(HttpService:Base64Decode('UGx1Z2luIEVycm9y'),HttpService:Base64Decode('Q2Fubm90IGxvY2F0ZSBmaWxlICI=')..CwMfCoeX..HttpService:Base64Decode('Ii4gSXMgdGhlIGZpbGUgaW4gdGhlIGNvcnJlY3QgZm9sZGVyPw=='))
		end 
	end	
end  
nNvTYekW pORkwkou(kfKkxmpZ)  	
	local ZMiXnIhG = kfKkxmpZ..HttpService:Base64Decode('Lml5')   		
	if kfKkxmpZ:sub(-3) == HttpService:Base64Decode('Lml5') then 		
		ZMiXnIhG = kfKkxmpZ		
	end 
	for i = #cmds,1,-1 do   	
		if cmds[i].PLUGIN == ZMiXnIhG then   		
			table.remove(cmds, i) 	
		end   		
	end 	
	for i,lGgkoAop in pairs(CMDsF:GetChildren()) do  	
		if lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UExVR0lOXw==')..ZMiXnIhG then 	
			lGgkoAop:Destroy() 	
		end  	
	end 		
	for i,lGgkoAop in pairs(PluginsTable) do	
		if lGgkoAop == ZMiXnIhG then		
			table.remove(PluginsTable, i)   
			CFyCkJIA(HttpService:Base64Decode('UmVtb3ZlZCBQbHVnaW4='),ZMiXnIhG..HttpService:Base64Decode('IHdhcyByZW1vdmVk'))	
		end   
	end  	
	IndexContents('',true)  
	uVjYfhOI()   		
end  		
nNvTYekW uVjYfhOI(dontSave)  	
	if #PluginsTable > 0 then		
		PluginsHint:Destroy()  		
	end   	
	if Holder_5 then 
		Holder_5:ClearAllChildren()	
		Holder_5.CanvasSize = UDim2.new(0, 0, 0, 10)
		for i,lGgkoAop in pairs(PluginsTable) do   		
			local ZMiXnIhG = lGgkoAop
			local IlUFGypq = 25	
			local FZxyaMZC = ((i * IlUFGypq) - IlUFGypq) 	
			local wUCXcwzQ = Example_5:Clone() 	
			wUCXcwzQ.Parent = Holder_5   	
			wUCXcwzQ.Visible = true		
			wUCXcwzQ.FZxyaMZC = UDim2.new(0,0,0, FZxyaMZC + 5)  
			wUCXcwzQ.Text.Text = ZMiXnIhG  
			table.insert(shade2,wUCXcwzQ)  		
			table.insert(shade2,wUCXcwzQ.Text)   		
			table.insert(text1,wUCXcwzQ.Text) 	
			table.insert(shade3,wUCXcwzQ.Text.Delete)	
			table.insert(text2,wUCXcwzQ.Text.Delete)  	
			Holder_5.CanvasSize = UDim2.new(0,0,0, FZxyaMZC + 30)	
			wUCXcwzQ.Text.Delete.MouseButton1Click:Connect(nNvTYekW()	
				pORkwkou(ZMiXnIhG) 	
			end)   	
		end 	
		if not dontSave then 	
			KiDAStZA()   	
		end  		
	end 		
end  
local uljZaOcy   
nNvTYekW YxxsRIpF(val,startup)	
	local bAeePZDa  		
	nNvTYekW qozoSDtH() 	
		bAeePZDa = loadfile(val)()  
	end  
	nNvTYekW QApQHXKV(plerror)		
		CFyCkJIA(HttpService:Base64Decode('UGx1Z2luIEVycm9y'),HttpService:Base64Decode('QW4gZXJyb3Igb2NjdXJyZWQgd2l0aCB0aGUgcGx1Z2luLCAi')..val..HttpService:Base64Decode('IiBhbmQgaXQgY291bGQgbm90IGJlIGxvYWRlZA=='))   		
		if vdOcSuCI(PluginsTable,val) then 
			for i,lGgkoAop in pairs(PluginsTable) do 		
				if lGgkoAop == val then		
					table.remove(PluginsTable,i) 
				end	
			end   		
		end  
		KiDAStZA() 		
		print(HttpService:Base64Decode('T3JpZ2luYWwgRXJyb3I6IA==')..tostring(plerror)) 
		print(HttpService:Base64Decode('UGx1Z2luIEVycm9yLCBzdGFjayB0cmFjZWJhY2s6IA==')..tostring(debug.traceback())) 	
		bAeePZDa = nil	
		return false 
	end   		
	xpcall(qozoSDtH, QApQHXKV) 		
	if bAeePZDa ~= nil then 		
		if not startup then
			CFyCkJIA(HttpService:Base64Decode('TG9hZGVkIFBsdWdpbg=='),HttpService:Base64Decode('TmFtZTog')..bAeePZDa[HttpService:Base64Decode('UGx1Z2luTmFtZQ==')]..HttpService:Base64Decode('XG4=')..HttpService:Base64Decode('RGVzY3JpcHRpb246IA==')..bAeePZDa[HttpService:Base64Decode('UGx1Z2luRGVzY3JpcHRpb24=')])   		
		end   		
		VqzyhiOD('',val)  	
		VqzyhiOD(string.upper(HttpService:Base64Decode('LS0=')..bAeePZDa[HttpService:Base64Decode('UGx1Z2luTmFtZQ==')]),val,bAeePZDa[HttpService:Base64Decode('UGx1Z2luRGVzY3JpcHRpb24=')])  
		if bAeePZDa[HttpService:Base64Decode('Q29tbWFuZHM=')] then   	
			for i,lGgkoAop in pairs(bAeePZDa[HttpService:Base64Decode('Q29tbWFuZHM=')]) do   		
				local aJmaJXac = ''
				local ktLYCRPN = i   
				local nNvTYekW handleNames()  		
					ktLYCRPN = i 	
					if findCmd(ktLYCRPN..aJmaJXac) then  		
						if CnkskpqQ(aJmaJXac) then 		
							aJmaJXac = aJmaJXac+1
						else		
							aJmaJXac = 1  
						end
						handleNames()   		
					else   	
						ktLYCRPN = ktLYCRPN..aJmaJXac   		
					end  
				end  
				handleNames()
				ksqgBEpo(ktLYCRPN, lGgkoAop[HttpService:Base64Decode('QWxpYXNlcw==')], lGgkoAop[HttpService:Base64Decode('RnVuY3Rpb24=')], val)  	
				if lGgkoAop[HttpService:Base64Decode('TGlzdE5hbWU=')] then
					local lslHYdOC = lGgkoAop.ListName 	
					local fYhNsLoA = {i,unpack(lGgkoAop.Aliases)} 
					for i,lGgkoAop in pairs(fYhNsLoA) do  	
						lslHYdOC = lslHYdOC:gsub(lGgkoAop,lGgkoAop..aJmaJXac)	
					end 		
					VqzyhiOD(lslHYdOC,val,lGgkoAop[HttpService:Base64Decode('RGVzY3JpcHRpb24=')])   	
				else		
					VqzyhiOD(ktLYCRPN,val,lGgkoAop[HttpService:Base64Decode('RGVzY3JpcHRpb24=')])
				end  
			end  	
		end   	
		IndexContents('',true)  		
	elseif bAeePZDa == nil then 	
		bAeePZDa = nil 		
	end 
end   		
nNvTYekW IAhtcNdF()   	
	if PluginsTable ~= nil and type(PluginsTable) == HttpService:Base64Decode('dGFibGU=') then  		
		for i,lGgkoAop in pairs(PluginsTable) do 		
			YxxsRIpF(lGgkoAop,true)   		
		end	
		uVjYfhOI(true) 
	end   	
end   		
AddPlugin.MouseButton1Click:Connect(nNvTYekW()		
	xhvQNOGl(PluginsGUI.FileName.Text)	
end) 	
Exit_3.MouseButton1Click:Connect(nNvTYekW() 		
	PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, -500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   
	FileName.Text = HttpService:Base64Decode('UGx1Z2luIEZpbGUgTmFtZQ==') 	
end)
Add_3.MouseButton1Click:Connect(nNvTYekW()   	
	PluginEditor:TweenPosition(UDim2.new(0.5, -180, 0, 310), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)	
end)
Plugins.MouseButton1Click:Connect(nNvTYekW()  	
	if RVrEDvqm() then 
		PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)		
		wait(0.5)   	
		SettingsHolder.Visible = false 	
	else	
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGlzIHVuYWJsZSB0byB1c2UgcGx1Z2lucyAobWlzc2luZyByZWFkL3dyaXRlZmlsZSk='))		
	end 	
end) 
Close_4.MouseButton1Click:Connect(nNvTYekW() 	
	SettingsHolder.Visible = true		
	PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 
end)   		
local RjmVqAGN = false 
Players.FntTRqLK.OnTeleport:Connect(nNvTYekW(State)  	
	if KeepInfYield and (not RjmVqAGN) and queueteleport then 	
		RjmVqAGN = true
		queueteleport(HttpService:Base64Decode('bG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9FZGdlSVkvaW5maW5pdGV5aWVsZC9tYXN0ZXIvc291cmNlJykpKCk='))		
	end   	
end)  	
ksqgBEpo(HttpService:Base64Decode('YWRkYWxpYXM='),{},nNvTYekW(ctrcbZGI, speaker)  
	if #ctrcbZGI < 2 then return end   		
	local ZfeqJCoZ = string.lower(ctrcbZGI[1])	
	local oTyCiMGH = string.lower(ctrcbZGI[2])
	for i,lGgkoAop in pairs(cmds) do 	
		if lGgkoAop.NAME:lower()==ZfeqJCoZ or vdOcSuCI(lGgkoAop.ALIAS,ZfeqJCoZ) then 	
			customAlias[oTyCiMGH] = lGgkoAop  
			aliases[#aliases + 1] = {CMD = ZfeqJCoZ, ALIAS = oTyCiMGH} 	
			CFyCkJIA(HttpService:Base64Decode('QWxpYXNlcyBNb2RpZmllZA=='),HttpService:Base64Decode('QWRkZWQg')..oTyCiMGH..HttpService:Base64Decode('IGFzIGFuIGFsaWFzIHRvIA==')..ZfeqJCoZ)  		
			KiDAStZA()   	
			NibBzdrf() 
			break  
		end
	end  	
end)   
ksqgBEpo(HttpService:Base64Decode('cmVtb3ZlYWxpYXM='),{},nNvTYekW(ctrcbZGI, speaker)
	if #ctrcbZGI < 1 then return end	
	local oTyCiMGH = string.lower(ctrcbZGI[1])		
	if customAlias[oTyCiMGH] then   	
		local ZfeqJCoZ = customAlias[oTyCiMGH].NAME 	
		customAlias[oTyCiMGH] = nil   
		for i = #aliases,1,-1 do 	
			if aliases[i].ALIAS == tostring(oTyCiMGH) then		
				table.remove(aliases, i)
			end 	
		end   
		CFyCkJIA(HttpService:Base64Decode('QWxpYXNlcyBNb2RpZmllZA=='),HttpService:Base64Decode('UmVtb3ZlZCB0aGUgYWxpYXMg')..oTyCiMGH..HttpService:Base64Decode('IGZyb20g')..ZfeqJCoZ)  		
		KiDAStZA()   	
		NibBzdrf()   
	end  		
end)
ksqgBEpo(HttpService:Base64Decode('Y2xyYWxpYXNlcw=='),{},nNvTYekW(ctrcbZGI, speaker)	
	customAlias = {}   		
	aliases = {}   		
	CFyCkJIA(HttpService:Base64Decode('QWxpYXNlcyBNb2RpZmllZA=='),HttpService:Base64Decode('UmVtb3ZlZCBhbGwgYWxpYXNlcw=='))   	
	KiDAStZA()   	
	NibBzdrf()
end) 
ksqgBEpo(HttpService:Base64Decode('ZGlzY29yZA=='), {HttpService:Base64Decode('c3VwcG9ydA=='), HttpService:Base64Decode('aGVscA==')}, nNvTYekW(ctrcbZGI, speaker) 	
	if everyClipboard then  		
		oHhBFOUT(HttpService:Base64Decode('aHR0cHM6Ly9kaXNjb3JkLmNvbS9pbnZpdGUvZFlIYWc0M2VlVQ=='))		
		CFyCkJIA(HttpService:Base64Decode('RGlzY29yZCBJbnZpdGU='), HttpService:Base64Decode('Q29waWVkIHRvIGNsaXBib2FyZCFcbmRpc2NvcmQuZ2cvZFlIYWc0M2VlVQ=='))   	
	else	
		CFyCkJIA(HttpService:Base64Decode('RGlzY29yZCBJbnZpdGU='), HttpService:Base64Decode('ZGlzY29yZC5nZy9kWUhhZzQzZWVV'))  	
	end   	
	if httprequest then		
		httprequest({	
			Url = HttpService:Base64Decode('aHR0cDovLzEyNy4wLjAuMTo2NDYzL3JwYz92PTE='),	
			Method = HttpService:Base64Decode('UE9TVA=='), 
			Headers = { 		
				[HttpService:Base64Decode('Q29udGVudC1UeXBl')] = HttpService:Base64Decode('YXBwbGljYXRpb24vanNvbg=='),		
				Origin = HttpService:Base64Decode('aHR0cHM6Ly9kaXNjb3JkLmNvbQ==')		
			},   
			Body = HttpService:JSONEncode({	
				ZfeqJCoZ = HttpService:Base64Decode('SU5WSVRFX0JST1dTRVI='),		
				nonce = HttpService:GenerateGUID(false),   		
				ctrcbZGI = {KBKIoRWp = HttpService:Base64Decode('ZFlIYWc0M2VlVQ==')}   
			})
		}) 		
	end
end)  	
ksqgBEpo(HttpService:Base64Decode('a2VlcGl5'), {}, nNvTYekW(ctrcbZGI, speaker)  	
	if queueteleport then   		
		KeepInfYield = true  
		KiDAStZA()
	else 
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHF1ZXVlX29uX3RlbGVwb3J0KQ=='))   		
	end
end)  
ksqgBEpo(HttpService:Base64Decode('dW5rZWVwaXk='), {}, nNvTYekW(ctrcbZGI, speaker) 
	if queueteleport then 		
		KeepInfYield = false
		KiDAStZA()	
	else   
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHF1ZXVlX29uX3RlbGVwb3J0KQ=='))   
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xla2VlcGl5'), {}, nNvTYekW(ctrcbZGI, speaker)		
	if queueteleport then
		KeepInfYield = not KeepInfYield   
		KiDAStZA() 		
	else 
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHF1ZXVlX29uX3RlbGVwb3J0KQ=='))   		
	end  
end) 
local JBCIOVCe = true 
ksqgBEpo(HttpService:Base64Decode('c2VydmVyaW5mbw=='),{HttpService:Base64Decode('aW5mbw=='),HttpService:Base64Decode('c2luZm8=')},nNvTYekW(ctrcbZGI, speaker) 	
	if not JBCIOVCe then return end   		
	JBCIOVCe = false   		
	task.spawn(nNvTYekW() 		
		local WptTntkQ = Instance.new(HttpService:Base64Decode('RnJhbWU='))
		local tcHPQPoB = Instance.new(HttpService:Base64Decode('RnJhbWU='))  	
		local dQPxDAAH = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
		local PthUZGpi = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 		
		local pfDQWlhG = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))  	
		local QwyOPxIw = Instance.new(HttpService:Base64Decode('RnJhbWU='))		
		local inTIqZeb = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   	
		local HHJxeJDB = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 
		local TQuKuvib = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 		
		local FbSemQpA = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   
		local rtbMcKZm = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
		local CgUnHgNG = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   	
		local kfKkxmpZ = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  	
		local YqMdfgHh = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 
		local oiqKSxMg = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  		
		local aAJfXrEy = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))   	
		local hlbQFvTR = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
		local ZlmjoXTk = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))		
		local SxbaOUKX = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
		local MnBGgRDZ = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))  		
		WptTntkQ.FrpOJNKH = UhfdZAQW()   		
		WptTntkQ.Parent = ScaledHolder  
		WptTntkQ.Active = true   
		WptTntkQ.BackgroundTransparency = 1   	
		WptTntkQ.FZxyaMZC = UDim2.new(0.5, -130, 0, -500)  	
		WptTntkQ.eCEGCheh = UDim2.new(0, 250, 0, 20)  
		WptTntkQ.ZIndex = 10	
		Mopqbmpi(WptTntkQ)   		
		tcHPQPoB.FrpOJNKH = HttpService:Base64Decode('c2hhZG93') 		
		tcHPQPoB.Parent = WptTntkQ   		
		tcHPQPoB.BackgroundColor3 = currentShade2	
		tcHPQPoB.BorderSizePixel = 0  	
		tcHPQPoB.eCEGCheh = UDim2.new(0, 250, 0, 20) 		
		tcHPQPoB.ZIndex = 10 	
		table.insert(shade2,tcHPQPoB) 
		dQPxDAAH.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0')		
		dQPxDAAH.Parent = tcHPQPoB   	
		dQPxDAAH.BackgroundTransparency = 1   		
		dQPxDAAH.eCEGCheh = UDim2.new(1, 0, 0.95, 0)  	
		dQPxDAAH.ZIndex = 10   
		dQPxDAAH.Font = Enum.Font.SourceSans 	
		dQPxDAAH.TextSize = 14   
		dQPxDAAH.Text = HttpService:Base64Decode('U2VydmVy')   		
		dQPxDAAH.TextColor3 = currentText1  	
		dQPxDAAH.TextWrapped = true
		table.insert(text1,dQPxDAAH)  
		PthUZGpi.FrpOJNKH = HttpService:Base64Decode('RXhpdA==')		
		PthUZGpi.Parent = tcHPQPoB  	
		PthUZGpi.BackgroundTransparency = 1 
		PthUZGpi.FZxyaMZC = UDim2.new(1, -20, 0, 0)   		
		PthUZGpi.eCEGCheh = UDim2.new(0, 20, 0, 20)
		PthUZGpi.Text = ''
		PthUZGpi.ZIndex = 10	
		pfDQWlhG.Parent = PthUZGpi  	
		pfDQWlhG.BackgroundColor3 = Color3.new(1, 1, 1) 
		pfDQWlhG.BackgroundTransparency = 1  		
		pfDQWlhG.FZxyaMZC = UDim2.new(0, 5, 0, 5)   	
		pfDQWlhG.eCEGCheh = UDim2.new(0, 10, 0, 10) 	
		pfDQWlhG.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n'))  		
		pfDQWlhG.ZIndex = 10   		
		QwyOPxIw.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==')  		
		QwyOPxIw.Parent = WptTntkQ  		
		QwyOPxIw.Active = true	
		QwyOPxIw.BackgroundColor3 = currentShade1  	
		QwyOPxIw.BorderSizePixel = 0		
		QwyOPxIw.FZxyaMZC = UDim2.new(0, 0, 1, 0) 	
		QwyOPxIw.eCEGCheh = UDim2.new(0, 250, 0, 250)   	
		QwyOPxIw.ZIndex = 10  	
		table.insert(shade1,QwyOPxIw)		
		inTIqZeb.FrpOJNKH = HttpService:Base64Decode('VGV4dCBMYWJlbA==')   	
		inTIqZeb.Parent = QwyOPxIw 
		inTIqZeb.BackgroundTransparency = 1  
		inTIqZeb.BorderSizePixel = 0
		inTIqZeb.FZxyaMZC = UDim2.new(0, 5, 0, 80)	
		inTIqZeb.eCEGCheh = UDim2.new(0, 100, 0, 20)		
		inTIqZeb.ZIndex = 10   
		inTIqZeb.Font = Enum.Font.SourceSansLight
		inTIqZeb.TextSize = 20  	
		inTIqZeb.Text = HttpService:Base64Decode('UnVuIFRpbWU6')  	
		inTIqZeb.TextColor3 = currentText1   
		inTIqZeb.TextXAlignment = Enum.TextXAlignment.Left
		table.insert(text1,inTIqZeb)   	
		HHJxeJDB.FrpOJNKH = HttpService:Base64Decode('VGV4dCBMYWJlbDI=')   		
		HHJxeJDB.Parent = QwyOPxIw 
		HHJxeJDB.BackgroundTransparency = 1	
		HHJxeJDB.BorderSizePixel = 0		
		HHJxeJDB.FZxyaMZC = UDim2.new(0, 5, 0, 130) 
		HHJxeJDB.eCEGCheh = UDim2.new(0, 100, 0, 20)   
		HHJxeJDB.ZIndex = 10 	
		HHJxeJDB.Font = Enum.Font.SourceSansLight 		
		HHJxeJDB.TextSize = 20  	
		HHJxeJDB.Text = HttpService:Base64Decode('U3RhdGlzdGljczo=')   
		HHJxeJDB.TextColor3 = currentText1 	
		HHJxeJDB.TextXAlignment = Enum.TextXAlignment.Left  
		table.insert(text1,HHJxeJDB)   
		TQuKuvib.FrpOJNKH = HttpService:Base64Decode('VGV4dCBMYWJlbDM=') 		
		TQuKuvib.Parent = QwyOPxIw  
		TQuKuvib.BackgroundTransparency = 1		
		TQuKuvib.BorderSizePixel = 0 		
		TQuKuvib.FZxyaMZC = UDim2.new(0, 5, 0, 10) 	
		TQuKuvib.eCEGCheh = UDim2.new(0, 100, 0, 20)  
		TQuKuvib.ZIndex = 10   
		TQuKuvib.Font = Enum.Font.SourceSansLight 	
		TQuKuvib.TextSize = 20 	
		TQuKuvib.Text = HttpService:Base64Decode('TG9jYWwgUGxheWVyOg==') 	
		TQuKuvib.TextColor3 = currentText1		
		TQuKuvib.TextXAlignment = Enum.TextXAlignment.Left	
		table.insert(text1,TQuKuvib) 
		FbSemQpA.FrpOJNKH = HttpService:Base64Decode('VGltZQ==')  		
		FbSemQpA.Parent = QwyOPxIw		
		FbSemQpA.BackgroundTransparency = 1  
		FbSemQpA.BorderSizePixel = 0	
		FbSemQpA.FZxyaMZC = UDim2.new(0, 5, 0, 105)
		FbSemQpA.eCEGCheh = UDim2.new(0, 100, 0, 20) 
		FbSemQpA.ZIndex = 10	
		FbSemQpA.Font = Enum.Font.SourceSans 	
		FbSemQpA.FontSize = Enum.FontSize.Size14 
		FbSemQpA.Text = HttpService:Base64Decode('TE9BRElORw==')	
		FbSemQpA.TextColor3 = currentText1 		
		FbSemQpA.TextXAlignment = Enum.TextXAlignment.Left 
		table.insert(text1,FbSemQpA)   		
		rtbMcKZm.FrpOJNKH = HttpService:Base64Decode('YXBwZWFyYW5jZQ==')  
		rtbMcKZm.Parent = QwyOPxIw
		rtbMcKZm.BackgroundTransparency = 1  	
		rtbMcKZm.BorderSizePixel = 0   
		rtbMcKZm.FZxyaMZC = UDim2.new(0, 5, 0, 55)	
		rtbMcKZm.eCEGCheh = UDim2.new(0, 100, 0, 20)  	
		rtbMcKZm.ZIndex = 10	
		rtbMcKZm.Font = Enum.Font.SourceSans 		
		rtbMcKZm.FontSize = Enum.FontSize.Size14	
		rtbMcKZm.Text = HttpService:Base64Decode('QXBwZWFyYW5jZTogTE9BRElORw==')
		rtbMcKZm.TextColor3 = currentText1		
		rtbMcKZm.TextXAlignment = Enum.TextXAlignment.Left  
		table.insert(text1,rtbMcKZm)   		
		CgUnHgNG.FrpOJNKH = HttpService:Base64Decode('bWF4cGxheWVycw==') 
		CgUnHgNG.Parent = QwyOPxIw   		
		CgUnHgNG.BackgroundTransparency = 1   
		CgUnHgNG.BorderSizePixel = 0 
		CgUnHgNG.FZxyaMZC = UDim2.new(0, 5, 0, 175)
		CgUnHgNG.eCEGCheh = UDim2.new(0, 100, 0, 20)		
		CgUnHgNG.ZIndex = 10  		
		CgUnHgNG.Font = Enum.Font.SourceSans 	
		CgUnHgNG.FontSize = Enum.FontSize.Size14  	
		CgUnHgNG.Text = HttpService:Base64Decode('TE9BRElORw==') 	
		CgUnHgNG.TextColor3 = currentText1  		
		CgUnHgNG.TextXAlignment = Enum.TextXAlignment.Left  		
		table.insert(text1,CgUnHgNG)  		
		kfKkxmpZ.FrpOJNKH = HttpService:Base64Decode('bmFtZQ==')  
		kfKkxmpZ.Parent = QwyOPxIw   	
		kfKkxmpZ.BackgroundTransparency = 1  	
		kfKkxmpZ.BorderSizePixel = 0  	
		kfKkxmpZ.FZxyaMZC = UDim2.new(0, 5, 0, 215) 
		kfKkxmpZ.eCEGCheh = UDim2.new(0, 240, 0, 30)		
		kfKkxmpZ.ZIndex = 10   
		kfKkxmpZ.Font = Enum.Font.SourceSans	
		kfKkxmpZ.FontSize = Enum.FontSize.Size14  		
		kfKkxmpZ.Text = HttpService:Base64Decode('UGxhY2UgTmFtZTogTE9BRElORw==')   	
		kfKkxmpZ.TextColor3 = currentText1  	
		kfKkxmpZ.TextWrapped = true 	
		kfKkxmpZ.TextXAlignment = Enum.TextXAlignment.Left	
		kfKkxmpZ.TextYAlignment = Enum.TextYAlignment.Top 		
		table.insert(text1,kfKkxmpZ) 
		YqMdfgHh.FrpOJNKH = HttpService:Base64Decode('cGxhY2VpZA==')   		
		YqMdfgHh.Parent = QwyOPxIw	
		YqMdfgHh.BackgroundTransparency = 1   
		YqMdfgHh.BorderSizePixel = 0
		YqMdfgHh.FZxyaMZC = UDim2.new(0, 5, 0, 195)   		
		YqMdfgHh.eCEGCheh = UDim2.new(0, 100, 0, 20) 
		YqMdfgHh.ZIndex = 10 
		YqMdfgHh.Font = Enum.Font.SourceSans 		
		YqMdfgHh.FontSize = Enum.FontSize.Size14
		YqMdfgHh.Text = HttpService:Base64Decode('UGxhY2UgSUQ6IExPQURJTkc=')		
		YqMdfgHh.TextColor3 = currentText1   
		YqMdfgHh.TextXAlignment = Enum.TextXAlignment.Left  		
		table.insert(text1,YqMdfgHh)	
		oiqKSxMg.FrpOJNKH = HttpService:Base64Decode('cGxheWVyaWQ=')  	
		oiqKSxMg.Parent = QwyOPxIw   
		oiqKSxMg.BackgroundTransparency = 1 		
		oiqKSxMg.BorderSizePixel = 0   
		oiqKSxMg.FZxyaMZC = UDim2.new(0, 5, 0, 35)   		
		oiqKSxMg.eCEGCheh = UDim2.new(0, 100, 0, 20)   	
		oiqKSxMg.ZIndex = 10		
		oiqKSxMg.Font = Enum.Font.SourceSans  	
		oiqKSxMg.FontSize = Enum.FontSize.Size14  
		oiqKSxMg.Text = HttpService:Base64Decode('UGxheWVyIElEOiBMT0FESU5H')   
		oiqKSxMg.TextColor3 = currentText1 
		oiqKSxMg.TextXAlignment = Enum.TextXAlignment.Left  
		table.insert(text1,oiqKSxMg)	
		aAJfXrEy.FrpOJNKH = HttpService:Base64Decode('cGxheWVycw==')   	
		aAJfXrEy.Parent = QwyOPxIw   		
		aAJfXrEy.BackgroundTransparency = 1 	
		aAJfXrEy.BorderSizePixel = 0   	
		aAJfXrEy.FZxyaMZC = UDim2.new(0, 5, 0, 155)		
		aAJfXrEy.eCEGCheh = UDim2.new(0, 100, 0, 20)	
		aAJfXrEy.ZIndex = 10  	
		aAJfXrEy.Font = Enum.Font.SourceSans   	
		aAJfXrEy.FontSize = Enum.FontSize.Size14   	
		aAJfXrEy.Text = HttpService:Base64Decode('TE9BRElORw==')  	
		aAJfXrEy.TextColor3 = currentText1   		
		aAJfXrEy.TextXAlignment = Enum.TextXAlignment.Left	
		table.insert(text1,aAJfXrEy)  
		hlbQFvTR.FrpOJNKH = HttpService:Base64Decode('Q29weUFwcA==')  	
		hlbQFvTR.Parent = QwyOPxIw  	
		hlbQFvTR.BackgroundColor3 = currentShade2  		
		hlbQFvTR.BorderSizePixel = 0  
		hlbQFvTR.FZxyaMZC = UDim2.new(0, 210, 0, 55)   	
		hlbQFvTR.eCEGCheh = UDim2.new(0, 35, 0, 20) 		
		hlbQFvTR.Font = Enum.Font.SourceSans  
		hlbQFvTR.TextSize = 14 	
		hlbQFvTR.Text = HttpService:Base64Decode('Q29weQ==') 		
		hlbQFvTR.TextColor3 = currentText1   		
		hlbQFvTR.ZIndex = 10  
		table.insert(shade2,hlbQFvTR)
		table.insert(text1,hlbQFvTR)   		
		ZlmjoXTk.FrpOJNKH = HttpService:Base64Decode('Q29weVBscklE')		
		ZlmjoXTk.Parent = QwyOPxIw   		
		ZlmjoXTk.BackgroundColor3 = currentShade2 	
		ZlmjoXTk.BorderSizePixel = 0		
		ZlmjoXTk.FZxyaMZC = UDim2.new(0, 210, 0, 35)  	
		ZlmjoXTk.eCEGCheh = UDim2.new(0, 35, 0, 20)   	
		ZlmjoXTk.Font = Enum.Font.SourceSans   	
		ZlmjoXTk.TextSize = 14  
		ZlmjoXTk.Text = HttpService:Base64Decode('Q29weQ==')  	
		ZlmjoXTk.TextColor3 = currentText1  
		ZlmjoXTk.ZIndex = 10 
		table.insert(shade2,ZlmjoXTk) 	
		table.insert(text1,ZlmjoXTk)  		
		SxbaOUKX.FrpOJNKH = HttpService:Base64Decode('Q29weVBsY0lE')
		SxbaOUKX.Parent = QwyOPxIw  		
		SxbaOUKX.BackgroundColor3 = currentShade2	
		SxbaOUKX.BorderSizePixel = 0		
		SxbaOUKX.FZxyaMZC = UDim2.new(0, 210, 0, 195)  
		SxbaOUKX.eCEGCheh = UDim2.new(0, 35, 0, 20)  		
		SxbaOUKX.Font = Enum.Font.SourceSans  		
		SxbaOUKX.TextSize = 14
		SxbaOUKX.Text = HttpService:Base64Decode('Q29weQ==')		
		SxbaOUKX.TextColor3 = currentText1  
		SxbaOUKX.ZIndex = 10
		table.insert(shade2,SxbaOUKX) 		
		table.insert(text1,SxbaOUKX)  
		MnBGgRDZ.FrpOJNKH = HttpService:Base64Decode('Q29weVBsY05hbWU=') 	
		MnBGgRDZ.Parent = QwyOPxIw  		
		MnBGgRDZ.BackgroundColor3 = currentShade2 		
		MnBGgRDZ.BorderSizePixel = 0
		MnBGgRDZ.FZxyaMZC = UDim2.new(0, 210, 0, 215)   
		MnBGgRDZ.eCEGCheh = UDim2.new(0, 35, 0, 20)
		MnBGgRDZ.Font = Enum.Font.SourceSans   	
		MnBGgRDZ.TextSize = 14  		
		MnBGgRDZ.Text = HttpService:Base64Decode('Q29weQ==')  	
		MnBGgRDZ.TextColor3 = currentText1  	
		MnBGgRDZ.ZIndex = 10  		
		table.insert(shade2,MnBGgRDZ)   
		table.insert(text1,MnBGgRDZ) 		
		local vZuFEbPp = QwyOPxIw 
		WptTntkQ:TweenPosition(UDim2.new(0.5, -130, 0, 100), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
		wait(0.5)  	
		PthUZGpi.MouseButton1Click:Connect(nNvTYekW() 
			WptTntkQ:TweenPosition(UDim2.new(0.5, -130, 0, -500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
			wait(0.6)  
			WptTntkQ:Destroy()  	
			JBCIOVCe = true 	
		end)  	
		local hDIJGarn = MarketplaceService:GetProductInfo(PlaceId) 	
		vZuFEbPp.kfKkxmpZ.Text = HttpService:Base64Decode('UGxhY2UgTmFtZTog') .. hDIJGarn.FrpOJNKH  
		vZuFEbPp.oiqKSxMg.Text = HttpService:Base64Decode('UGxheWVyIElEOiA=') ..speaker.UserId 	
		vZuFEbPp.CgUnHgNG.Text = Players.MaxPlayers.. HttpService:Base64Decode('IFBsYXllcnMgTWF4')
		vZuFEbPp.YqMdfgHh.Text = HttpService:Base64Decode('UGxhY2UgSUQ6IA==') ..PlaceId   		
		hlbQFvTR.MouseButton1Click:Connect(nNvTYekW()   		
			oHhBFOUT(speaker.CharacterAppearanceId)  	
		end)   	
		ZlmjoXTk.MouseButton1Click:Connect(nNvTYekW()  		
			oHhBFOUT(speaker.UserId) 		
		end)  
		SxbaOUKX.MouseButton1Click:Connect(nNvTYekW()   		
			oHhBFOUT(PlaceId) 	
		end)   		
		MnBGgRDZ.MouseButton1Click:Connect(nNvTYekW()  		
			oHhBFOUT(hDIJGarn.FrpOJNKH)   		
		end)  	
		repeat	
			aAJfXrEy = Players:GetPlayers()  		
			vZuFEbPp.aAJfXrEy.Text = #aAJfXrEy.. HttpService:Base64Decode('IFBsYXllcihzKQ==') 
			vZuFEbPp.rtbMcKZm.Text = HttpService:Base64Decode('QXBwZWFyYW5jZTog') ..speaker.CharacterAppearanceId   		
			local CpsQdmrT = math.floor(workspace.DistributedGameTime)  
			local RYscAfQS = math.floor(workspace.DistributedGameTime / 60)		
			local eEdyNpBx = math.floor(workspace.DistributedGameTime / 60 / 60)
			local CpsQdmrT = CpsQdmrT - (RYscAfQS * 60) 	
			local RYscAfQS = RYscAfQS - (eEdyNpBx * 60) 
			if eEdyNpBx < 1 then if RYscAfQS < 1 then 
					vZuFEbPp.FbSemQpA.Text = CpsQdmrT .. HttpService:Base64Decode('IFNlY29uZChzKQ==') else   
					vZuFEbPp.FbSemQpA.Text = RYscAfQS .. HttpService:Base64Decode('IE1pbnV0ZShzKSwg') .. CpsQdmrT .. HttpService:Base64Decode('IFNlY29uZChzKQ==')  		
				end   		
			else 		
				vZuFEbPp.FbSemQpA.Text = eEdyNpBx .. HttpService:Base64Decode('IEhvdXIocyksIA==') .. RYscAfQS .. HttpService:Base64Decode('IE1pbnV0ZShzKSwg') .. CpsQdmrT .. HttpService:Base64Decode('IFNlY29uZChzKQ==') 
			end 
			wait(1)   
		until vZuFEbPp.Parent == nil  		
	end)  	
end)	
ksqgBEpo(HttpService:Base64Decode('am9iaWQ='), {}, nNvTYekW(ctrcbZGI, speaker)   		
    oHhBFOUT(HttpService:Base64Decode('cm9ibG94Oi8vcGxhY2VJZD0=') .. PlaceId .. HttpService:Base64Decode('JmdhbWVJbnN0YW5jZUlkPQ==') .. JobId)   
end)
ksqgBEpo(HttpService:Base64Decode('bm90aWZ5am9iaWQ='),{},nNvTYekW(ctrcbZGI, speaker) 		
	CFyCkJIA(HttpService:Base64Decode('Sm9iSWQgLyBQbGFjZUlk'),JobId..HttpService:Base64Decode('IC8g')..PlaceId)   
end)  
ksqgBEpo(HttpService:Base64Decode('YnJlYWtsb29wcw=='),{HttpService:Base64Decode('YnJlYWs=')},nNvTYekW(ctrcbZGI, speaker)
	cuKGwbRM = tick()   	
end)  	
ksqgBEpo(HttpService:Base64Decode('Z2FtZXRw'),{HttpService:Base64Decode('Z2FtZXRlbGVwb3J0')},nNvTYekW(ctrcbZGI, speaker)   	
	uLVoGRKr:Teleport(ctrcbZGI[1])  	
end)  	
ksqgBEpo(HttpService:Base64Decode('cmVqb2lu'), {HttpService:Base64Decode('cmo=')}, nNvTYekW(ctrcbZGI, speaker)   
	if #Players:GetPlayers() <= 1 then   
		Players.FntTRqLK:Kick(HttpService:Base64Decode('XG5SZWpvaW5pbmcuLi4='))   	
		wait()		
		uLVoGRKr:Teleport(PlaceId, Players.FntTRqLK)   		
	else 		
		uLVoGRKr:TeleportToPlaceInstance(PlaceId, JobId, Players.FntTRqLK)  		
	end 
end) 
ksqgBEpo(HttpService:Base64Decode('YXV0b3Jlam9pbg=='), {HttpService:Base64Decode('YXV0b3Jq')}, nNvTYekW(ctrcbZGI, speaker)   
	GuiService.ErrorMessageChanged:Connect(nNvTYekW()   
		vAOGaDPV(HttpService:Base64Decode('cmVqb2lu'))
	end)  		
	CFyCkJIA(HttpService:Base64Decode('QXV0byBSZWpvaW4='), HttpService:Base64Decode('QXV0byByZWpvaW4gZW5hYmxlZA=='))	
end)   	
ksqgBEpo(HttpService:Base64Decode('c2VydmVyaG9w'), {HttpService:Base64Decode('c2hvcA==')}, nNvTYekW(ctrcbZGI, speaker) 	
    local oPhitUZz = {}   		
    local vOCaQOqm = game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9nYW1lcy5yb2Jsb3guY29tL3YxL2dhbWVzLw==') .. PlaceId .. HttpService:Base64Decode('L3NlcnZlcnMvUHVibGljP3NvcnRPcmRlcj1EZXNjJmxpbWl0PTEwMCZleGNsdWRlRnVsbEdhbWVzPXRydWU='))   		
    local wYpDshLu = HttpService:JSONDecode(vOCaQOqm) 
    if wYpDshLu and wYpDshLu.DnDwCpji then   	
        for i, lGgkoAop in next, wYpDshLu.DnDwCpji do 		
            if type(lGgkoAop) == HttpService:Base64Decode('dGFibGU=') and tonumber(lGgkoAop.playing) and tonumber(lGgkoAop.maxPlayers) and lGgkoAop.playing < lGgkoAop.maxPlayers and lGgkoAop.PmJFSHQD ~= JobId then  		
                table.insert(oPhitUZz, 1, lGgkoAop.PmJFSHQD)  		
            end 	
        end 		
    end  	
    if #oPhitUZz > 0 then  		
        uLVoGRKr:TeleportToPlaceInstance(PlaceId, oPhitUZz[math.random(1, #oPhitUZz)], Players.FntTRqLK) 	
    else 
        return CFyCkJIA(HttpService:Base64Decode('U2VydmVyaG9w'), HttpService:Base64Decode('Q291bGRuJ3QgZmluZCBhIHNlcnZlci4=')) 
    end   
end)   	
ksqgBEpo(HttpService:Base64Decode('ZXhpdA=='), {}, nNvTYekW(ctrcbZGI, speaker)  		
    game:Shutdown()   
end)		
local uBwiTkan = nil  
ksqgBEpo(HttpService:Base64Decode('bm9jbGlw'),{},nNvTYekW(ctrcbZGI, speaker) 
	Clip = false 
	wait(0.1)   		
	local nNvTYekW NoclipLoop()
		if Clip == false and speaker.lZReEeCX ~= nil then 	
			for OpEnJPoA, child in pairs(speaker.lZReEeCX:GetDescendants()) do   	
				if child:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and child.CanCollide == true and child.FrpOJNKH ~= floatName then
					child.CanCollide = false  	
				end	
			end 		
		end  	
	end  
	uBwiTkan = RunService.Stepped:Connect(NoclipLoop)  
	if ctrcbZGI[1] and ctrcbZGI[1] == HttpService:Base64Decode('bm9ub3RpZnk=') then return end  		
	CFyCkJIA(HttpService:Base64Decode('Tm9jbGlw'),HttpService:Base64Decode('Tm9jbGlwIEVuYWJsZWQ=')) 	
end)		
ksqgBEpo(HttpService:Base64Decode('Y2xpcA=='),{HttpService:Base64Decode('dW5ub2NsaXA=')},nNvTYekW(ctrcbZGI, speaker)  
	if uBwiTkan then 	
		uBwiTkan:Disconnect()   
	end  	
	Clip = true		
	if ctrcbZGI[1] and ctrcbZGI[1] == HttpService:Base64Decode('bm9ub3RpZnk=') then return end
	CFyCkJIA(HttpService:Base64Decode('Tm9jbGlw'),HttpService:Base64Decode('Tm9jbGlwIERpc2FibGVk'))
end)  		
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlbm9jbGlw'),{},nNvTYekW(ctrcbZGI, speaker)		
	if Clip then  	
		vAOGaDPV(HttpService:Base64Decode('bm9jbGlw')) 		
	else   	
		vAOGaDPV(HttpService:Base64Decode('Y2xpcA=='))	
	end 	
end)  	
FLYING = false  
QEfly = true
iyflyspeed = 1 
vehicleflyspeed = 1 		
nNvTYekW wAdSfHVE(vfly)  		
	repeat wait() until Players.FntTRqLK and Players.FntTRqLK.lZReEeCX and wyxfunbJ(Players.FntTRqLK.lZReEeCX) and Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))   		
	repeat wait() until IYMouse
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end	
	local zQkdjHrv = wyxfunbJ(Players.FntTRqLK.lZReEeCX)  		
	local jqWdLbcE = {sxlzcAIs = 0, CSucsSET = 0, L = 0, R = 0, Q = 0, UyWliikj = 0} 	
	local rXpLrJuK = {sxlzcAIs = 0, CSucsSET = 0, L = 0, R = 0, Q = 0, UyWliikj = 0}  		
	local ExUxuMKS = 0   
	local nNvTYekW FLY()  	
		FLYING = true  		
		local LwkqzTdM = Instance.new(HttpService:Base64Decode('Qm9keUd5cm8='))
		local AaHfstUN = Instance.new(HttpService:Base64Decode('Qm9keVZlbG9jaXR5'))   	
		LwkqzTdM.P = 9e4		
		LwkqzTdM.Parent = zQkdjHrv 
		AaHfstUN.Parent = zQkdjHrv   	
		LwkqzTdM.maxTorque = Vector3.new(9e9, 9e9, 9e9)   
		LwkqzTdM.cframe = zQkdjHrv.CFrame  		
		AaHfstUN.velocity = Vector3.new(0, 0, 0)   		
		AaHfstUN.maxForce = Vector3.new(9e9, 9e9, 9e9)   	
		task.spawn(nNvTYekW()   	
			repeat wait()  	
				if not vfly and Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then		
					Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = true 		
				end   		
				if jqWdLbcE.L + jqWdLbcE.R ~= 0 or jqWdLbcE.sxlzcAIs + jqWdLbcE.CSucsSET ~= 0 or jqWdLbcE.Q + jqWdLbcE.UyWliikj ~= 0 then   		
					ExUxuMKS = 50 
				elseif not (jqWdLbcE.L + jqWdLbcE.R ~= 0 or jqWdLbcE.sxlzcAIs + jqWdLbcE.CSucsSET ~= 0 or jqWdLbcE.Q + jqWdLbcE.UyWliikj ~= 0) and ExUxuMKS ~= 0 then  		
					ExUxuMKS = 0   		
				end  
				if (jqWdLbcE.L + jqWdLbcE.R) ~= 0 or (jqWdLbcE.sxlzcAIs + jqWdLbcE.CSucsSET) ~= 0 or (jqWdLbcE.Q + jqWdLbcE.UyWliikj) ~= 0 then
					AaHfstUN.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (jqWdLbcE.sxlzcAIs + jqWdLbcE.CSucsSET)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(jqWdLbcE.L + jqWdLbcE.R, (jqWdLbcE.sxlzcAIs + jqWdLbcE.CSucsSET + jqWdLbcE.Q + jqWdLbcE.UyWliikj) * 0.2, 0).mkjkJNCq) - workspace.CurrentCamera.CoordinateFrame.mkjkJNCq)) * ExUxuMKS   
					rXpLrJuK = {sxlzcAIs = jqWdLbcE.sxlzcAIs, CSucsSET = jqWdLbcE.CSucsSET, L = jqWdLbcE.L, R = jqWdLbcE.R} 		
				elseif (jqWdLbcE.L + jqWdLbcE.R) == 0 and (jqWdLbcE.sxlzcAIs + jqWdLbcE.CSucsSET) == 0 and (jqWdLbcE.Q + jqWdLbcE.UyWliikj) == 0 and ExUxuMKS ~= 0 then  		
					AaHfstUN.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (rXpLrJuK.sxlzcAIs + rXpLrJuK.CSucsSET)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(rXpLrJuK.L + rXpLrJuK.R, (rXpLrJuK.sxlzcAIs + rXpLrJuK.CSucsSET + jqWdLbcE.Q + jqWdLbcE.UyWliikj) * 0.2, 0).mkjkJNCq) - workspace.CurrentCamera.CoordinateFrame.mkjkJNCq)) * ExUxuMKS	
				else		
					AaHfstUN.velocity = Vector3.new(0, 0, 0) 
				end   		
				LwkqzTdM.cframe = workspace.CurrentCamera.CoordinateFrame		
			until not FLYING
			jqWdLbcE = {sxlzcAIs = 0, CSucsSET = 0, L = 0, R = 0, Q = 0, UyWliikj = 0} 	
			rXpLrJuK = {sxlzcAIs = 0, CSucsSET = 0, L = 0, R = 0, Q = 0, UyWliikj = 0}   
			ExUxuMKS = 0		
			LwkqzTdM:Destroy()		
			AaHfstUN:Destroy()  	
			if Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then		
				Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = false	
			end 
		end)  		
	end  
	flyKeyDown = IYMouse.KeyDown:Connect(nNvTYekW(KEY)  
		if KEY:lower() == HttpService:Base64Decode('dw==') then 	
			jqWdLbcE.sxlzcAIs = (vfly and vehicleflyspeed or iyflyspeed) 	
		elseif KEY:lower() == HttpService:Base64Decode('cw==') then 		
			jqWdLbcE.CSucsSET = - (vfly and vehicleflyspeed or iyflyspeed)   		
		elseif KEY:lower() == HttpService:Base64Decode('YQ==') then		
			jqWdLbcE.L = - (vfly and vehicleflyspeed or iyflyspeed)   		
		elseif KEY:lower() == HttpService:Base64Decode('ZA==') then 		
			jqWdLbcE.R = (vfly and vehicleflyspeed or iyflyspeed)	
		elseif QEfly and KEY:lower() == HttpService:Base64Decode('ZQ==') then   	
			jqWdLbcE.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
		elseif QEfly and KEY:lower() == HttpService:Base64Decode('cQ==') then
			jqWdLbcE.UyWliikj = -(vfly and vehicleflyspeed or iyflyspeed)*2  	
		end	
		pcall(nNvTYekW() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)   	
	end)		
	flyKeyUp = IYMouse.KeyUp:Connect(nNvTYekW(KEY)
		if KEY:lower() == HttpService:Base64Decode('dw==') then		
			jqWdLbcE.sxlzcAIs = 0   
		elseif KEY:lower() == HttpService:Base64Decode('cw==') then   		
			jqWdLbcE.CSucsSET = 0  	
		elseif KEY:lower() == HttpService:Base64Decode('YQ==') then   	
			jqWdLbcE.L = 0
		elseif KEY:lower() == HttpService:Base64Decode('ZA==') then   		
			jqWdLbcE.R = 0   	
		elseif KEY:lower() == HttpService:Base64Decode('ZQ==') then  
			jqWdLbcE.Q = 0  		
		elseif KEY:lower() == HttpService:Base64Decode('cQ==') then   
			jqWdLbcE.UyWliikj = 0		
		end 		
	end)   
	FLY()
end   
nNvTYekW NUSEHeea()		
	FLYING = false   	
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end  		
	if Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then   	
		Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = false 	
	end  		
	pcall(nNvTYekW() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end) 		
end 	
local LKfQZUeh = UhfdZAQW()   		
local PfdDAxMq = UhfdZAQW()   
local mQcgbzLE  		
local pboctIUA 	
local LdqDGJtS = nNvTYekW(speaker)
	pcall(nNvTYekW()   	
		FLYING = false 	
		local IglyvNYH = wyxfunbJ(speaker.lZReEeCX)  		
		IglyvNYH:FindFirstChild(LKfQZUeh):Destroy()   	
		IglyvNYH:FindFirstChild(PfdDAxMq):Destroy() 
		speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = false   
		mQcgbzLE:Disconnect()
		pboctIUA:Disconnect() 		
	end)   	
end 	
local ZAOORsSf = nNvTYekW(speaker, vfly) 
	LdqDGJtS(speaker) 		
	FLYING = true 	
	local IglyvNYH = wyxfunbJ(speaker.lZReEeCX)  		
	local yOQvcFgm = workspace.CurrentCamera		
	local OWuRZSrm = Vector3.new() 	
	local mCRWRYms = Vector3.new(0, 0, 0) 	
	local XtRkrXat = Vector3.new(9e9, 9e9, 9e9)		
	local sCxziQxy = require(speaker.PlayerScripts:WaitForChild(HttpService:Base64Decode('UGxheWVyTW9kdWxl')):WaitForChild(HttpService:Base64Decode('Q29udHJvbE1vZHVsZQ=='))) 	
	local jAyRvGIu = Instance.new(HttpService:Base64Decode('Qm9keVZlbG9jaXR5'))	
	jAyRvGIu.FrpOJNKH = LKfQZUeh		
	jAyRvGIu.Parent = IglyvNYH 
	jAyRvGIu.MaxForce = mCRWRYms   
	jAyRvGIu.Velocity = mCRWRYms  
	local eoDcFLtr = Instance.new(HttpService:Base64Decode('Qm9keUd5cm8='))   		
	eoDcFLtr.FrpOJNKH = PfdDAxMq 		
	eoDcFLtr.Parent = IglyvNYH 		
	eoDcFLtr.MaxTorque = XtRkrXat	
	eoDcFLtr.P = 1000  	
	eoDcFLtr.wIWlwmst = 50 	
	mQcgbzLE = speaker.CharacterAdded:Connect(nNvTYekW()		
		local jAyRvGIu = Instance.new(HttpService:Base64Decode('Qm9keVZlbG9jaXR5'))   		
		jAyRvGIu.FrpOJNKH = LKfQZUeh	
		jAyRvGIu.Parent = IglyvNYH   
		jAyRvGIu.MaxForce = mCRWRYms
		jAyRvGIu.Velocity = mCRWRYms   	
		local eoDcFLtr = Instance.new(HttpService:Base64Decode('Qm9keUd5cm8='))  		
		eoDcFLtr.FrpOJNKH = PfdDAxMq   	
		eoDcFLtr.Parent = IglyvNYH   		
		eoDcFLtr.MaxTorque = XtRkrXat 
		eoDcFLtr.P = 1000  		
		eoDcFLtr.wIWlwmst = 50		
	end)	
	pboctIUA = RunService.RenderStepped:Connect(nNvTYekW()  	
		IglyvNYH = wyxfunbJ(speaker.lZReEeCX)  	
		yOQvcFgm = workspace.CurrentCamera
		if speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and IglyvNYH and IglyvNYH:FindFirstChild(LKfQZUeh) and IglyvNYH:FindFirstChild(PfdDAxMq) then 		
			local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  		
			local OCPXKmGv = IglyvNYH:FindFirstChild(LKfQZUeh)  	
			local YuVMiLMy = IglyvNYH:FindFirstChild(PfdDAxMq)  	
			OCPXKmGv.MaxForce = XtRkrXat 
			YuVMiLMy.MaxTorque = XtRkrXat		
			if not vfly then LYfpysRB.PlatformStand = true end 	
			YuVMiLMy.CFrame = yOQvcFgm.CoordinateFrame 
			OCPXKmGv.Velocity = OWuRZSrm   	
			local YUkRLyjr = sCxziQxy:GetMoveVector()		
			if YUkRLyjr.IqWNKzOD > 0 then 		
				OCPXKmGv.Velocity = OCPXKmGv.Velocity + yOQvcFgm.CFrame.RightVector * (YUkRLyjr.IqWNKzOD * ((vfly and vehicleflyspeed or iyflyspeed) * 50))   	
			end		
			if YUkRLyjr.IqWNKzOD < 0 then   
				OCPXKmGv.Velocity = OCPXKmGv.Velocity + yOQvcFgm.CFrame.RightVector * (YUkRLyjr.IqWNKzOD * ((vfly and vehicleflyspeed or iyflyspeed) * 50)) 
			end   	
			if YUkRLyjr.DadYeUNF > 0 then
				OCPXKmGv.Velocity = OCPXKmGv.Velocity - yOQvcFgm.CFrame.LookVector * (YUkRLyjr.DadYeUNF * ((vfly and vehicleflyspeed or iyflyspeed) * 50))  
			end   		
			if YUkRLyjr.DadYeUNF < 0 then 		
				OCPXKmGv.Velocity = OCPXKmGv.Velocity - yOQvcFgm.CFrame.LookVector * (YUkRLyjr.DadYeUNF * ((vfly and vehicleflyspeed or iyflyspeed) * 50))  	
			end 	
		end  	
	end)   
end 		
ksqgBEpo(HttpService:Base64Decode('Zmx5'),{},nNvTYekW(ctrcbZGI, speaker) 	
	if not IsOnMobile then  		
		NUSEHeea() 		
		wait()  
		wAdSfHVE()  
	else  
		ZAOORsSf(speaker)   		
	end
	if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then		
		iyflyspeed = ctrcbZGI[1]
	end	
end)   	
ksqgBEpo(HttpService:Base64Decode('Zmx5c3BlZWQ='),{HttpService:Base64Decode('Zmx5c3A=')},nNvTYekW(ctrcbZGI, speaker) 
	local xbqBGeeX = ctrcbZGI[1] or 1  
	if CnkskpqQ(xbqBGeeX) then	
		iyflyspeed = xbqBGeeX   		
	end 	
end)  	
ksqgBEpo(HttpService:Base64Decode('dW5mbHk='),{HttpService:Base64Decode('bm9mbHk='),HttpService:Base64Decode('bm92Zmx5'),HttpService:Base64Decode('dW52ZWhpY2xlZmx5'),HttpService:Base64Decode('bm92ZWhpY2xlZmx5'),HttpService:Base64Decode('dW52Zmx5')},nNvTYekW(ctrcbZGI, speaker) 	
	if not IsOnMobile then NUSEHeea() else LdqDGJtS(speaker) end   		
end) 
ksqgBEpo(HttpService:Base64Decode('dmZseQ=='),{HttpService:Base64Decode('dmVoaWNsZWZseQ==')},nNvTYekW(ctrcbZGI, speaker)   	
	if not IsOnMobile then 	
		NUSEHeea()   		
		wait()		
		wAdSfHVE(true)  
	else   		
		ZAOORsSf(speaker, true)
	end		
	if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then  	
		vehicleflyspeed = ctrcbZGI[1]
	end		
end) 
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xldmZseQ=='),{},nNvTYekW(ctrcbZGI, speaker) 
	if FLYING then 		
		if not IsOnMobile then NUSEHeea() else LdqDGJtS(speaker) end
	else	
		if not IsOnMobile then wAdSfHVE(true) else ZAOORsSf(speaker, true) end   
	end
end) 		
ksqgBEpo(HttpService:Base64Decode('dmZseXNwZWVk'),{HttpService:Base64Decode('dmZseXNw'),HttpService:Base64Decode('dmVoaWNsZWZseXNwZWVk'),HttpService:Base64Decode('dmVoaWNsZWZseXNw')},nNvTYekW(ctrcbZGI, speaker) 	
	local xbqBGeeX = ctrcbZGI[1] or 1   
	if CnkskpqQ(xbqBGeeX) then   		
		vehicleflyspeed = xbqBGeeX		
	end	
end)   
ksqgBEpo(HttpService:Base64Decode('cWVmbHk='),{HttpService:Base64Decode('Zmx5cWU=')},nNvTYekW(ctrcbZGI, speaker)  		
	if ctrcbZGI[1] == HttpService:Base64Decode('ZmFsc2U=') then 	
		QEfly = false 	
	else   	
		QEfly = true 		
	end  
end)
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlZmx5'),{},nNvTYekW(ctrcbZGI, speaker)
	if FLYING then   		
		if not IsOnMobile then NUSEHeea() else LdqDGJtS(speaker) end   		
	else   	
		if not IsOnMobile then wAdSfHVE() else ZAOORsSf(speaker) end 	
	end 		
end) 		
CFspeed = 50   		
ksqgBEpo(HttpService:Base64Decode('Y2ZyYW1lZmx5'), {HttpService:Base64Decode('Y2ZseQ==')}, nNvTYekW(ctrcbZGI, speaker)		
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = true   	
	local yrKsYgVR = speaker.lZReEeCX:WaitForChild(HttpService:Base64Decode('SGVhZA=='))  	
	yrKsYgVR.Anchored = true 	
	if CFloop then CFloop:Disconnect() end  		
	CFloop = RunService.Heartbeat:Connect(nNvTYekW(deltaTime)	
		local jCjSwbrD = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).MoveDirection * (CFspeed * deltaTime)  
		local VqwiVEqu = yrKsYgVR.CFrame  		
		local ehbnbxAt = workspace.CurrentCamera.CFrame   
		local wgtagxrX = VqwiVEqu:ToObjectSpace(ehbnbxAt).FZxyaMZC   	
		ehbnbxAt = ehbnbxAt * CFrame.new(-wgtagxrX.IqWNKzOD, -wgtagxrX.jtGagefg, -wgtagxrX.DadYeUNF + 1)	
		local dCyYDkBM = ehbnbxAt.FZxyaMZC   		
		local lGgvQVQS = VqwiVEqu.FZxyaMZC 	
		local dTTnlBcI = CFrame.new(dCyYDkBM, Vector3.new(lGgvQVQS.IqWNKzOD, dCyYDkBM.jtGagefg, lGgvQVQS.DadYeUNF)):VectorToObjectSpace(jCjSwbrD)   
		yrKsYgVR.CFrame = CFrame.new(lGgvQVQS) * (ehbnbxAt - dCyYDkBM) * CFrame.new(dTTnlBcI)
	end)  
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5jZnJhbWVmbHk='),{HttpService:Base64Decode('dW5jZmx5')},nNvTYekW(ctrcbZGI, speaker)	
	if CFloop then  
		CFloop:Disconnect()  
		speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = false   		
		local yrKsYgVR = speaker.lZReEeCX:WaitForChild(HttpService:Base64Decode('SGVhZA=='))
		yrKsYgVR.Anchored = false  
	end		
end)   
ksqgBEpo(HttpService:Base64Decode('Y2ZyYW1lZmx5c3BlZWQ='),{HttpService:Base64Decode('Y2ZseXNwZWVk')},nNvTYekW(ctrcbZGI, speaker)   	
	if CnkskpqQ(ctrcbZGI[1]) then   
		CFspeed = ctrcbZGI[1] 
	end  
end)  
Floating = false 		
floatName = UhfdZAQW()	
ksqgBEpo(HttpService:Base64Decode('ZmxvYXQ='), {HttpService:Base64Decode('cGxhdGZvcm0=')},nNvTYekW(ctrcbZGI, speaker)
	Floating = true
	local TjygLeHq = speaker.lZReEeCX   		
	if TjygLeHq and not TjygLeHq:FindFirstChild(floatName) then   
		task.spawn(nNvTYekW()	
			local PZGtBlvp = Instance.new(HttpService:Base64Decode('UGFydA=='))
			PZGtBlvp.FrpOJNKH = floatName   	
			PZGtBlvp.Parent = TjygLeHq  	
			PZGtBlvp.Transparency = 1 	
			PZGtBlvp.eCEGCheh = Vector3.new(2,0.2,1.5)   
			PZGtBlvp.Anchored = true		
			local SAjiRSby = -3.1   
			PZGtBlvp.CFrame = wyxfunbJ(TjygLeHq).CFrame * CFrame.new(0,SAjiRSby,0) 	
			CFyCkJIA(HttpService:Base64Decode('RmxvYXQ='),HttpService:Base64Decode('RmxvYXQgRW5hYmxlZCAoUSA9IGRvd24gJiBFID0gdXAp'))		
			qUp = IYMouse.KeyUp:Connect(nNvTYekW(KEY)   
				if KEY == HttpService:Base64Decode('cQ==') then  		
					SAjiRSby = SAjiRSby + 0.5	
				end  		
			end) 
			eUp = IYMouse.KeyUp:Connect(nNvTYekW(KEY)
				if KEY == HttpService:Base64Decode('ZQ==') then   	
					SAjiRSby = SAjiRSby - 1.5   
				end
			end)  		
			qDown = IYMouse.KeyDown:Connect(nNvTYekW(KEY)  	
				if KEY == HttpService:Base64Decode('cQ==') then  		
					SAjiRSby = SAjiRSby - 0.5   
				end   
			end) 		
			eDown = IYMouse.KeyDown:Connect(nNvTYekW(KEY)		
				if KEY == HttpService:Base64Decode('ZQ==') then 
					SAjiRSby = SAjiRSby + 1.5  		
				end   		
			end) 
			floatDied = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Died:Connect(nNvTYekW() 	
				FloatingFunc:Disconnect()   	
				PZGtBlvp:Destroy() 	
				qUp:Disconnect()	
				eUp:Disconnect() 		
				qDown:Disconnect() 		
				eDown:Disconnect()	
				floatDied:Disconnect()  	
			end)  
			local nNvTYekW FloatPadLoop()   
				if TjygLeHq:FindFirstChild(floatName) and wyxfunbJ(TjygLeHq) then 
					PZGtBlvp.CFrame = wyxfunbJ(TjygLeHq).CFrame * CFrame.new(0,SAjiRSby,0)   
				else   
					FloatingFunc:Disconnect()   
					PZGtBlvp:Destroy() 
					qUp:Disconnect() 	
					eUp:Disconnect()		
					qDown:Disconnect()  		
					eDown:Disconnect() 
					floatDied:Disconnect() 
				end  		
			end				
			FloatingFunc = RunService.Heartbeat:Connect(FloatPadLoop)  
		end)  	
	end 
end)   
ksqgBEpo(HttpService:Base64Decode('dW5mbG9hdA=='),{HttpService:Base64Decode('bm9mbG9hdA=='),HttpService:Base64Decode('dW5wbGF0Zm9ybQ=='),HttpService:Base64Decode('bm9wbGF0Zm9ybQ==')},nNvTYekW(ctrcbZGI, speaker)  		
	Floating = false   
	local TjygLeHq = speaker.lZReEeCX   	
	CFyCkJIA(HttpService:Base64Decode('RmxvYXQ='),HttpService:Base64Decode('RmxvYXQgRGlzYWJsZWQ='))	
	if TjygLeHq:FindFirstChild(floatName) then
		TjygLeHq:FindFirstChild(floatName):Destroy() 
	end   	
	if floatDied then   		
		FloatingFunc:Disconnect()
		qUp:Disconnect()   		
		eUp:Disconnect()  
		qDown:Disconnect()
		eDown:Disconnect() 
		floatDied:Disconnect()	
	end   
end)   
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlZmxvYXQ='),{},nNvTYekW(ctrcbZGI, speaker)  
	if Floating then  
		vAOGaDPV(HttpService:Base64Decode('dW5mbG9hdA==')) 		
	else  
		vAOGaDPV(HttpService:Base64Decode('ZmxvYXQ=')) 		
	end  		
end)  
swimming = false 		
local rllGjLSA = workspace.Gravity	
local SBkGjrPf = nil  
ksqgBEpo(HttpService:Base64Decode('c3dpbQ=='),{},nNvTYekW(ctrcbZGI, speaker)		
	if not swimming and speaker and speaker.lZReEeCX and speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) then 		
		rllGjLSA = workspace.Gravity		
		workspace.Gravity = 0   
		local CaYrYvOx = nNvTYekW()   	
			workspace.Gravity = rllGjLSA   	
			swimming = false 		
		end  		
		local kcVEGFqM = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  	
		gravReset = kcVEGFqM.Died:Connect(CaYrYvOx)
		local rupsSADW = Enum.HumanoidStateType:GetEnumItems()  		
		table.remove(rupsSADW, table.find(rupsSADW, Enum.HumanoidStateType.None))  
		for i, lGgkoAop in pairs(rupsSADW) do  
			kcVEGFqM:SetStateEnabled(lGgkoAop, false)   		
		end 		
		kcVEGFqM:ChangeState(Enum.HumanoidStateType.Swimming)   	
		SBkGjrPf = RunService.Heartbeat:Connect(nNvTYekW()  
			pcall(nNvTYekW() 	
				speaker.lZReEeCX.HumanoidRootPart.Velocity = ((kcVEGFqM.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space)) and speaker.lZReEeCX.HumanoidRootPart.Velocity or Vector3.new()) 		
			end)
		end)  
		swimming = true 	
	end   		
end)  		
ksqgBEpo(HttpService:Base64Decode('dW5zd2lt'),{HttpService:Base64Decode('bm9zd2lt')},nNvTYekW(ctrcbZGI, speaker)   		
	if speaker and speaker.lZReEeCX and speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) then   	
		workspace.Gravity = rllGjLSA		
		swimming = false 		
		if gravReset then   
			gravReset:Disconnect()  		
		end   	
		if SBkGjrPf ~= nil then 	
			SBkGjrPf:Disconnect() 	
			SBkGjrPf = nil		
		end 	
		local kcVEGFqM = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))	
		local rupsSADW = Enum.HumanoidStateType:GetEnumItems()  		
		table.remove(rupsSADW, table.find(rupsSADW, Enum.HumanoidStateType.None))   		
		for i, lGgkoAop in pairs(rupsSADW) do 	
			kcVEGFqM:SetStateEnabled(lGgkoAop, true) 	
		end		
	end 		
end) 	
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlc3dpbQ=='),{},nNvTYekW(ctrcbZGI, speaker) 		
	if swimming then   	
		vAOGaDPV(HttpService:Base64Decode('dW5zd2lt'))   	
	else  		
		vAOGaDPV(HttpService:Base64Decode('c3dpbQ==')) 
	end 	
end) 		
ksqgBEpo(HttpService:Base64Decode('c2V0d2F5cG9pbnQ='),{HttpService:Base64Decode('c3dw'),HttpService:Base64Decode('c2V0d3A='),HttpService:Base64Decode('c3Bvcw=='),HttpService:Base64Decode('c2F2ZXBvc2l0aW9u'),HttpService:Base64Decode('c2F2ZXBvcw==')},nNvTYekW(ctrcbZGI, speaker)		
	local BNkFsuMs = tostring(vqgOCmxq(1))  	
	if wyxfunbJ(speaker.lZReEeCX) then  
		CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('Q3JlYXRlZCB3YXlwb2ludDog')..vqgOCmxq(1))   		
		local WRfBppPv = wyxfunbJ(speaker.lZReEeCX)		
		WayPoints[#WayPoints + 1] = {NAME = BNkFsuMs, COORD = {math.floor(WRfBppPv.FZxyaMZC.IqWNKzOD), math.floor(WRfBppPv.FZxyaMZC.jtGagefg), math.floor(WRfBppPv.FZxyaMZC.DadYeUNF)}, GAME = PlaceId}   		
		if AllWaypoints ~= nil then   	
			AllWaypoints[#AllWaypoints + 1] = {NAME = BNkFsuMs, COORD = {math.floor(WRfBppPv.FZxyaMZC.IqWNKzOD), math.floor(WRfBppPv.FZxyaMZC.jtGagefg), math.floor(WRfBppPv.FZxyaMZC.DadYeUNF)}, GAME = PlaceId}   		
		end   	
	end	  
	RRNEPPPZ() 	
	KiDAStZA()  		
end)  	
ksqgBEpo(HttpService:Base64Decode('d2F5cG9pbnRwb3M='),{HttpService:Base64Decode('d3Bw'),HttpService:Base64Decode('c2V0d2F5cG9pbnRwb3NpdGlvbg=='),HttpService:Base64Decode('c2V0cG9z'),HttpService:Base64Decode('c2V0d2F5cG9pbnQ='),HttpService:Base64Decode('c2V0d2F5cG9pbnRwb3M=')},nNvTYekW(ctrcbZGI, speaker)
	local BNkFsuMs = tostring(vqgOCmxq(1))
	if wyxfunbJ(speaker.lZReEeCX) then   
		CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('Q3JlYXRlZCB3YXlwb2ludDog')..vqgOCmxq(1)) 	
		WayPoints[#WayPoints + 1] = {NAME = BNkFsuMs, COORD = {ctrcbZGI[2], ctrcbZGI[3], ctrcbZGI[4]}, GAME = PlaceId}
		if AllWaypoints ~= nil then  		
			AllWaypoints[#AllWaypoints + 1] = {NAME = BNkFsuMs, COORD = {ctrcbZGI[2], ctrcbZGI[3], ctrcbZGI[4]}, GAME = PlaceId}
		end 
	end	  
	RRNEPPPZ() 		
	KiDAStZA()   
end)  		
ksqgBEpo(HttpService:Base64Decode('d2F5cG9pbnRz'),{HttpService:Base64Decode('cG9zaXRpb25z')},nNvTYekW(ctrcbZGI, speaker)   	
	if wlkOpLaR == false then wlkOpLaR = true  
		Settings:TweenPosition(UDim2.new(0, 0, 0, 45), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 	
		CMDsF.Visible = false  
	end   		
	KeybindsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)  
	AliasesFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil) 
	PluginsFrame:TweenPosition(UDim2.new(0, 0, 0, 175), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)		
	PositionsFrame:TweenPosition(UDim2.new(0, 0, 0, 0), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   		
	wait(0.5)   		
	SettingsHolder.Visible = false   		
	nOQhdRSl()
end)   		
waypointParts = {}   
ksqgBEpo(HttpService:Base64Decode('c2hvd3dheXBvaW50cw=='),{HttpService:Base64Decode('c2hvd3dw'),HttpService:Base64Decode('c2hvd3dwcw==')},nNvTYekW(ctrcbZGI, speaker) 		
	vAOGaDPV(HttpService:Base64Decode('aGlkZXdheXBvaW50cw=='))		
	wait()  	
	for i,OpEnJPoA in pairs(WayPoints) do   		
		local NCBjKlfQ = WayPoints[i].COORD[1]	
		local WPqLVvwO = WayPoints[i].COORD[2]		
		local oMVjZjcn = WayPoints[i].COORD[3]	
		local odHrkVop = Instance.new(HttpService:Base64Decode('UGFydA=='))   	
		odHrkVop.eCEGCheh = Vector3.new(5,5,5)  
		odHrkVop.CFrame = CFrame.new(NCBjKlfQ,WPqLVvwO,oMVjZjcn) 
		odHrkVop.Parent = workspace	
		odHrkVop.Anchored = true   		
		odHrkVop.CanCollide = false 	
		table.insert(waypointParts,odHrkVop)   		
		local OCmaCfpS = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50'))  	
		OCmaCfpS.Adornee = odHrkVop		
		OCmaCfpS.AlwaysOnTop = true   
		OCmaCfpS.ZIndex = 10  		
		OCmaCfpS.eCEGCheh = odHrkVop.eCEGCheh  	
		OCmaCfpS.Parent = odHrkVop
	end		
	for i,lGgkoAop in pairs(pWayPoints) do   
		local OCmaCfpS = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50'))   	
		OCmaCfpS.Adornee = pWayPoints[i].COORD[1] 		
		OCmaCfpS.AlwaysOnTop = true   		
		OCmaCfpS.ZIndex = 10   
		OCmaCfpS.eCEGCheh = pWayPoints[i].COORD[1].eCEGCheh		
		OCmaCfpS.Parent = pWayPoints[i].COORD[1]   	
		table.insert(waypointParts,OCmaCfpS)   		
	end 	
end)  	
ksqgBEpo(HttpService:Base64Decode('aGlkZXdheXBvaW50cw=='),{HttpService:Base64Decode('aGlkZXdw'),HttpService:Base64Decode('aGlkZXdwcw==')},nNvTYekW(ctrcbZGI, speaker)  
	for i,lGgkoAop in pairs(waypointParts) do   
		lGgkoAop:Destroy()   	
	end  
	waypointParts = {}  		
end)  	
ksqgBEpo(HttpService:Base64Decode('d2F5cG9pbnQ='),{HttpService:Base64Decode('d3A='),HttpService:Base64Decode('bHBvcw=='),HttpService:Base64Decode('bG9hZHBvc2l0aW9u'),HttpService:Base64Decode('bG9hZHBvcw==')},nNvTYekW(ctrcbZGI, speaker)  	
	local BNkFsuMs = tostring(vqgOCmxq(1))  
	if speaker.lZReEeCX then 
		for i,OpEnJPoA in pairs(WayPoints) do  	
			if tostring(WayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then  		
				local NCBjKlfQ = WayPoints[i].COORD[1] 
				local WPqLVvwO = WayPoints[i].COORD[2] 
				local oMVjZjcn = WayPoints[i].COORD[3] 		
				wyxfunbJ(speaker.lZReEeCX).CFrame = CFrame.new(NCBjKlfQ,WPqLVvwO,oMVjZjcn)		
			end  
		end  		
		for i,OpEnJPoA in pairs(pWayPoints) do   	
			if tostring(pWayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then   		
				wyxfunbJ(speaker.lZReEeCX).CFrame = CFrame.new(pWayPoints[i].COORD[1].FZxyaMZC)		
			end		
		end   	
	end 	
end)  
tweenSpeed = 1   		
ksqgBEpo(HttpService:Base64Decode('dHdlZW5zcGVlZA=='),{HttpService:Base64Decode('dHNwZWVk')},nNvTYekW(ctrcbZGI, speaker)   
	local REkKfbMK = ctrcbZGI[1] or 1   
	if tonumber(REkKfbMK) then   
		tweenSpeed = tonumber(REkKfbMK)	
	end 	
end)		
ksqgBEpo(HttpService:Base64Decode('dHdlZW53YXlwb2ludA=='),{HttpService:Base64Decode('dHdw')},nNvTYekW(ctrcbZGI, speaker)  		
	local BNkFsuMs = tostring(vqgOCmxq(1))  		
	if speaker.lZReEeCX then		
		for i,OpEnJPoA in pairs(WayPoints) do  
			local NCBjKlfQ = WayPoints[i].COORD[1]
			local WPqLVvwO = WayPoints[i].COORD[2]   		
			local oMVjZjcn = WayPoints[i].COORD[3]  
			if tostring(WayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then   		
				TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(NCBjKlfQ,WPqLVvwO,oMVjZjcn)}):Play() 	
			end   	
		end   		
		for i,OpEnJPoA in pairs(pWayPoints) do	
			if tostring(pWayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then   
				TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pWayPoints[i].COORD[1].FZxyaMZC)}):Play()		
			end 	
		end  
	end 	
end)  
ksqgBEpo(HttpService:Base64Decode('d2Fsa3Rvd2F5cG9pbnQ='),{HttpService:Base64Decode('d3R3cA==')},nNvTYekW(ctrcbZGI, speaker) 
	local BNkFsuMs = tostring(vqgOCmxq(1))	
	if speaker.lZReEeCX then   		
		for i,OpEnJPoA in pairs(WayPoints) do  		
			local NCBjKlfQ = WayPoints[i].COORD[1]  
			local WPqLVvwO = WayPoints[i].COORD[2]   		
			local oMVjZjcn = WayPoints[i].COORD[3]
			if tostring(WayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then	
				if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then		
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false  		
					wait(.1)   	
				end   	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).WalkToPoint = Vector3.new(NCBjKlfQ,WPqLVvwO,oMVjZjcn)  
			end   	
		end 		
		for i,OpEnJPoA in pairs(pWayPoints) do   
			if tostring(pWayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then 		
				if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then   		
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false	
					wait(.1)  		
				end 	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).WalkToPoint = Vector3.new(pWayPoints[i].COORD[1].FZxyaMZC)	
			end  
		end   
	end 
end) 
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRld2F5cG9pbnQ='),{HttpService:Base64Decode('ZHdw'),HttpService:Base64Decode('ZHBvcw=='),HttpService:Base64Decode('ZGVsZXRlcG9zaXRpb24='),HttpService:Base64Decode('ZGVsZXRlcG9z')},nNvTYekW(ctrcbZGI, speaker)   		
	for i,lGgkoAop in pairs(WayPoints) do 
		if lGgkoAop.NAME:lower() == tostring(vqgOCmxq(1)):lower() then   	
			CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('RGVsZXRlZCB3YXlwb2ludDog') .. lGgkoAop.NAME)	
			table.remove(WayPoints, i)
		end 		
	end  		
	if AllWaypoints ~= nil and #AllWaypoints > 0 then
		for i,lGgkoAop in pairs(AllWaypoints) do  	
			if lGgkoAop.NAME:lower() == tostring(vqgOCmxq(1)):lower() then   		
				if not lGgkoAop.GAME or lGgkoAop.GAME == PlaceId then   
					table.remove(AllWaypoints, i) 	
				end	
			end  		
		end 
	end 	
	for i,lGgkoAop in pairs(pWayPoints) do  		
		if lGgkoAop.NAME:lower() == tostring(vqgOCmxq(1)):lower() then 		
			CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('RGVsZXRlZCB3YXlwb2ludDog') .. lGgkoAop.NAME) 		
			table.remove(pWayPoints, i) 	
		end	
	end  		
	RRNEPPPZ()   	
	KiDAStZA()  		
end)   	
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJ3YXlwb2ludHM='),{HttpService:Base64Decode('Y3dw'),HttpService:Base64Decode('Y2xlYXJwb3NpdGlvbnM='),HttpService:Base64Decode('Y3Bvcw=='),HttpService:Base64Decode('Y2xlYXJwb3M=')},nNvTYekW(ctrcbZGI, speaker)
	WayPoints = {}		
	pWayPoints = {}
	RRNEPPPZ()   
	KiDAStZA() 		
	AllWaypoints = {}  	
	CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('UmVtb3ZlZCBhbGwgd2F5cG9pbnRz'))  	
end)   
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJnYW1ld2F5cG9pbnRz'),{HttpService:Base64Decode('Y2dhbWV3cA==')},nNvTYekW(ctrcbZGI, speaker)  	
	for i,lGgkoAop in pairs(WayPoints) do  
		if lGgkoAop.GAME == PlaceId then  	
			table.remove(WayPoints, i)   		
		end  	
	end	
	if AllWaypoints ~= nil and #AllWaypoints > 0 then  		
		for i,lGgkoAop in pairs(AllWaypoints) do   
			if lGgkoAop.GAME == PlaceId then   		
				table.remove(AllWaypoints, i)   		
			end   		
		end  
	end
	for i,lGgkoAop in pairs(pWayPoints) do
		if lGgkoAop.GAME == PlaceId then 		
			table.remove(pWayPoints, i) 	
		end
	end   		
	RRNEPPPZ()   	
	KiDAStZA()   	
	CFyCkJIA(HttpService:Base64Decode('TW9kaWZpZWQgV2F5cG9pbnRz'),HttpService:Base64Decode('RGVsZXRlZCBnYW1lIHdheXBvaW50cw=='))		
end) 
local KEFNURhj = {  	
	[HttpService:Base64Decode('aW52ZW50b3J5')] = Enum.CoreGuiType.Ehivqwak,  	
	[HttpService:Base64Decode('bGVhZGVyYm9hcmQ=')] = Enum.CoreGuiType.PlayerList,  	
	[HttpService:Base64Decode('ZW1vdGVz')] = Enum.CoreGuiType.EmotesMenu
}  
for OpEnJPoA, enumItem in ipairs(Enum.CoreGuiType:GetEnumItems()) do  		
	KEFNURhj[enumItem.FrpOJNKH:lower()] = enumItem  
end 		
ksqgBEpo(HttpService:Base64Decode('ZW5hYmxl'),{},nNvTYekW(ctrcbZGI, speaker)	
	local UMiuNWpO = ctrcbZGI[1] and ctrcbZGI[1]:lower()   		
	if UMiuNWpO then		
		if UMiuNWpO == HttpService:Base64Decode('cmVzZXQ=') then 		
			StarterGui:SetCore(HttpService:Base64Decode('UmVzZXRCdXR0b25DYWxsYmFjaw=='), true)   
		else 
			local UpXohyWS = KEFNURhj[UMiuNWpO]
			if UpXohyWS then  	
				StarterGui:SetCoreGuiEnabled(UpXohyWS, true)  
			end		
		end   	
	end  		
end)   
ksqgBEpo(HttpService:Base64Decode('ZGlzYWJsZQ=='),{},nNvTYekW(ctrcbZGI, speaker)   		
	local UMiuNWpO = ctrcbZGI[1] and ctrcbZGI[1]:lower()	
	if UMiuNWpO then  	
		if UMiuNWpO == HttpService:Base64Decode('cmVzZXQ=') then	
			StarterGui:SetCore(HttpService:Base64Decode('UmVzZXRCdXR0b25DYWxsYmFjaw=='), false)  
		else 	
			local UpXohyWS = KEFNURhj[UMiuNWpO]	
			if UpXohyWS then 		
				StarterGui:SetCoreGuiEnabled(UpXohyWS, false)		
			end 		
		end 	
	end
end) 
local BMKvnUkF = {}
ksqgBEpo(HttpService:Base64Decode('c2hvd2d1aXM='),{},nNvTYekW(ctrcbZGI, speaker)  
	for i,lGgkoAop in pairs(PlayerGui:GetDescendants()) do 
		if (lGgkoAop:IsA(HttpService:Base64Decode('RnJhbWU=')) or lGgkoAop:IsA(HttpService:Base64Decode('SW1hZ2VMYWJlbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))) and not lGgkoAop.Visible then		
			lGgkoAop.Visible = true   
			if not vdOcSuCI(BMKvnUkF,lGgkoAop) then 
				table.insert(BMKvnUkF,lGgkoAop) 	
			end	
		end 		
	end
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5zaG93Z3Vpcw=='),{},nNvTYekW(ctrcbZGI, speaker)   
	for i,lGgkoAop in pairs(BMKvnUkF) do 		
		lGgkoAop.Visible = false   		
	end		
	BMKvnUkF = {} 	
end)   
local HXqtqkvg = {}	
ksqgBEpo(HttpService:Base64Decode('aGlkZWd1aXM='),{},nNvTYekW(ctrcbZGI, speaker)   		
	for i,lGgkoAop in pairs(PlayerGui:GetDescendants()) do  
		if (lGgkoAop:IsA(HttpService:Base64Decode('RnJhbWU=')) or lGgkoAop:IsA(HttpService:Base64Decode('SW1hZ2VMYWJlbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('U2Nyb2xsaW5nRnJhbWU='))) and lGgkoAop.Visible then   
			lGgkoAop.Visible = false  
			if not vdOcSuCI(HXqtqkvg,lGgkoAop) then 		
				table.insert(HXqtqkvg,lGgkoAop)	
			end  	
		end 	
	end  		
end)	
ksqgBEpo(HttpService:Base64Decode('dW5oaWRlZ3Vpcw=='),{},nNvTYekW(ctrcbZGI, speaker)   	
	for i,lGgkoAop in pairs(HXqtqkvg) do   		
		lGgkoAop.Visible = true 	
local uvjesUqF = ''
local function CbCTiypg() return 60 end
local function wBsjFQyX() return 36 end   	
	end		
	HXqtqkvg = {} 	
end)  	
nNvTYekW uPTMsgaO()  		
	pcall(nNvTYekW()	
		local gbsbnTEE = PlayerGui:GetGuiObjectsAtPosition(IYMouse.IqWNKzOD, IYMouse.jtGagefg)   	
		for OpEnJPoA, gui in pairs(gbsbnTEE) do		
			if gui.Visible == true then 	
				gui:Destroy()  		
			end 
		end	
	end)
end   		
local gCKQhTXn   	
ksqgBEpo(HttpService:Base64Decode('Z3VpZGVsZXRl'),{},nNvTYekW(ctrcbZGI, speaker)  
	gCKQhTXn = UserInputService.InputBegan:Connect(nNvTYekW(UMiuNWpO, gameProcessedEvent) 		
		if not gameProcessedEvent then   	
			if UMiuNWpO.KeyCode == Enum.KeyCode.Backspace then  		
				uPTMsgaO() 		
			end   	
		end 	
	end)  		
	CFyCkJIA(HttpService:Base64Decode('R1VJIERlbGV0ZSBFbmFibGVk'),HttpService:Base64Decode('SG92ZXIgb3ZlciBhIEdVSSBhbmQgcHJlc3MgYmFja3NwYWNlIHRvIGRlbGV0ZSBpdA==')) 	
end)   		
ksqgBEpo(HttpService:Base64Decode('dW5ndWlkZWxldGU='),{HttpService:Base64Decode('bm9ndWlkZWxldGU=')},nNvTYekW(ctrcbZGI, speaker)  	
	if gCKQhTXn then gCKQhTXn:Disconnect() end 		
	CFyCkJIA(HttpService:Base64Decode('R1VJIERlbGV0ZSBEaXNhYmxlZA=='),HttpService:Base64Decode('R1VJIGJhY2tzcGFjZSBkZWxldGUgaGFzIGJlZW4gZGlzYWJsZWQ=')) 		
end)   
local gcaNUDrq = StayOpen	
ksqgBEpo(HttpService:Base64Decode('aGlkZWl5'),{},nNvTYekW(ctrcbZGI, speaker)   		
	HksFoigl = true
	gcaNUDrq = StayOpen   	
	if StayOpen == true then   	
		StayOpen = false 
		On.BackgroundTransparency = 1		
	end   	
	minimizeNum = 0		
	hcvNZbvV() 		
	if not (ctrcbZGI[1] and tostring(ctrcbZGI[1]) == HttpService:Base64Decode('bm9ub3RpZnk=')) then CFyCkJIA(HttpService:Base64Decode('SVkgSGlkZGVu'),HttpService:Base64Decode('WW91IGNhbiBwcmVzcyB0aGUgcHJlZml4IGtleSB0byBhY2Nlc3MgdGhlIGNvbW1hbmQgYmFy')) end  		
end) 
ksqgBEpo(HttpService:Base64Decode('c2hvd2l5'),{HttpService:Base64Decode('dW5oaWRlaXk=')},nNvTYekW(ctrcbZGI, speaker) 	
	HksFoigl = false	
	minimizeNum = -20   	
	if gcaNUDrq then   
		nOQhdRSl()  	
		StayOpen = true 		
		On.BackgroundTransparency = 0  		
	else 		
		hcvNZbvV() 		
	end   	
end)  
ksqgBEpo(HttpService:Base64Decode('cmVj'), {HttpService:Base64Decode('cmVjb3Jk')}, nNvTYekW(ctrcbZGI, speaker)   	
	return COREGUI:ToggleRecording()
end)   		
ksqgBEpo(HttpService:Base64Decode('c2NyZWVuc2hvdA=='), {HttpService:Base64Decode('c2NybnNob3Q=')}, nNvTYekW(ctrcbZGI, speaker)
	return COREGUI:TakeScreenshot()   		
end)   		
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlZnM='), {HttpService:Base64Decode('dG9nZ2xlZnVsbHNjcmVlbg==')}, nNvTYekW(ctrcbZGI, speaker)
	return GuiService:ToggleFullscreen()  
end)  
ksqgBEpo(HttpService:Base64Decode('aW5zcGVjdA=='), {HttpService:Base64Decode('ZXhhbWluZQ==')}, nNvTYekW(ctrcbZGI, speaker)  
	for OpEnJPoA, lGgkoAop in ipairs(KpWujDEJ(ctrcbZGI[1], speaker)) do		
		GuiService:CloseInspectMenu() 		
		GuiService:InspectPlayerFromUserId(Players[lGgkoAop].UserId)		
	end 	
end)	
ksqgBEpo(HttpService:Base64Decode('c2F2ZWdhbWU='), {HttpService:Base64Decode('c2F2ZXBsYWNl')}, nNvTYekW(ctrcbZGI, speaker)
    if saveinstance then  
        CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='), HttpService:Base64Decode('RG93bmxvYWRpbmcgZ2FtZS4gVGhpcyB3aWxsIHRha2UgYSB3aGlsZQ=='))  	
        saveinstance()		
        CFyCkJIA(HttpService:Base64Decode('R2FtZSBTYXZlZA=='), HttpService:Base64Decode('U2F2ZWQgcGxhY2UgdG8gdGhlIHdvcmtzcGFjZSBmb2xkZXIgd2l0aGluIHlvdXIgZXhwbG9pdCBmb2xkZXIu'))   	
    else   	
        CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHNhdmVpbnN0YW5jZSk='))   	
    end 
end)   		
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJlcnJvcg=='),{HttpService:Base64Decode('Y2xlYXJlcnJvcnM=')},nNvTYekW(ctrcbZGI, speaker)
	GuiService:ClearError()
end)   
ksqgBEpo(HttpService:Base64Decode('Y2xpZW50YW50aWtpY2s='),{HttpService:Base64Decode('YW50aWtpY2s=')},nNvTYekW(ctrcbZGI, speaker)   		
	if not hookmetamethod then    	
	    return CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGhvb2ttZXRhbWV0aG9kKQ=='))   
	end  	
	local FntTRqLK = Players.FntTRqLK		
	local jYwUsrbL 		
	local YOKMIUWw		
	local HAmJTSgg   	
	if hookfunction then 		
	    HAmJTSgg = hookfunction(FntTRqLK.Kick, nNvTYekW() end) 
	end   		
	jYwUsrbL = hookmetamethod(game, HttpService:Base64Decode('X19pbmRleA=='), nNvTYekW(LYfofnMK, method)   
	    if LYfofnMK == FntTRqLK and method:lower() == HttpService:Base64Decode('a2ljaw==') then	
	        return error(HttpService:Base64Decode('RXhwZWN0ZWQgJzonIG5vdCAnLicgY2FsbGluZyBtZW1iZXIgZnVuY3Rpb24gS2ljaw=='), 2)   		
	    end  
	    return jYwUsrbL(LYfofnMK, method)  
	end)		
	YOKMIUWw = hookmetamethod(game, HttpService:Base64Decode('X19uYW1lY2FsbA=='), nNvTYekW(LYfofnMK, ...) 
	    if LYfofnMK == FntTRqLK and getnamecallmethod():lower() == HttpService:Base64Decode('a2ljaw==') then   		
	        return   		
	    end	
	    return YOKMIUWw(LYfofnMK, ...) 
	end)	
	CFyCkJIA(HttpService:Base64Decode('Q2xpZW50IEFudGlraWNr'),HttpService:Base64Decode('Q2xpZW50IGFudGkga2ljayBpcyBub3cgYWN0aXZlIChvbmx5IGVmZmVjdGl2ZSBvbiBsb2NhbHNjcmlwdCBraWNrKQ=='))
end) 	
allow_rj = true   	
ksqgBEpo(HttpService:Base64Decode('Y2xpZW50YW50aXRlbGVwb3J0'),{HttpService:Base64Decode('YW50aXRlbGVwb3J0')},nNvTYekW(ctrcbZGI, speaker)		
	if not hookmetamethod then  	
		return CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGhvb2ttZXRhbWV0aG9kKQ=='))  
	end   		
	local uLVoGRKr = uLVoGRKr  	
	local jYwUsrbL 
	local YOKMIUWw  	
	jYwUsrbL = hookmetamethod(game, HttpService:Base64Decode('X19pbmRleA=='), nNvTYekW(LYfofnMK, method)   
		if LYfofnMK == uLVoGRKr then		
			if method:lower() == HttpService:Base64Decode('dGVsZXBvcnQ=') then  		
				return error(HttpService:Base64Decode('RXhwZWN0ZWQgJzonIG5vdCAnLicgY2FsbGluZyBtZW1iZXIgZnVuY3Rpb24gS2ljaw=='), 2)   
			elseif method == HttpService:Base64Decode('VGVsZXBvcnRUb1BsYWNlSW5zdGFuY2U=') then 	
				return error(HttpService:Base64Decode('RXhwZWN0ZWQgJzonIG5vdCAnLicgY2FsbGluZyBtZW1iZXIgZnVuY3Rpb24gVGVsZXBvcnRUb1BsYWNlSW5zdGFuY2U='), 2) 		
			end  	
		end  	
		return jYwUsrbL(LYfofnMK, method)  		
	end)  
	YOKMIUWw = hookmetamethod(game, HttpService:Base64Decode('X19uYW1lY2FsbA=='), nNvTYekW(LYfofnMK, ...)		
		if LYfofnMK == uLVoGRKr and getnamecallmethod():lower() == HttpService:Base64Decode('dGVsZXBvcnQ=') or getnamecallmethod() == HttpService:Base64Decode('VGVsZXBvcnRUb1BsYWNlSW5zdGFuY2U=') then   		
			return   	
		end   
		return YOKMIUWw(LYfofnMK, ...) 
	end)	
	CFyCkJIA(HttpService:Base64Decode('Q2xpZW50IEFudGlUUA=='),HttpService:Base64Decode('Q2xpZW50IGFudGkgdGVsZXBvcnQgaXMgbm93IGFjdGl2ZSAob25seSBlZmZlY3RpdmUgb24gbG9jYWxzY3JpcHQgdGVsZXBvcnQp')) 
end)  	
ksqgBEpo(HttpService:Base64Decode('YWxsb3dyZWpvaW4='),{HttpService:Base64Decode('YWxsb3dyag==')},nNvTYekW(ctrcbZGI, speaker)   	
	if ctrcbZGI[1] and ctrcbZGI[1] == HttpService:Base64Decode('ZmFsc2U=') then	
		allow_rj = false 	
		CFyCkJIA(HttpService:Base64Decode('Q2xpZW50IEFudGlUUA=='),HttpService:Base64Decode('QWxsb3cgcmVqb2luIHNldCB0byBmYWxzZQ=='))   	
	else		
		allow_rj = true   
		CFyCkJIA(HttpService:Base64Decode('Q2xpZW50IEFudGlUUA=='),HttpService:Base64Decode('QWxsb3cgcmVqb2luIHNldCB0byB0cnVl'))   		
	end   
end)		
ksqgBEpo(HttpService:Base64Decode('Y2FuY2VsdGVsZXBvcnQ='),{HttpService:Base64Decode('Y2FuY2VsdHA=')},nNvTYekW(ctrcbZGI, speaker)  		
	uLVoGRKr:TeleportCancel()		
end) 	
ksqgBEpo(HttpService:Base64Decode('dm9sdW1l'),{HttpService:Base64Decode('dm9s')},nNvTYekW(ctrcbZGI, speaker)
	local YlotVHhG = ctrcbZGI[1]/10		
	UserSettings():GetService(HttpService:Base64Decode('VXNlckdhbWVTZXR0aW5ncw==')).MasterVolume = YlotVHhG   
end)		
ksqgBEpo(HttpService:Base64Decode('YW50aWxhZw=='),{HttpService:Base64Decode('Ym9vc3RmcHM='),HttpService:Base64Decode('bG93Z3JhcGhpY3M=')},nNvTYekW(ctrcbZGI, speaker) 
	local jXBHZpoj = workspace:FindFirstChildOfClass(HttpService:Base64Decode('VGVycmFpbg=='))   		
	jXBHZpoj.WaterWaveSize = 0
	jXBHZpoj.WaterWaveSpeed = 0   	
	jXBHZpoj.WaterReflectance = 0 	
	jXBHZpoj.WaterTransparency = 1
	Lighting.GlobalShadows = false 		
	Lighting.FogEnd = 9e9		
	Lighting.FogStart = 9e9 
	settings().Rendering.QualityLevel = 1 		
	for i,lGgkoAop in pairs(game:GetDescendants()) do 
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then
			lGgkoAop.Material = HttpService:Base64Decode('UGxhc3RpYw==')  
			lGgkoAop.Reflectance = 0	
			lGgkoAop.BackSurface = HttpService:Base64Decode('U21vb3RoTm9PdXRsaW5lcw==')  		
			lGgkoAop.BottomSurface = HttpService:Base64Decode('U21vb3RoTm9PdXRsaW5lcw==')  
			lGgkoAop.FrontSurface = HttpService:Base64Decode('U21vb3RoTm9PdXRsaW5lcw==')	
			lGgkoAop.LeftSurface = HttpService:Base64Decode('U21vb3RoTm9PdXRsaW5lcw==')   		
			lGgkoAop.RightSurface = HttpService:Base64Decode('U21vb3RoTm9PdXRsaW5lcw==')		
			lGgkoAop.TopSurface = HttpService:Base64Decode('U21vb3RoTm9PdXRsaW5lcw==') 
		elseif lGgkoAop:IsA(HttpService:Base64Decode('RGVjYWw=')) then  	
			lGgkoAop.Transparency = 1		
		elseif lGgkoAop:IsA(HttpService:Base64Decode('UGFydGljbGVFbWl0dGVy')) or lGgkoAop:IsA(HttpService:Base64Decode('VHJhaWw=')) then  
			lGgkoAop.Lifetime = NumberRange.new(0) 
		end	
	end 
	for i,lGgkoAop in pairs(Lighting:GetDescendants()) do   
		if lGgkoAop:IsA(HttpService:Base64Decode('UG9zdEVmZmVjdA==')) then  	
			lGgkoAop.Enabled = false 		
		end 
	end 	
	workspace.DescendantAdded:Connect(nNvTYekW(child)	
		task.spawn(nNvTYekW()   		
			if child:IsA(HttpService:Base64Decode('Rm9yY2VGaWVsZA==')) or child:IsA(HttpService:Base64Decode('U3BhcmtsZXM=')) or child:IsA(HttpService:Base64Decode('U21va2U=')) or child:IsA(HttpService:Base64Decode('RmlyZQ==')) or child:IsA(HttpService:Base64Decode('QmVhbQ==')) then 		
				RunService.Heartbeat:Wait()  		
				child:Destroy()   		
			end   
		end)   
	end) 		
end) 	
ksqgBEpo(HttpService:Base64Decode('c2V0ZnBzY2Fw'), {HttpService:Base64Decode('ZnBzY2Fw'), HttpService:Base64Decode('bWF4ZnBz')}, nNvTYekW(ctrcbZGI, speaker)   
    if fpscaploop then 	
        task.cancel(fpscaploop) 
        fpscaploop = nil
    end   
    local VhprbEKo = 60   		
    local MQNCtLrQ = tonumber(ctrcbZGI[1]) or 1e6   
    if MQNCtLrQ == HttpService:Base64Decode('bm9uZQ==') then 	
        return 		
    elseif MQNCtLrQ > 0 then 
        VhprbEKo = MQNCtLrQ  		
    else  	
        return CFyCkJIA(HttpService:Base64Decode('SW52YWxpZCBhcmd1bWVudA=='), HttpService:Base64Decode('UGxlYXNlIHByb3ZpZGUgYSBudW1iZXIgYWJvdmUgMCBvciAnbm9uZScu'))	
    end
    if setfpscap and type(setfpscap) == HttpService:Base64Decode('ZnVuY3Rpb24=') then   
        setfpscap(VhprbEKo) 
    else   	
        fpscaploop = task.spawn(nNvTYekW() 	
            local IkGsYOWz = os.clock()   		
            while true do 		
                if os.clock() >= IkGsYOWz + 1 / VhprbEKo then   		
                    IkGsYOWz = os.clock() 		
                    task.wait()   
                end 
            end 
        end)  		
    end   	
end)  
ksqgBEpo(HttpService:Base64Decode('bm90aWZ5'),{},nNvTYekW(ctrcbZGI, speaker) 		
	CFyCkJIA(vqgOCmxq(1))	
end) 	
ksqgBEpo(HttpService:Base64Decode('bGFzdGNvbW1hbmQ='),{HttpService:Base64Decode('bGFzdGNtZA==')},nNvTYekW(ctrcbZGI, speaker)  	
	if cmdHistory[1]:sub(1,11) ~= HttpService:Base64Decode('bGFzdGNvbW1hbmQ=') and cmdHistory[1]:sub(1,7) ~= HttpService:Base64Decode('bGFzdGNtZA==') then
		vAOGaDPV(cmdHistory[1])
	end  	
end)
ksqgBEpo(HttpService:Base64Decode('ZXNw'),{},nNvTYekW(ctrcbZGI, speaker) 		
	if not CHMSenabled then  		
		ESPenabled = true	
		for i,lGgkoAop in pairs(Players:GetPlayers()) do
			if lGgkoAop.FrpOJNKH ~= speaker.FrpOJNKH then	
				UzJswGhK(lGgkoAop)   	
			end  
		end 
	else  
		CFyCkJIA(HttpService:Base64Decode('RVNQ'),HttpService:Base64Decode('RGlzYWJsZSBjaGFtcyAobm9jaGFtcykgYmVmb3JlIHVzaW5nIGVzcA=='))  
	end   
end)  
ksqgBEpo(HttpService:Base64Decode('ZXNwdGVhbQ=='),{},nNvTYekW(ctrcbZGI, speaker)   	
	if not CHMSenabled then   
		ESPenabled = true  	
		for i,lGgkoAop in pairs(Players:GetPlayers()) do 	
			if lGgkoAop.FrpOJNKH ~= speaker.FrpOJNKH then  	
				UzJswGhK(lGgkoAop, true)  		
			end		
		end  		
	else 	
		CFyCkJIA(HttpService:Base64Decode('RVNQ'),HttpService:Base64Decode('RGlzYWJsZSBjaGFtcyAobm9jaGFtcykgYmVmb3JlIHVzaW5nIGVzcA=='))	
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('bm9lc3A='),{HttpService:Base64Decode('dW5lc3A='),HttpService:Base64Decode('dW5lc3B0ZWFt')},nNvTYekW(ctrcbZGI, speaker) 
	ESPenabled = false		
	for i,CwgEliJJ in pairs(COREGUI:GetChildren()) do  		
		if string.sub(CwgEliJJ.FrpOJNKH, -4) == HttpService:Base64Decode('X0VTUA==') then
			CwgEliJJ:Destroy()	
		end   	
	end  
end)  		
ksqgBEpo(HttpService:Base64Decode('ZXNwdHJhbnNwYXJlbmN5'),{},nNvTYekW(ctrcbZGI, speaker)		
	espTransparency = (ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) and ctrcbZGI[1]) or 0.3		
	KiDAStZA()  		
end)
local UJAYRRIW = {} 
local oiZfJYMp = nil 
nNvTYekW uzYNjfJn(odHrkVop)  	
	if #UJAYRRIW > 0 then
		if vdOcSuCI(UJAYRRIW,odHrkVop.FrpOJNKH:lower()) then	
			local tRbXwQwX = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50'))  
			tRbXwQwX.FrpOJNKH = odHrkVop.FrpOJNKH:lower()..HttpService:Base64Decode('X1BFU1A=')   	
			tRbXwQwX.Parent = odHrkVop  
			tRbXwQwX.Adornee = odHrkVop	
			tRbXwQwX.AlwaysOnTop = true		
			tRbXwQwX.ZIndex = 0   	
			tRbXwQwX.eCEGCheh = odHrkVop.eCEGCheh   	
			tRbXwQwX.Transparency = espTransparency 		
			tRbXwQwX.Color = BrickColor.new(HttpService:Base64Decode('TGltZSBncmVlbg=='))
		end	
	else   	
		oiZfJYMp:Disconnect()		
		oiZfJYMp = nil
	end  		
end
ksqgBEpo(HttpService:Base64Decode('cGFydGVzcA=='),{},nNvTYekW(ctrcbZGI, speaker)
	local LRZCpGQo = vqgOCmxq(1):lower()   		
	if not vdOcSuCI(UJAYRRIW,LRZCpGQo) then 	
		table.insert(UJAYRRIW,LRZCpGQo)  		
		for i,lGgkoAop in pairs(workspace:GetDescendants()) do   		
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and lGgkoAop.FrpOJNKH:lower() == LRZCpGQo then	
				local tRbXwQwX = Instance.new(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50')) 	
				tRbXwQwX.FrpOJNKH = LRZCpGQo..HttpService:Base64Decode('X1BFU1A=')  		
				tRbXwQwX.Parent = lGgkoAop  		
				tRbXwQwX.Adornee = lGgkoAop	
				tRbXwQwX.AlwaysOnTop = true  
				tRbXwQwX.ZIndex = 0  
				tRbXwQwX.eCEGCheh = lGgkoAop.eCEGCheh		
				tRbXwQwX.Transparency = espTransparency	
				tRbXwQwX.Color = BrickColor.new(HttpService:Base64Decode('TGltZSBncmVlbg=='))  	
			end  
		end	
	end 
	if oiZfJYMp == nil then	
		oiZfJYMp = workspace.DescendantAdded:Connect(uzYNjfJn)  
	end	
end)		
ksqgBEpo(HttpService:Base64Decode('dW5wYXJ0ZXNw'),{HttpService:Base64Decode('bm9wYXJ0ZXNw')},nNvTYekW(ctrcbZGI, speaker) 	
	if ctrcbZGI[1] then  		
		local LRZCpGQo = vqgOCmxq(1):lower() 	
		if vdOcSuCI(UJAYRRIW,LRZCpGQo) then  
			table.remove(UJAYRRIW, EyTAQsvn(UJAYRRIW, LRZCpGQo))  
		end
		for i,lGgkoAop in pairs(workspace:GetDescendants()) do   		
			if lGgkoAop:IsA(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50')) and lGgkoAop.FrpOJNKH == LRZCpGQo..HttpService:Base64Decode('X1BFU1A=') then 		
				lGgkoAop:Destroy()  		
			end 	
		end		
	else  
		oiZfJYMp:Disconnect() 
		oiZfJYMp = nil 		
		UJAYRRIW = {}  	
		for i,lGgkoAop in pairs(workspace:GetDescendants()) do		
			if lGgkoAop:IsA(HttpService:Base64Decode('Qm94SGFuZGxlQWRvcm5tZW50')) and lGgkoAop.FrpOJNKH:sub(-5) == HttpService:Base64Decode('X1BFU1A=') then  	
				lGgkoAop:Destroy() 	
			end  		
		end
	end  	
end) 
ksqgBEpo(HttpService:Base64Decode('Y2hhbXM='),{},nNvTYekW(ctrcbZGI, speaker) 	
	if not ESPenabled then 	
		CHMSenabled = true	
		for i,lGgkoAop in pairs(Players:GetPlayers()) do	
			if lGgkoAop.FrpOJNKH ~= speaker.FrpOJNKH then   	
				KIaZPyqG(lGgkoAop)   	
			end 		
		end   	
	else 
		CFyCkJIA(HttpService:Base64Decode('Q2hhbXM='),HttpService:Base64Decode('RGlzYWJsZSBFU1AgKG5vZXNwKSBiZWZvcmUgdXNpbmcgY2hhbXM='))	
	end  
end)   	
ksqgBEpo(HttpService:Base64Decode('bm9jaGFtcw=='),{HttpService:Base64Decode('dW5jaGFtcw==')},nNvTYekW(ctrcbZGI, speaker)		
	CHMSenabled = false   	
	for i,lGgkoAop in pairs(Players:GetPlayers()) do  		
		local jsxqRuPg = lGgkoAop   		
		for i,CwgEliJJ in pairs(COREGUI:GetChildren()) do   	
			if CwgEliJJ.FrpOJNKH == jsxqRuPg.FrpOJNKH..HttpService:Base64Decode('X0NITVM=') then  		
				CwgEliJJ:Destroy() 	
			end	
		end	
	end   
end)   
ksqgBEpo(HttpService:Base64Decode('bG9jYXRl'),{},nNvTYekW(ctrcbZGI, speaker)	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   		
	for i,lGgkoAop in pairs(aAJfXrEy) do   
		SiBLiRqP(Players[lGgkoAop])  		
	end 		
end) 	
ksqgBEpo(HttpService:Base64Decode('bm9sb2NhdGU='),{HttpService:Base64Decode('dW5sb2NhdGU=')},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	if ctrcbZGI[1] then  	
		for i,lGgkoAop in pairs(aAJfXrEy) do  		
			for i,CwgEliJJ in pairs(COREGUI:GetChildren()) do	
				if CwgEliJJ.FrpOJNKH == Players[lGgkoAop].FrpOJNKH..HttpService:Base64Decode('X0xD') then   
					CwgEliJJ:Destroy()   		
				end  		
			end 
		end   	
	else		
		for i,CwgEliJJ in pairs(COREGUI:GetChildren()) do	
			if string.sub(CwgEliJJ.FrpOJNKH, -3) == HttpService:Base64Decode('X0xD') then 	
				CwgEliJJ:Destroy()
			end   
		end  	
	end	
end)	
viewing = nil
ksqgBEpo(HttpService:Base64Decode('dmlldw=='),{HttpService:Base64Decode('c3BlY3RhdGU=')},nNvTYekW(ctrcbZGI, speaker)	
	PqkBlQDz() 
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   	
	for i,lGgkoAop in pairs(aAJfXrEy) do 	
		if viewDied then  		
			viewDied:Disconnect() 		
			viewChanged:Disconnect() 		
		end  		
		viewing = Players[lGgkoAop]   		
		workspace.CurrentCamera.CameraSubject = viewing.lZReEeCX  
		CFyCkJIA(HttpService:Base64Decode('U3BlY3RhdGU='),HttpService:Base64Decode('Vmlld2luZyA=') .. Players[lGgkoAop].FrpOJNKH) 
		local nNvTYekW viewDiedFunc()		
			repeat wait() until Players[lGgkoAop].lZReEeCX ~= nil and wyxfunbJ(Players[lGgkoAop].lZReEeCX) 		
			workspace.CurrentCamera.CameraSubject = viewing.lZReEeCX   	
		end   
		viewDied = Players[lGgkoAop].CharacterAdded:Connect(viewDiedFunc) 
		local nNvTYekW viewChangedFunc()   
			workspace.CurrentCamera.CameraSubject = viewing.lZReEeCX  		
		end 	
		viewChanged = workspace.CurrentCamera:GetPropertyChangedSignal(HttpService:Base64Decode('Q2FtZXJhU3ViamVjdA==')):Connect(viewChangedFunc)  		
	end 		
end) 
ksqgBEpo(HttpService:Base64Decode('dmlld3BhcnQ='),{HttpService:Base64Decode('dmlld3A=')},nNvTYekW(ctrcbZGI, speaker)   	
	PqkBlQDz()  
	if ctrcbZGI[1] then  
		for i,lGgkoAop in pairs(workspace:GetDescendants()) do	
			if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then	
				wait(0.1) 	
				workspace.CurrentCamera.CameraSubject = lGgkoAop		
			end		
		end 		
	end	
end)  	
ksqgBEpo(HttpService:Base64Decode('dW52aWV3'),{HttpService:Base64Decode('dW5zcGVjdGF0ZQ==')},nNvTYekW(ctrcbZGI, speaker)
	PqkBlQDz() 		
	if viewing ~= nil then 		
		viewing = nil 		
		CFyCkJIA(HttpService:Base64Decode('U3BlY3RhdGU='),HttpService:Base64Decode('VmlldyB0dXJuZWQgb2Zm'))
	end  		
	if viewDied then
		viewDied:Disconnect()   		
		viewChanged:Disconnect()
	end		
	workspace.CurrentCamera.CameraSubject = speaker.lZReEeCX
end) 
fcRunning = false  		
local APevLKbO = workspace.CurrentCamera
workspace:GetPropertyChangedSignal(HttpService:Base64Decode('Q3VycmVudENhbWVyYQ==')):Connect(nNvTYekW() 		
	local dOQprMyL = workspace.CurrentCamera   
	if dOQprMyL then 	
		APevLKbO = dOQprMyL		
	end   	
end) 		
local wXNYxamy = Enum.ContextActionPriority.High.Value 	
bJaOTkxr = {} do   
	bJaOTkxr.__index = bJaOTkxr  	
	nNvTYekW bJaOTkxr.new(freq, DpljNZwD)   
		local LYfofnMK = setmetatable({}, bJaOTkxr)   		
		LYfofnMK.vCCJmWVD = freq   	
		LYfofnMK.mkjkJNCq = DpljNZwD  		
		LYfofnMK.lGgkoAop = DpljNZwD*0   		
		return LYfofnMK		
	end 	
	nNvTYekW bJaOTkxr:Update(dt, goal) 	
		local vCCJmWVD = LYfofnMK.vCCJmWVD*2*math.pi	
		local vHruJvSi = LYfofnMK.mkjkJNCq  		
		local FaVOFCwg = LYfofnMK.lGgkoAop 
		local GLsNxthq = goal - vHruJvSi  		
		local ReizWBPt = math.exp(-vCCJmWVD*dt) 
		local fBGepBoy = goal + (FaVOFCwg*dt - GLsNxthq*(vCCJmWVD*dt + 1))*ReizWBPt		
		local zEZUrDht = (vCCJmWVD*dt*(GLsNxthq*vCCJmWVD - FaVOFCwg) + FaVOFCwg)*ReizWBPt  		
		LYfofnMK.mkjkJNCq = fBGepBoy  
		LYfofnMK.lGgkoAop = zEZUrDht 	
		return fBGepBoy   
	end   
	nNvTYekW bJaOTkxr:Reset(DpljNZwD) 		
		LYfofnMK.mkjkJNCq = DpljNZwD 
		LYfofnMK.lGgkoAop = DpljNZwD*0   	
	end   
end 		
local ehPuXTCf = Vector3.new()   	
local ebxgBkeZ = Vector2.new() 	
local zDQEHhCg = bJaOTkxr.new(5, Vector3.new())
local SNmWwYcL = bJaOTkxr.new(5, Vector2.new()) 
GWkGnzdL = {} do  
	keyboard = { 		
		W = 0,	
		kGKSkmjQ = 0,  	
		S = 0, 		
		wIWlwmst = 0, 		
		UyWliikj = 0,
		Q = 0, 	
		Up = 0,	
		Down = 0, 
		LeftShift = 0,		
	}  		
	KMeqLizd = {   	
		Delta = Vector2.new(),
	}  
	NAV_KEYBOARD_SPEED = Vector3.new(1, 1, 1) 
	PAN_MOUSE_SPEED = Vector2.new(1, 1)*(math.pi/64)  	
	NAV_ADJ_SPEED = 0.75	
	NAV_SHIFT_MUL = 0.25  	
	navSpeed = 1  		
	nNvTYekW GWkGnzdL.Vel(dt)  
		navSpeed = math.clamp(navSpeed + dt*(keyboard.Up - keyboard.Down)*NAV_ADJ_SPEED, 0.01, 4)   
		local ORSDdqAi = Vector3.new(  		
			keyboard.wIWlwmst - keyboard.kGKSkmjQ,	
			keyboard.UyWliikj - keyboard.Q, 		
			keyboard.S - keyboard.W  
		)*NAV_KEYBOARD_SPEED   	
		local AhQyuRFR = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) 
		return (ORSDdqAi)*(navSpeed*(AhQyuRFR and NAV_SHIFT_MUL or 1))   	
	end 	
	nNvTYekW GWkGnzdL.Pan(dt)   
		local ZynXhwfm = KMeqLizd.Delta*PAN_MOUSE_SPEED	
		KMeqLizd.Delta = Vector2.new() 		
		return ZynXhwfm	
	end  
	do 	
		nNvTYekW qGlUFifK(action, QEIGpJnZ, UMiuNWpO) 	
			keyboard[UMiuNWpO.KeyCode.FrpOJNKH] = QEIGpJnZ == Enum.UserInputState.Begin and 1 or 0   		
			return Enum.ContextActionResult.Sink  
		end  		
		nNvTYekW iAqowtPv(action, QEIGpJnZ, UMiuNWpO) 	
			local hLDiSiCF = UMiuNWpO.Delta 		
			KMeqLizd.Delta = Vector2.new(-hLDiSiCF.WPqLVvwO, -hLDiSiCF.NCBjKlfQ)	
			return Enum.ContextActionResult.Sink  		
		end  		
		nNvTYekW dugAMbMv(iSBTvRHR)  	
			for TQYdRNxr, lGgkoAop in pairs(iSBTvRHR) do
				iSBTvRHR[TQYdRNxr] = lGgkoAop*0  	
			end
		end  		
		nNvTYekW GWkGnzdL.StartCapture() 		
			ContextActionService:BindActionAtPriority(HttpService:Base64Decode('RnJlZWNhbUtleWJvYXJk'),qGlUFifK,false,wXNYxamy,   
				Enum.KeyCode.W,	
				Enum.KeyCode.kGKSkmjQ, 		
				Enum.KeyCode.S,   		
				Enum.KeyCode.wIWlwmst,
				Enum.KeyCode.UyWliikj, 
				Enum.KeyCode.Q,
				Enum.KeyCode.Up, 	
				Enum.KeyCode.Down   		
			)  
			ContextActionService:BindActionAtPriority(HttpService:Base64Decode('RnJlZWNhbU1vdXNlUGFu'),iAqowtPv,false,wXNYxamy,Enum.UserInputType.MouseMovement)	
		end  
		nNvTYekW GWkGnzdL.StopCapture() 		
			navSpeed = 1   	
			dugAMbMv(keyboard) 		
			dugAMbMv(KMeqLizd)   		
			ContextActionService:UnbindAction(HttpService:Base64Decode('RnJlZWNhbUtleWJvYXJk'))	
			ContextActionService:UnbindAction(HttpService:Base64Decode('RnJlZWNhbU1vdXNlUGFu'))	
		end  	
	end   
end
nNvTYekW VslazHWK(cameraFrame)  
	local mTCOoNiZ = 0.1	
	local dFcBwRkk = APevLKbO.ViewportSize  
	local FMJJlbwj = 2*math.tan(cameraFov/2) 
	local lHtgyIGt = dFcBwRkk.NCBjKlfQ/dFcBwRkk.WPqLVvwO*FMJJlbwj 		
	local XZxLHRGA = cameraFrame.rightVector 
	local lctyNsdc = cameraFrame.upVector 
	local QYcbqust = cameraFrame.lookVector  	
	local aXysLrIv = Vector3.new() 	
	local syddLPxH = 512		
	for NCBjKlfQ = 0, 1, 0.5 do 
		for WPqLVvwO = 0, 1, 0.5 do 	
			local ukzaktqD = (NCBjKlfQ - 0.5)*lHtgyIGt  	
			local oAlkJWKk = (WPqLVvwO - 0.5)*FMJJlbwj   		
			local GLsNxthq = XZxLHRGA*ukzaktqD - lctyNsdc*oAlkJWKk + QYcbqust   	
			local pJEdnXGQ = cameraFrame.mkjkJNCq + GLsNxthq*mTCOoNiZ		
			local OpEnJPoA, hit = workspace:FindPartOnRay(Ray.new(pJEdnXGQ, GLsNxthq.unit*syddLPxH))  	
			local dwQiivNm = (hit - pJEdnXGQ).qwzZAAew  		
			if syddLPxH > dwQiivNm then
				syddLPxH = dwQiivNm 
				aXysLrIv = GLsNxthq.unit  		
			end 		
		end   		
	end		
	return QYcbqust:Dot(aXysLrIv)*syddLPxH 	
end 
local nNvTYekW StepFreecam(dt) 		
	local HqcQOTMO = zDQEHhCg:Update(dt, GWkGnzdL.Vel(dt)) 		
	local cIWtTIrs = SNmWwYcL:Update(dt, GWkGnzdL.Pan(dt)) 	
	local AgyOIJZu = math.sqrt(math.tan(math.rad(70/2))/math.tan(math.rad(cameraFov/2))) 
	ebxgBkeZ = ebxgBkeZ + cIWtTIrs*Vector2.new(0.75, 1)*8*(dt/AgyOIJZu)  	
	ebxgBkeZ = Vector2.new(math.clamp(ebxgBkeZ.NCBjKlfQ, -math.rad(90), math.rad(90)), ebxgBkeZ.WPqLVvwO%(2*math.pi))		
	local ehbnbxAt = CFrame.new(ehPuXTCf)*CFrame.fromOrientation(ebxgBkeZ.NCBjKlfQ, ebxgBkeZ.WPqLVvwO, 0)*CFrame.new(HqcQOTMO*Vector3.new(1, 1, 1)*64*dt)   	
	ehPuXTCf = ehbnbxAt.mkjkJNCq 
	APevLKbO.CFrame = ehbnbxAt 
	APevLKbO.Focus = ehbnbxAt*CFrame.new(0, 0, -VslazHWK(ehbnbxAt))
	APevLKbO.FieldOfView = cameraFov 
end		
local QbGWXmtp = {} do		
	mouseBehavior = '' 		
	mouseIconEnabled = ''   		
	cameraType = ''		
	cameraFocus = ''  	
	ehbnbxAt = ''	
	cameraFieldOfView = ''   		
	nNvTYekW QbGWXmtp.Push() 	
		cameraFieldOfView = APevLKbO.FieldOfView   		
		APevLKbO.FieldOfView = 70		
		cameraType = APevLKbO.CameraType		
		APevLKbO.CameraType = Enum.CameraType.Custom 	
		ehbnbxAt = APevLKbO.CFrame 		
		cameraFocus = APevLKbO.Focus 		
		mouseIconEnabled = UserInputService.MouseIconEnabled		
		UserInputService.MouseIconEnabled = true 	
		mouseBehavior = UserInputService.MouseBehavior 	
		UserInputService.MouseBehavior = Enum.MouseBehavior.Default  		
	end 	
	nNvTYekW QbGWXmtp.Pop()  	
		APevLKbO.FieldOfView = 70   		
		APevLKbO.CameraType = cameraType  
		cameraType = nil		
		APevLKbO.CFrame = ehbnbxAt  	
		ehbnbxAt = nil	
		APevLKbO.Focus = cameraFocus		
		cameraFocus = nil
		UserInputService.MouseIconEnabled = mouseIconEnabled		
		mouseIconEnabled = nil
		UserInputService.MouseBehavior = mouseBehavior  
		mouseBehavior = nil   	
	end  
end   	
nNvTYekW OZrtpcaX(DpljNZwD)  	
	if fcRunning then  
		PqkBlQDz() 
	end
	local ehbnbxAt = APevLKbO.CFrame 
	if DpljNZwD then   		
		ehbnbxAt = DpljNZwD 
	end  		
	ebxgBkeZ = Vector2.new() 
	ehPuXTCf = ehbnbxAt.mkjkJNCq  
	cameraFov = APevLKbO.FieldOfView  
	zDQEHhCg:Reset(Vector3.new())   	
	SNmWwYcL:Reset(Vector2.new())   	
	QbGWXmtp.Push()  	
	RunService:BindToRenderStep(HttpService:Base64Decode('RnJlZWNhbQ=='), Enum.RenderPriority.APevLKbO.Value, StepFreecam)  		
	GWkGnzdL.StartCapture() 
	fcRunning = true   		
end  
nNvTYekW PqkBlQDz()   
	if not fcRunning then return end  		
	GWkGnzdL.StopCapture()
	RunService:UnbindFromRenderStep(HttpService:Base64Decode('RnJlZWNhbQ==')) 		
	QbGWXmtp.Pop()   	
	workspace.APevLKbO.FieldOfView = 70  
	fcRunning = false	
end  	
ksqgBEpo(HttpService:Base64Decode('ZnJlZWNhbQ=='),{HttpService:Base64Decode('ZmM=')},nNvTYekW(ctrcbZGI, speaker)	
	OZrtpcaX() 
end)  		
ksqgBEpo(HttpService:Base64Decode('ZnJlZWNhbXBvcw=='),{HttpService:Base64Decode('ZmNwb3M='),HttpService:Base64Decode('ZmNw'),HttpService:Base64Decode('ZnJlZWNhbXBvc2l0aW9u'),HttpService:Base64Decode('ZmNwb3NpdGlvbg==')},nNvTYekW(ctrcbZGI, speaker)  
	if not ctrcbZGI[1] then return end		
	local tlSBLIBn = CFrame.new(ctrcbZGI[1],ctrcbZGI[2],ctrcbZGI[3])		
	OZrtpcaX(tlSBLIBn) 
end)  	
ksqgBEpo(HttpService:Base64Decode('ZnJlZWNhbXdheXBvaW50'),{HttpService:Base64Decode('ZmN3cA==')},nNvTYekW(ctrcbZGI, speaker)  		
	local BNkFsuMs = tostring(vqgOCmxq(1))   	
	if speaker.lZReEeCX then	
		for i,OpEnJPoA in pairs(WayPoints) do 		
			local NCBjKlfQ = WayPoints[i].COORD[1]  		
			local WPqLVvwO = WayPoints[i].COORD[2] 	
			local oMVjZjcn = WayPoints[i].COORD[3]   
			if tostring(WayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then  	
				OZrtpcaX(CFrame.new(NCBjKlfQ,WPqLVvwO,oMVjZjcn))
			end  		
		end	
		for i,OpEnJPoA in pairs(pWayPoints) do 	
			if tostring(pWayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then  	
				OZrtpcaX(CFrame.new(pWayPoints[i].COORD[1].FZxyaMZC)) 	
			end  	
		end   
	end 
end) 	
ksqgBEpo(HttpService:Base64Decode('ZnJlZWNhbWdvdG8='),{HttpService:Base64Decode('ZmNnb3Rv'),HttpService:Base64Decode('ZnJlZWNhbXRw'),HttpService:Base64Decode('ZmN0cA==')},nNvTYekW(ctrcbZGI, speaker)  	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  		
	for i,lGgkoAop in pairs(aAJfXrEy) do   		
		OZrtpcaX(wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame)
	end  		
end)	
ksqgBEpo(HttpService:Base64Decode('dW5mcmVlY2Ft'),{HttpService:Base64Decode('bm9mcmVlY2Ft'),HttpService:Base64Decode('dW5mYw=='),HttpService:Base64Decode('bm9mYw==')},nNvTYekW(ctrcbZGI, speaker)  		
	PqkBlQDz() 
end)	
ksqgBEpo(HttpService:Base64Decode('ZnJlZWNhbXNwZWVk'),{HttpService:Base64Decode('ZmNzcGVlZA==')},nNvTYekW(ctrcbZGI, speaker)  		
	local yUUKJoVP = ctrcbZGI[1] or 1   	
	if CnkskpqQ(yUUKJoVP) then	
		NAV_KEYBOARD_SPEED = Vector3.new(yUUKJoVP, yUUKJoVP, yUUKJoVP) 	
	end	
end) 		
ksqgBEpo(HttpService:Base64Decode('bm90aWZ5ZnJlZWNhbXBvc2l0aW9u'),{HttpService:Base64Decode('bm90aWZ5ZmNwb3M=')},nNvTYekW(ctrcbZGI, speaker)  	
	if fcRunning then  		
		local IqWNKzOD,jtGagefg,DadYeUNF = workspace.CurrentCamera.CFrame.FZxyaMZC.IqWNKzOD,workspace.CurrentCamera.CFrame.FZxyaMZC.jtGagefg,workspace.CurrentCamera.CFrame.FZxyaMZC.DadYeUNF  	
		local tuRRwxHV, Round = string.format, math.krtnXMTJ  		
		CFyCkJIA(HttpService:Base64Decode('Q3VycmVudCBQb3NpdGlvbg=='), tuRRwxHV(HttpService:Base64Decode('JXMsICVzLCAlcw=='), Round(IqWNKzOD), Round(jtGagefg), Round(DadYeUNF)))
	end		
end)  		
ksqgBEpo(HttpService:Base64Decode('Y29weWZyZWVjYW1wb3NpdGlvbg=='),{HttpService:Base64Decode('Y29weWZjcG9z')},nNvTYekW(ctrcbZGI, speaker)  	
	if fcRunning then	
		local IqWNKzOD,jtGagefg,DadYeUNF = workspace.CurrentCamera.CFrame.FZxyaMZC.IqWNKzOD,workspace.CurrentCamera.CFrame.FZxyaMZC.jtGagefg,workspace.CurrentCamera.CFrame.FZxyaMZC.DadYeUNF   
		local tuRRwxHV, Round = string.format, math.krtnXMTJ
		oHhBFOUT(tuRRwxHV(HttpService:Base64Decode('JXMsICVzLCAlcw=='), Round(IqWNKzOD), Round(jtGagefg), Round(DadYeUNF)))   
	end	
end) 		
ksqgBEpo(HttpService:Base64Decode('Z290b2NhbWVyYQ=='),{HttpService:Base64Decode('Z290b2NhbQ=='),HttpService:Base64Decode('dG9jYW0=')},nNvTYekW(ctrcbZGI, speaker)		
	wyxfunbJ(speaker.lZReEeCX).CFrame = workspace.APevLKbO.CFrame 		
end) 	
ksqgBEpo(HttpService:Base64Decode('dHdlZW5nb3RvY2FtZXJh'),{HttpService:Base64Decode('dHdlZW5nb3RvY2Ft'),HttpService:Base64Decode('dGdvdG9jYW0='),HttpService:Base64Decode('dHRvY2Ft')},nNvTYekW(ctrcbZGI, speaker) 		
	TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = workspace.APevLKbO.CFrame}):Play() 		
end)  	
ksqgBEpo(HttpService:Base64Decode('Zm92'),{},nNvTYekW(ctrcbZGI, speaker)		
	local CrmcszQy = ctrcbZGI[1] or 70 
	if CnkskpqQ(CrmcszQy) then  		
		workspace.CurrentCamera.FieldOfView = CrmcszQy	
	end
end)
local FuhWatKp = Players.FntTRqLK.CameraMaxZoomDistance   
local vDHzVEIB = Players.FntTRqLK.CameraMinZoomDistance 		
ksqgBEpo(HttpService:Base64Decode('bG9va2F0'),{},nNvTYekW(ctrcbZGI, speaker)  
	if speaker.CameraMaxZoomDistance ~= 0.5 then  
		FuhWatKp = speaker.CameraMaxZoomDistance 		
		vDHzVEIB = speaker.CameraMinZoomDistance   	
	end 	
	speaker.CameraMaxZoomDistance = 0.5   
	speaker.CameraMinZoomDistance = 0.5	
	wait()   	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  
	for i,lGgkoAop in pairs(aAJfXrEy) do	
		local HJDZBMru = Players[lGgkoAop].lZReEeCX 
		if HJDZBMru and HJDZBMru:FindFirstChild(HttpService:Base64Decode('SGVhZA==')) then		
			workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.mkjkJNCq, HJDZBMru.yrKsYgVR.CFrame.mkjkJNCq) 
			wait(0.1)	
		end   		
	end
	speaker.CameraMaxZoomDistance = FuhWatKp 		
	speaker.CameraMinZoomDistance = vDHzVEIB  	
end)  
ksqgBEpo(HttpService:Base64Decode('Zml4Y2Ft'),{HttpService:Base64Decode('cmVzdG9yZWNhbQ==')},nNvTYekW(ctrcbZGI, speaker) 
	PqkBlQDz()  
	vAOGaDPV(HttpService:Base64Decode('dW52aWV3'))   
	workspace.CurrentCamera:remove()		
	wait(.1)  	
	repeat wait() until speaker.lZReEeCX ~= nil   	
	workspace.CurrentCamera.CameraSubject = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))   
	workspace.CurrentCamera.CameraType = HttpService:Base64Decode('Q3VzdG9t')   
	speaker.CameraMinZoomDistance = 0.5 		
	speaker.CameraMaxZoomDistance = 400   
	speaker.CameraMode = HttpService:Base64Decode('Q2xhc3NpYw==') 	
	speaker.lZReEeCX.yrKsYgVR.Anchored = false
end)  		
ksqgBEpo(HttpService:Base64Decode('ZW5hYmxlc2hpZnRsb2Nr'),{HttpService:Base64Decode('ZW5hYmxlc2w='),HttpService:Base64Decode('c2hpZnRsb2Nr')},nNvTYekW(ctrcbZGI, speaker)  		
	speaker.DevEnableMouseLock = true 
	CFyCkJIA(HttpService:Base64Decode('U2hpZnRsb2Nr'),HttpService:Base64Decode('U2hpZnQgbG9jayBpcyBub3cgYXZhaWxhYmxl'))	
end)  	
ksqgBEpo(HttpService:Base64Decode('Zmlyc3Rw'),{},nNvTYekW(ctrcbZGI, speaker)		
	speaker.CameraMode = HttpService:Base64Decode('TG9ja0ZpcnN0UGVyc29u')   
end) 		
ksqgBEpo(HttpService:Base64Decode('dGhpcmRw'),{},nNvTYekW(ctrcbZGI, speaker) 		
	speaker.CameraMode = HttpService:Base64Decode('Q2xhc3NpYw==')   		
end)
ksqgBEpo(HttpService:Base64Decode('bm9jbGlwY2Ft'), {HttpService:Base64Decode('bmNjYW0=')}, nNvTYekW(ctrcbZGI, speaker)	
	local OXfjrRTi = (debug and debug.setconstant) or setconstant	
	local cxPoWnFv = (debug and debug.getconstants) or getconstants 	
	if not OXfjrRTi or not getgc or not cxPoWnFv then 	
		return CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHNldGNvbnN0YW50IG9yIGdldGNvbnN0YW50cyBvciBnZXRnYyk='))  	
	end   
	local WkivKUzE = speaker.PlayerScripts.PlayerModule.CameraModule.ZoomController.Popper		
	for OpEnJPoA, lGgkoAop in pairs(getgc()) do		
		if type(lGgkoAop) == HttpService:Base64Decode('ZnVuY3Rpb24=') and getfenv(lGgkoAop).script == WkivKUzE then	
			for i, zEZUrDht in pairs(cxPoWnFv(lGgkoAop)) do   		
				if tonumber(zEZUrDht) == .25 then 	
					OXfjrRTi(lGgkoAop, i, 0)  		
				elseif tonumber(zEZUrDht) == 0 then  	
					OXfjrRTi(lGgkoAop, i, .25)  	
				end   
			end   		
		end 		
	end		
end)  	
ksqgBEpo(HttpService:Base64Decode('bWF4em9vbQ=='),{},nNvTYekW(ctrcbZGI, speaker) 		
	speaker.CameraMaxZoomDistance = ctrcbZGI[1]   
end)   
ksqgBEpo(HttpService:Base64Decode('bWluem9vbQ=='),{},nNvTYekW(ctrcbZGI, speaker) 		
	speaker.CameraMinZoomDistance = ctrcbZGI[1]	
end)		
ksqgBEpo(HttpService:Base64Decode('Y2FtZGlzdGFuY2U='),{},nNvTYekW(ctrcbZGI, speaker)  	
	local BYirdrfs = speaker.CameraMaxZoomDistance  	
	local SQWiUNyZ = speaker.CameraMinZoomDistance   	
	if BYirdrfs < tonumber(ctrcbZGI[1]) then		
		BYirdrfs = ctrcbZGI[1]		
	end   	
	speaker.CameraMaxZoomDistance = ctrcbZGI[1] 		
	speaker.CameraMinZoomDistance = ctrcbZGI[1]   
	wait()   	
	speaker.CameraMaxZoomDistance = BYirdrfs  	
	speaker.CameraMinZoomDistance = SQWiUNyZ 
end)   		
ksqgBEpo(HttpService:Base64Decode('dW5sb2Nrd3M='),{HttpService:Base64Decode('dW5sb2Nrd29ya3NwYWNl')},nNvTYekW(ctrcbZGI, speaker)		
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do 
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then   
			lGgkoAop.Locked = false   		
		end   	
	end
end) 		
ksqgBEpo(HttpService:Base64Decode('bG9ja3dz'),{HttpService:Base64Decode('bG9ja3dvcmtzcGFjZQ==')},nNvTYekW(ctrcbZGI, speaker)    		
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do  		
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then   		
			lGgkoAop.Locked = true
		end 	
	end 	
end)  	
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRl'),{HttpService:Base64Decode('cmVtb3Zl')},nNvTYekW(ctrcbZGI, speaker)  
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do 
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() then   
			lGgkoAop:Destroy()  	
		end  		
	end   	
	CFyCkJIA(HttpService:Base64Decode('SXRlbShzKSBEZWxldGVk'),HttpService:Base64Decode('RGVsZXRlZCA=') ..vqgOCmxq(1))  
end)  	
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRlY2xhc3M='),{HttpService:Base64Decode('cmVtb3ZlY2xhc3M='),HttpService:Base64Decode('ZGVsZXRlY2xhc3NuYW1l'),HttpService:Base64Decode('cmVtb3ZlY2xhc3NuYW1l'),HttpService:Base64Decode('ZGM=')},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do   
		if lGgkoAop.ClassName:lower() == vqgOCmxq(1):lower() then 	
			lGgkoAop:Destroy() 		
		end   	
	end  
	CFyCkJIA(HttpService:Base64Decode('SXRlbShzKSBEZWxldGVk'),HttpService:Base64Decode('RGVsZXRlZCBpdGVtcyB3aXRoIENsYXNzTmFtZSA=') ..vqgOCmxq(1))
end)	
ksqgBEpo(HttpService:Base64Decode('Y2hhcmRlbGV0ZQ=='),{HttpService:Base64Decode('Y2hhcnJlbW92ZQ=='),HttpService:Base64Decode('Y2Q=')},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do   
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() then
			lGgkoAop:Destroy()  	
		end
	end  		
	CFyCkJIA(HttpService:Base64Decode('SXRlbShzKSBEZWxldGVk'),HttpService:Base64Decode('RGVsZXRlZCA=') ..vqgOCmxq(1))   
end)   	
ksqgBEpo(HttpService:Base64Decode('Y2hhcmRlbGV0ZWNsYXNz'),{HttpService:Base64Decode('Y2hhcnJlbW92ZWNsYXNz'),HttpService:Base64Decode('Y2hhcmRlbGV0ZWNsYXNzbmFtZQ=='),HttpService:Base64Decode('Y2hhcnJlbW92ZWNsYXNzbmFtZQ=='),HttpService:Base64Decode('Y2Rj')},nNvTYekW(ctrcbZGI, speaker) 	
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do   		
		if lGgkoAop.ClassName:lower() == vqgOCmxq(1):lower() then   		
			lGgkoAop:Destroy()  		
		end 
	end 
	CFyCkJIA(HttpService:Base64Decode('SXRlbShzKSBEZWxldGVk'),HttpService:Base64Decode('RGVsZXRlZCBpdGVtcyB3aXRoIENsYXNzTmFtZSA=') ..vqgOCmxq(1))  
end)  	
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRldmVsb2NpdHk='),{HttpService:Base64Decode('ZHY='),HttpService:Base64Decode('cmVtb3ZldmVsb2NpdHk='),HttpService:Base64Decode('cmVtb3ZlZm9yY2Vz')},nNvTYekW(ctrcbZGI, speaker)  		
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do 		
		if lGgkoAop:IsA(HttpService:Base64Decode('Qm9keVZlbG9jaXR5')) or lGgkoAop:IsA(HttpService:Base64Decode('Qm9keUd5cm8=')) or lGgkoAop:IsA(HttpService:Base64Decode('Um9ja2V0UHJvcHVsc2lvbg==')) or lGgkoAop:IsA(HttpService:Base64Decode('Qm9keVRocnVzdA==')) or lGgkoAop:IsA(HttpService:Base64Decode('Qm9keUFuZ3VsYXJWZWxvY2l0eQ==')) or lGgkoAop:IsA(HttpService:Base64Decode('QW5ndWxhclZlbG9jaXR5')) or lGgkoAop:IsA(HttpService:Base64Decode('Qm9keUZvcmNl')) or lGgkoAop:IsA(HttpService:Base64Decode('VmVjdG9yRm9yY2U=')) or lGgkoAop:IsA(HttpService:Base64Decode('TGluZUZvcmNl')) then  	
			lGgkoAop:Destroy()	
		end   		
	end 
end)   
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRlaW52aXNwYXJ0cw=='),{HttpService:Base64Decode('ZGVsZXRlaW52aXNpYmxlcGFydHM='),HttpService:Base64Decode('ZGlw')},nNvTYekW(ctrcbZGI, speaker)  		
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do   
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and lGgkoAop.Transparency == 1 and lGgkoAop.CanCollide then  
			lGgkoAop:Destroy()	
		end 	
	end  
end)   
local bGIctoar = {}  
ksqgBEpo(HttpService:Base64Decode('aW52aXNpYmxlcGFydHM='),{HttpService:Base64Decode('aW52aXNwYXJ0cw==')},nNvTYekW(ctrcbZGI, speaker)  
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and lGgkoAop.Transparency == 1 then  
			if not table.find(bGIctoar,lGgkoAop) then  
				table.insert(bGIctoar,lGgkoAop)  
			end  	
			lGgkoAop.Transparency = 0   
		end   	
	end 		
end)  
ksqgBEpo(HttpService:Base64Decode('dW5pbnZpc2libGVwYXJ0cw=='),{HttpService:Base64Decode('dW5pbnZpc3BhcnRz')},nNvTYekW(ctrcbZGI, speaker) 	
	for i,lGgkoAop in pairs(bGIctoar) do   		
		lGgkoAop.Transparency = 1
	end  
	bGIctoar = {}  	
end) 	
ksqgBEpo(HttpService:Base64Decode('YnRvb2xz'),{},nNvTYekW(ctrcbZGI, speaker)		
	for i = 1, 4 do 	
		local UzQhwDiv = Instance.new(HttpService:Base64Decode('SG9wcGVyQmlu')) 		
		UzQhwDiv.BinType = i 		
		UzQhwDiv.FrpOJNKH = UhfdZAQW()  		
		UzQhwDiv.Parent = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s='))   	
	end   		
end)	
ksqgBEpo(HttpService:Base64Decode('ZjN4'),{HttpService:Base64Decode('ZmV4')},nNvTYekW(ctrcbZGI, speaker)	
    loadstring(game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL3JlZnMvaGVhZHMvbWFpbi9mM3gubHVh')))()   		
end) 	
ksqgBEpo(HttpService:Base64Decode('cGFydHBhdGg='),{HttpService:Base64Decode('cGFydG5hbWU=')},nNvTYekW(ctrcbZGI, speaker)  
	cQtvgpcB() 		
end)		
ksqgBEpo(HttpService:Base64Decode('YW50aWFmaw=='),{HttpService:Base64Decode('YW50aWlkbGU=')},nNvTYekW(ctrcbZGI, speaker)
	local jUuDlKpJ = getconnections or get_signal_cons 
	if jUuDlKpJ then	
		for i,lGgkoAop in pairs(jUuDlKpJ(Players.FntTRqLK.Idled)) do   		
			if lGgkoAop[HttpService:Base64Decode('RGlzYWJsZQ==')] then
				lGgkoAop[HttpService:Base64Decode('RGlzYWJsZQ==')](lGgkoAop)   		
			elseif lGgkoAop[HttpService:Base64Decode('RGlzY29ubmVjdA==')] then  
				lGgkoAop[HttpService:Base64Decode('RGlzY29ubmVjdA==')](lGgkoAop) 	
			end   
		end   
	else   		
		local BRljAfnj = cloneref(game:GetService(HttpService:Base64Decode('VmlydHVhbFVzZXI=')))  
		Players.FntTRqLK.Idled:Connect(nNvTYekW()   		
			BRljAfnj:CaptureController() 	
			BRljAfnj:ClickButton2(Vector2.new()) 		
		end)   		
	end   
	if not (ctrcbZGI[1] and tostring(ctrcbZGI[1]) == HttpService:Base64Decode('bm9ub3RpZnk=')) then CFyCkJIA(HttpService:Base64Decode('QW50aSBJZGxl'),HttpService:Base64Decode('QW50aSBpZGxlIGlzIGVuYWJsZWQ=')) end		
end)   
ksqgBEpo(HttpService:Base64Decode('ZGF0YWxpbWl0'), {}, nNvTYekW(ctrcbZGI, speaker)  	
    local GysVmVFV = tonumber(ctrcbZGI[1])		
    if GysVmVFV then 
        local dyVJObfw = cloneref(game:GetService(HttpService:Base64Decode('TmV0d29ya0NsaWVudA==')))  
        dyVJObfw:SetOutgoingKBPSLimit(GysVmVFV)   
    end
end)		
ksqgBEpo(HttpService:Base64Decode('cmVwbGljYXRpb25sYWc='), {HttpService:Base64Decode('YmFja3RyYWNr')}, nNvTYekW(ctrcbZGI, speaker)   
	if tonumber(ctrcbZGI[1]) then  		
		settings():GetService(HttpService:Base64Decode('TmV0d29ya1NldHRpbmdz')).IncomingReplicationLag = ctrcbZGI[1]		
	end   		
end)  	
ksqgBEpo(HttpService:Base64Decode('bm9wcm9tcHRz'), {HttpService:Base64Decode('bm9wdXJjaGFzZXByb21wdHM=')}, nNvTYekW(ctrcbZGI, speaker)	
	COREGUI.PurchasePromptApp.Enabled = false 	
end)		
ksqgBEpo(HttpService:Base64Decode('c2hvd3Byb21wdHM='), {HttpService:Base64Decode('c2hvd3B1cmNoYXNlcHJvbXB0cw==')}, nNvTYekW(ctrcbZGI, speaker) 	
	COREGUI.PurchasePromptApp.Enabled = true  
end) 	
promptNewRig = nNvTYekW(speaker, rig)	
	local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  
	if LYfpysRB then  	
		AvatarEditorService:PromptSaveAvatar(LYfpysRB.HumanoidDescription, Enum.HumanoidRigType[rig]) 
		local jkbTUbqm = AvatarEditorService.PromptSaveAvatarCompleted:Wait()  		
		if jkbTUbqm == Enum.AvatarPromptResult.Success then   	
			vAOGaDPV(HttpService:Base64Decode('cmVzZXQ='))   	
		end  		
	end		
end   	
ksqgBEpo(HttpService:Base64Decode('cHJvbXB0cjY='), {}, nNvTYekW(ctrcbZGI, speaker)   
	promptNewRig(speaker, HttpService:Base64Decode('UjY=')) 
end)  
ksqgBEpo(HttpService:Base64Decode('cHJvbXB0cjE1'), {}, nNvTYekW(ctrcbZGI, speaker)	
	promptNewRig(speaker, HttpService:Base64Decode('UjE1'))   	
end)
ksqgBEpo(HttpService:Base64Decode('d2FsbHdhbGs='), {HttpService:Base64Decode('d2Fsa29ud2FsbHM=')}, nNvTYekW(ctrcbZGI, speaker)
    loadstring(game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL21haW4vd2FsbHdhbGtlci5sdWE=')))()   
end)		
ksqgBEpo(HttpService:Base64Decode('YWdl'),{},nNvTYekW(ctrcbZGI, speaker) 	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  
	local CObdcEjz = {}  		
	for i,lGgkoAop in pairs(aAJfXrEy) do 		
		local mkjkJNCq = Players[lGgkoAop]		
		table.insert(CObdcEjz, mkjkJNCq.FrpOJNKH..HttpService:Base64Decode('J3MgYWdlIGlzOiA=')..mkjkJNCq.AccountAge) 
	end  	
	CFyCkJIA(HttpService:Base64Decode('QWNjb3VudCBBZ2U='),table.concat(CObdcEjz, HttpService:Base64Decode('LFxu')))	
end) 		
ksqgBEpo(HttpService:Base64Decode('Y2hhdGFnZQ=='),{},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)
	local CObdcEjz = {} 	
	for i,lGgkoAop in pairs(aAJfXrEy) do  		
		local mkjkJNCq = Players[lGgkoAop]	
		table.insert(CObdcEjz, mkjkJNCq.FrpOJNKH..HttpService:Base64Decode('J3MgYWdlIGlzOiA=')..mkjkJNCq.AccountAge)		
	end   	
	local wYRxAtGH = table.concat(CObdcEjz, HttpService:Base64Decode('LCA=')) 		
	JAbKLEJj(wYRxAtGH)	
end)   		
ksqgBEpo(HttpService:Base64Decode('am9pbmRhdGU='),{HttpService:Base64Decode('amQ=')},nNvTYekW(ctrcbZGI, speaker)		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   		
	local LdPKAvkE = {}
	CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='),HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw==')) 	
	for i,lGgkoAop in pairs(aAJfXrEy) do 	
		local mNsHUuvo = game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly91c2Vycy5yb2Jsb3guY29tL3YxL3VzZXJzLw==')..Players[lGgkoAop].UserId) 	
		local mvrjrRxM = HttpService:JSONDecode(mNsHUuvo)
		local vlBJUnxb = mvrjrRxM[HttpService:Base64Decode('Y3JlYXRlZA==')]:sub(1,10)   
		local roYhKgpf = string.lRxnWDxC(vlBJUnxb,HttpService:Base64Decode('LQ=='))   
		table.insert(LdPKAvkE,Players[lGgkoAop].FrpOJNKH..HttpService:Base64Decode('IGpvaW5lZDog')..roYhKgpf[2]..HttpService:Base64Decode('Lw==')..roYhKgpf[3]..HttpService:Base64Decode('Lw==')..roYhKgpf[1])   		
	end 		
	CFyCkJIA(HttpService:Base64Decode('Sm9pbiBEYXRlIChNb250aC9EYXkvWWVhcik='),table.concat(LdPKAvkE, HttpService:Base64Decode('LFxu')))
end) 		
ksqgBEpo(HttpService:Base64Decode('Y2hhdGpvaW5kYXRl'),{HttpService:Base64Decode('Y2pk')},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   		
	local LdPKAvkE = {}   	
	CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='),HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw==')) 		
	for i,lGgkoAop in pairs(aAJfXrEy) do   	
		local mNsHUuvo = game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly91c2Vycy5yb2Jsb3guY29tL3YxL3VzZXJzLw==')..Players[lGgkoAop].UserId)   		
		local mvrjrRxM = HttpService:JSONDecode(mNsHUuvo) 	
		local vlBJUnxb = mvrjrRxM[HttpService:Base64Decode('Y3JlYXRlZA==')]:sub(1,10)  
		local roYhKgpf = string.lRxnWDxC(vlBJUnxb,HttpService:Base64Decode('LQ=='))  	
		table.insert(LdPKAvkE,Players[lGgkoAop].FrpOJNKH..HttpService:Base64Decode('IGpvaW5lZDog')..roYhKgpf[2]..HttpService:Base64Decode('Lw==')..roYhKgpf[3]..HttpService:Base64Decode('Lw==')..roYhKgpf[1])	
	end 		
	local wYRxAtGH = table.concat(LdPKAvkE, HttpService:Base64Decode('LCA=')) 	
	JAbKLEJj(wYRxAtGH)   
end) 	
ksqgBEpo(HttpService:Base64Decode('Y29weW5hbWU='),{HttpService:Base64Decode('Y29weXVzZXI=')},nNvTYekW(ctrcbZGI, speaker) 	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	for i,lGgkoAop in pairs(aAJfXrEy) do   
		local kfKkxmpZ = tostring(Players[lGgkoAop].FrpOJNKH)   
		oHhBFOUT(kfKkxmpZ) 	
	end		
end) 	
ksqgBEpo(HttpService:Base64Decode('dXNlcmlk'),{HttpService:Base64Decode('aWQ=')},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   	
	for i,lGgkoAop in pairs(aAJfXrEy) do  		
		local PmJFSHQD = tostring(Players[lGgkoAop].UserId) 
		CFyCkJIA(HttpService:Base64Decode('VXNlciBJRA=='),PmJFSHQD)  	
	end	
end)   		
ksqgBEpo(HttpService:Base64Decode('Y29weWlk'),{HttpService:Base64Decode('Y29weXVzZXJpZA==')},nNvTYekW(ctrcbZGI, speaker)		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  		
	for i,lGgkoAop in pairs(aAJfXrEy) do   	
		local PmJFSHQD = tostring(Players[lGgkoAop].UserId)
		oHhBFOUT(PmJFSHQD) 
	end 
end) 	
ksqgBEpo(HttpService:Base64Decode('Y3JlYXRvcmlk'),{HttpService:Base64Decode('Y3JlYXRvcg==')},nNvTYekW(ctrcbZGI, speaker)	
	if game.CreatorType == Enum.CreatorType.User then  	
		CFyCkJIA(HttpService:Base64Decode('Q3JlYXRvciBJRA=='),game.CreatorId) 		
	elseif game.CreatorType == Enum.CreatorType.Group then  
		local yQNuCBoT = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id  		
		speaker.UserId = yQNuCBoT	
		CFyCkJIA(HttpService:Base64Decode('Q3JlYXRvciBJRA=='),yQNuCBoT) 	
	end   
end)   	
ksqgBEpo(HttpService:Base64Decode('Y29weWNyZWF0b3JpZA=='),{HttpService:Base64Decode('Y29weWNyZWF0b3I=')},nNvTYekW(ctrcbZGI, speaker)   	
	if game.CreatorType == Enum.CreatorType.User then 
		oHhBFOUT(game.CreatorId) 	
		CFyCkJIA(HttpService:Base64Decode('Q29waWVkIElE'),HttpService:Base64Decode('Q29waWVkIGNyZWF0b3IgSUQgdG8gY2xpcGJvYXJk')) 	
	elseif game.CreatorType == Enum.CreatorType.Group then 	
		local yQNuCBoT = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id  		
		oHhBFOUT(yQNuCBoT)
		CFyCkJIA(HttpService:Base64Decode('Q29waWVkIElE'),HttpService:Base64Decode('Q29waWVkIGNyZWF0b3IgSUQgdG8gY2xpcGJvYXJk')) 		
	end   
end)  		
ksqgBEpo(HttpService:Base64Decode('c2V0Y3JlYXRvcmlk'),{HttpService:Base64Decode('c2V0Y3JlYXRvcg==')},nNvTYekW(ctrcbZGI, speaker)  		
	if game.CreatorType == Enum.CreatorType.User then 
		speaker.UserId = game.CreatorId		
		CFyCkJIA(HttpService:Base64Decode('U2V0IElE'),HttpService:Base64Decode('U2V0IFVzZXJJZCB0byA=')..game.CreatorId)  
	elseif game.CreatorType == Enum.CreatorType.Group then  
		local yQNuCBoT = GroupService:GetGroupInfoAsync(game.CreatorId).Owner.Id   
		speaker.UserId = yQNuCBoT   
		CFyCkJIA(HttpService:Base64Decode('U2V0IElE'),HttpService:Base64Decode('U2V0IFVzZXJJZCB0byA=')..yQNuCBoT)   		
	end 
end)   	
ksqgBEpo(HttpService:Base64Decode('YXBwZWFyYW5jZWlk'),{HttpService:Base64Decode('YWlk')},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  	
	for i,lGgkoAop in pairs(aAJfXrEy) do	
		local hIWeovfg = tostring(Players[lGgkoAop].CharacterAppearanceId)	
		CFyCkJIA(HttpService:Base64Decode('QXBwZWFyYW5jZSBJRA=='),hIWeovfg) 		
	end   
end)  	
ksqgBEpo(HttpService:Base64Decode('Y29weWFwcGVhcmFuY2VpZA=='),{HttpService:Base64Decode('Y2FpZA==')},nNvTYekW(ctrcbZGI, speaker)   	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   	
	for i,lGgkoAop in pairs(aAJfXrEy) do   		
		local hIWeovfg = tostring(Players[lGgkoAop].CharacterAppearanceId) 
		oHhBFOUT(hIWeovfg)   
	end	
end)  		
ksqgBEpo(HttpService:Base64Decode('bm9yZW5kZXI='),{},nNvTYekW(ctrcbZGI, speaker) 	
	RunService:Set3dRenderingEnabled(false)
end)	
ksqgBEpo(HttpService:Base64Decode('cmVuZGVy'),{},nNvTYekW(ctrcbZGI, speaker)  	
	RunService:Set3dRenderingEnabled(true) 	
end)  
ksqgBEpo(HttpService:Base64Decode('MjAyMm1hdGVyaWFscw=='),{HttpService:Base64Decode('dXNlMjAyMm1hdGVyaWFscw==')},nNvTYekW(ctrcbZGI, speaker)   		
	if sethidden then  		
		sethidden(MaterialService, HttpService:Base64Decode('VXNlMjAyMk1hdGVyaWFscw=='), true)  		
	else
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHNldGhpZGRlbnByb3BlcnR5KQ=='))		
	end  	
end)		
ksqgBEpo(HttpService:Base64Decode('dW4yMDIybWF0ZXJpYWxz'),{HttpService:Base64Decode('dW51c2UyMDIybWF0ZXJpYWxz')},nNvTYekW(ctrcbZGI, speaker)  	
	if sethidden then   
		sethidden(MaterialService, HttpService:Base64Decode('VXNlMjAyMk1hdGVyaWFscw=='), false)
	else  	
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHNldGhpZGRlbnByb3BlcnR5KQ=='))  	
	end 
end) 	
ksqgBEpo(HttpService:Base64Decode('Z290bw=='),{HttpService:Base64Decode('dG8=')},nNvTYekW(ctrcbZGI, speaker)   	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)		
	for i,lGgkoAop in pairs(aAJfXrEy)do		
		if Players[lGgkoAop].lZReEeCX ~= nil then   
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then   
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false 
				wait(.1)   
			end  
			wyxfunbJ(speaker.lZReEeCX).CFrame = wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame + Vector3.new(3,1,0)		
		end  		
	end 		
	vAOGaDPV(HttpService:Base64Decode('YnJlYWt2ZWxvY2l0eQ=='))   
end) 	
ksqgBEpo(HttpService:Base64Decode('dHdlZW5nb3Rv'),{HttpService:Base64Decode('dGdvdG8='),HttpService:Base64Decode('dHRv'),HttpService:Base64Decode('dHdlZW50bw==')},nNvTYekW(ctrcbZGI, speaker)	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	for i,lGgkoAop in pairs(aAJfXrEy)do   	
		if Players[lGgkoAop].lZReEeCX ~= nil then 		
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then 
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false  		
				wait(.1)   	
			end	
			TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame + Vector3.new(3,1,0)}):Play() 
		end   
	end 
	vAOGaDPV(HttpService:Base64Decode('YnJlYWt2ZWxvY2l0eQ=='))		
end)   		
ksqgBEpo(HttpService:Base64Decode('dmVoaWNsZWdvdG8='),{HttpService:Base64Decode('dmdvdG8='),HttpService:Base64Decode('dnRw'),HttpService:Base64Decode('dmVoaWNsZXRw')},nNvTYekW(ctrcbZGI, speaker) 	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   		
	for i,lGgkoAop in pairs(aAJfXrEy)do
		if Players[lGgkoAop].lZReEeCX ~= nil then  		
			local oJPNpKkq = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart
			local iloMGOeR = oJPNpKkq:FindFirstAncestorWhichIsA(HttpService:Base64Decode('TW9kZWw='))   	
			iloMGOeR:MoveTo(wyxfunbJ(Players[lGgkoAop].lZReEeCX).FZxyaMZC)		
		end		
	end	
end) 
ksqgBEpo(HttpService:Base64Decode('cHVsc2V0cA=='),{HttpService:Base64Decode('cHRw')},nNvTYekW(ctrcbZGI, speaker)	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	for i,lGgkoAop in pairs(aAJfXrEy)do 
		if Players[lGgkoAop].lZReEeCX ~= nil then		
			local ZSGctoPM = wyxfunbJ(speaker.lZReEeCX).CFrame   	
			local CpsQdmrT = ctrcbZGI[2] or 1 		
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then  		
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false 	
				wait(.1)  		
			end  		
			wyxfunbJ(speaker.lZReEeCX).CFrame = wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame + Vector3.new(3,1,0) 	
			wait(CpsQdmrT) 		
			wyxfunbJ(speaker.lZReEeCX).CFrame = ZSGctoPM
		end 		
	end   		
	vAOGaDPV(HttpService:Base64Decode('YnJlYWt2ZWxvY2l0eQ=='))		
end) 
local DaVFmxzj = {} 		
ksqgBEpo(HttpService:Base64Decode('dmVoaWNsZW5vY2xpcA=='),{HttpService:Base64Decode('dm5vY2xpcA==')},nNvTYekW(ctrcbZGI, speaker)  		
	DaVFmxzj = {}   
	local oJPNpKkq = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart
	local iloMGOeR = oJPNpKkq.Parent  		
	repeat		
		if iloMGOeR.ClassName ~= HttpService:Base64Decode('TW9kZWw=') then   
			iloMGOeR = iloMGOeR.Parent   	
		end
	until iloMGOeR.ClassName == HttpService:Base64Decode('TW9kZWw=')   	
	wait(0.1) 	
	vAOGaDPV(HttpService:Base64Decode('bm9jbGlw'))   
	for i,lGgkoAop in pairs(iloMGOeR:GetDescendants()) do		
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and lGgkoAop.CanCollide then  	
			table.insert(DaVFmxzj,lGgkoAop)   		
			lGgkoAop.CanCollide = false 
		end
	end   
end)  
ksqgBEpo(HttpService:Base64Decode('dmVoaWNsZWNsaXA='), {HttpService:Base64Decode('dmNsaXA='), HttpService:Base64Decode('dW52bm9jbGlw'), HttpService:Base64Decode('dW52ZWhpY2xlbm9jbGlw')}, nNvTYekW(ctrcbZGI, speaker)   		
	vAOGaDPV(HttpService:Base64Decode('Y2xpcA=='))   	
	for i, lGgkoAop in pairs(DaVFmxzj) do   
		lGgkoAop.CanCollide = true  		
	end 
	DaVFmxzj = {}   		
end) 	
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xldm5vY2xpcA=='), {}, nNvTYekW(ctrcbZGI, speaker)	
	vAOGaDPV(Clip and HttpService:Base64Decode('dm5vY2xpcA==') or HttpService:Base64Decode('dmNsaXA='))		
end)  
ksqgBEpo(HttpService:Base64Decode('Y2xpZW50YnJpbmc='),{HttpService:Base64Decode('Y2JyaW5n')},nNvTYekW(ctrcbZGI, speaker)  
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  		
	for i,lGgkoAop in pairs(aAJfXrEy)do  
		if Players[lGgkoAop].lZReEeCX ~= nil then   		
			if Players[lGgkoAop].lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) then   	
				Players[lGgkoAop].lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false
			end   	
			wait()		
			wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame = wyxfunbJ(speaker.lZReEeCX).CFrame + Vector3.new(3,1,0)  
		end 	
	end 	
end)		
local psgaUltQ = {}  
ksqgBEpo(HttpService:Base64Decode('bG9vcGJyaW5n'),{},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)
	for i,lGgkoAop in pairs(aAJfXrEy)do		
		task.spawn(nNvTYekW()	
			if Players[lGgkoAop].FrpOJNKH ~= speaker.FrpOJNKH and not vdOcSuCI(psgaUltQ, Players[lGgkoAop].FrpOJNKH) then   	
				table.insert(psgaUltQ, Players[lGgkoAop].FrpOJNKH)  
				local XFAupxbq = Players[lGgkoAop].FrpOJNKH   	
				local TjygLeHq=Players[lGgkoAop].lZReEeCX  
				local nvQLuaEj = 3		
				if ctrcbZGI[2] and CnkskpqQ(ctrcbZGI[2]) then		
					nvQLuaEj = ctrcbZGI[2]	
				end   		
				local cUCkAMLg = 0   
				if ctrcbZGI[3] and CnkskpqQ(ctrcbZGI[3]) then   	
					cUCkAMLg = ctrcbZGI[3] 	
				end	
				repeat  
					for i,CwgEliJJ in pairs(aAJfXrEy) do  		
						if Players:FindFirstChild(lGgkoAop) then 	
							TjygLeHq = Players[lGgkoAop].lZReEeCX
							if TjygLeHq~= nil and Players[lGgkoAop].lZReEeCX ~= nil and wyxfunbJ(TjygLeHq) and speaker.lZReEeCX ~= nil and wyxfunbJ(speaker.lZReEeCX) then 		
								wyxfunbJ(TjygLeHq).CFrame = wyxfunbJ(speaker.lZReEeCX).CFrame + Vector3.new(nvQLuaEj,1,0)   
							end  		
							wait(cUCkAMLg)   		
						else   	
							for tRbXwQwX,ESmLSjFg in pairs(psgaUltQ) do if ESmLSjFg == XFAupxbq then table.remove(psgaUltQ, tRbXwQwX) end end   		
						end		
					end   
				until not vdOcSuCI(psgaUltQ, XFAupxbq) 
			end 		
		end)   	
	end 		
end) 
ksqgBEpo(HttpService:Base64Decode('dW5sb29wYnJpbmc='),{HttpService:Base64Decode('bm9sb29wYnJpbmc=')},nNvTYekW(ctrcbZGI, speaker)
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  
	for i,lGgkoAop in pairs(aAJfXrEy)do	
		task.spawn(nNvTYekW() 	
			for tRbXwQwX,ESmLSjFg in pairs(psgaUltQ) do if ESmLSjFg == Players[lGgkoAop].FrpOJNKH then table.remove(psgaUltQ, tRbXwQwX) end end 		
		end)  
	end   		
end)  
local FRnyNzmN = false   
local XbqaYbdn = false
ksqgBEpo(HttpService:Base64Decode('d2Fsa3Rv'),{HttpService:Base64Decode('Zm9sbG93')},nNvTYekW(ctrcbZGI, speaker)   		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  
	for i,lGgkoAop in pairs(aAJfXrEy)do  	
		if Players[lGgkoAop].lZReEeCX ~= nil then  	
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then 
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false   	
				wait(.1)
			end
			FRnyNzmN = true   
			repeat wait()  		
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):MoveTo(wyxfunbJ(Players[lGgkoAop].lZReEeCX).FZxyaMZC) 
			until Players[lGgkoAop].lZReEeCX == nil or not wyxfunbJ(Players[lGgkoAop].lZReEeCX) or FRnyNzmN == false
		end  		
	end  
end) 	
ksqgBEpo(HttpService:Base64Decode('cGF0aGZpbmR3YWxrdG8='),{HttpService:Base64Decode('cGF0aGZpbmRmb2xsb3c=')},nNvTYekW(ctrcbZGI, speaker)  	
	FRnyNzmN = false  
	wait()  
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	local ltkLOOPM = Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))	
	local TeWlJvur = PathService:CreatePath()   		
	for i,lGgkoAop in pairs(aAJfXrEy)do 
		if Players[lGgkoAop].lZReEeCX ~= nil then 		
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then 		
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false 	
				wait(.1)  
			end
			FRnyNzmN = true		
			repeat wait()   		
				local QAIJFRsB, response = pcall(nNvTYekW()   	
					TeWlJvur:ComputeAsync(wyxfunbJ(speaker.lZReEeCX).FZxyaMZC, wyxfunbJ(Players[lGgkoAop].lZReEeCX).FZxyaMZC)	
					local GFjUceOL = TeWlJvur:GetWaypoints()   	
					local nvQLuaEj 
					for waypointIndex, waypoint in pairs(GFjUceOL) do 		
						local oZQtHIXz = waypoint.FZxyaMZC 
						ltkLOOPM:MoveTo(oZQtHIXz)   	
						repeat    	
							nvQLuaEj = (oZQtHIXz - ltkLOOPM.Parent.PrimaryPart.FZxyaMZC).qwzZAAew
							wait()
						until  		
						nvQLuaEj <= 5	
					end	 	
				end) 		
				if not QAIJFRsB then 		
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):MoveTo(wyxfunbJ(Players[lGgkoAop].lZReEeCX).FZxyaMZC) 		
				end   	
			until Players[lGgkoAop].lZReEeCX == nil or not wyxfunbJ(Players[lGgkoAop].lZReEeCX) or FRnyNzmN == false 	
		end		
	end  	
end)  		
ksqgBEpo(HttpService:Base64Decode('cGF0aGZpbmR3YWxrdG93YXlwb2ludA=='),{HttpService:Base64Decode('cGF0aGZpbmR3YWxrdG93cA==')},nNvTYekW(ctrcbZGI, speaker) 	
	XbqaYbdn = false
	wait()   		
	local BNkFsuMs = tostring(vqgOCmxq(1)) 		
	local ltkLOOPM = Players.FntTRqLK.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))   
	local TeWlJvur = PathService:CreatePath()   		
	if speaker.lZReEeCX then  		
		for i,OpEnJPoA in pairs(WayPoints) do 	
			if tostring(WayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then		
				if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then  	
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false   		
					wait(.1)   		
				end  	
				local PRbIrCcQ = Vector3.new(WayPoints[i].COORD[1], WayPoints[i].COORD[2], WayPoints[i].COORD[3]) 	
				XbqaYbdn = true   	
				repeat wait()   	
					local QAIJFRsB, response = pcall(nNvTYekW()   	
						TeWlJvur:ComputeAsync(wyxfunbJ(speaker.lZReEeCX).FZxyaMZC, PRbIrCcQ)		
						local GFjUceOL = TeWlJvur:GetWaypoints() 	
						local nvQLuaEj 		
						for waypointIndex, waypoint in pairs(GFjUceOL) do	
							local oZQtHIXz = waypoint.FZxyaMZC 	
							ltkLOOPM:MoveTo(oZQtHIXz)   
							repeat  	
								nvQLuaEj = (oZQtHIXz - ltkLOOPM.Parent.PrimaryPart.FZxyaMZC).qwzZAAew   
								wait() 	
							until 	
							nvQLuaEj <= 5   
						end 
					end)		
					if not QAIJFRsB then   		
						speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):MoveTo(PRbIrCcQ)   	
					end  		
				until not speaker.lZReEeCX or XbqaYbdn == false  	
			end
		end   
		for i,OpEnJPoA in pairs(pWayPoints) do	
			if tostring(pWayPoints[i].NAME):lower() == tostring(BNkFsuMs):lower() then 	
				if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false 		
					wait(.1)	
				end 
				local PRbIrCcQ = pWayPoints[i].COORD[1].FZxyaMZC		
				XbqaYbdn = true
				repeat wait()	
					local QAIJFRsB, response = pcall(nNvTYekW()  	
						TeWlJvur:ComputeAsync(wyxfunbJ(speaker.lZReEeCX).FZxyaMZC, PRbIrCcQ)  		
						local GFjUceOL = TeWlJvur:GetWaypoints()   	
						local nvQLuaEj  		
						for waypointIndex, waypoint in pairs(GFjUceOL) do  	
							local oZQtHIXz = waypoint.FZxyaMZC 	
							ltkLOOPM:MoveTo(oZQtHIXz)	
							repeat   	
								nvQLuaEj = (oZQtHIXz - ltkLOOPM.Parent.PrimaryPart.FZxyaMZC).qwzZAAew   		
								wait() 	
							until		
							nvQLuaEj <= 5		
						end 	
					end)   		
					if not QAIJFRsB then		
						speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):MoveTo(PRbIrCcQ) 
					end  	
				until not speaker.lZReEeCX or XbqaYbdn == false 	
			end  	
		end   
	end 	
end) 		
ksqgBEpo(HttpService:Base64Decode('dW53YWxrdG8='),{HttpService:Base64Decode('bm93YWxrdG8='),HttpService:Base64Decode('dW5mb2xsb3c='),HttpService:Base64Decode('bm9mb2xsb3c=')},nNvTYekW(ctrcbZGI, speaker) 		
	FRnyNzmN = false  		
	XbqaYbdn = false 
end)  
ksqgBEpo(HttpService:Base64Decode('b3JiaXQ='), {}, nNvTYekW(ctrcbZGI, speaker)  	
    vAOGaDPV(HttpService:Base64Decode('dW5vcmJpdCBub25vdGlmeQ=='))   
    local HJDZBMru = Players:FindFirstChild(KpWujDEJ(ctrcbZGI[1], speaker)[1]) 
    local IglyvNYH = wyxfunbJ(speaker.lZReEeCX) 
    local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))   	
    if HJDZBMru and HJDZBMru.lZReEeCX and wyxfunbJ(HJDZBMru.lZReEeCX) and IglyvNYH and LYfpysRB then   	
        local AEjUNyof = 0   	
        local xbqBGeeX = tonumber(ctrcbZGI[2]) or 0.2		
        local nvQLuaEj = tonumber(ctrcbZGI[3]) or 6   		
        orbit1 = RunService.Heartbeat:Connect(nNvTYekW()  		
            pcall(nNvTYekW()   	
                AEjUNyof = AEjUNyof + xbqBGeeX 
                IglyvNYH.CFrame = CFrame.new(wyxfunbJ(HJDZBMru.lZReEeCX).FZxyaMZC) * CFrame.Angles(0, math.rad(AEjUNyof), 0) * CFrame.new(nvQLuaEj, 0, 0)   
            end) 		
        end)   
        orbit2 = RunService.RenderStepped:Connect(nNvTYekW() 		
            pcall(nNvTYekW()   
                IglyvNYH.CFrame = CFrame.new(IglyvNYH.FZxyaMZC, wyxfunbJ(HJDZBMru.lZReEeCX).FZxyaMZC)	
            end) 		
        end)   
        orbit3 = LYfpysRB.Died:Connect(nNvTYekW() vAOGaDPV(HttpService:Base64Decode('dW5vcmJpdA==')) end) 		
        orbit4 = LYfpysRB.Seated:Connect(nNvTYekW(value) if value then vAOGaDPV(HttpService:Base64Decode('dW5vcmJpdA==')) end end)  	
        CFyCkJIA(HttpService:Base64Decode('T3JiaXQ='), HttpService:Base64Decode('U3RhcnRlZCBvcmJpdGluZyA=') .. formatUsername(HJDZBMru))   		
    end   	
end) 
ksqgBEpo(HttpService:Base64Decode('dW5vcmJpdA=='), {}, nNvTYekW(ctrcbZGI, speaker)  
    if orbit1 then orbit1:Disconnect() end 		
    if orbit2 then orbit2:Disconnect() end
    if orbit3 then orbit3:Disconnect() end   	
    if orbit4 then orbit4:Disconnect() end 	
    if ctrcbZGI[1] ~= HttpService:Base64Decode('bm9ub3RpZnk=') then CFyCkJIA(HttpService:Base64Decode('T3JiaXQ='), HttpService:Base64Decode('U3RvcHBlZCBvcmJpdGluZyBwbGF5ZXI=')) end   	
end)   	
ksqgBEpo(HttpService:Base64Decode('ZnJlZXpl'),{HttpService:Base64Decode('ZnI=')},nNvTYekW(ctrcbZGI, speaker)		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  	
	if aAJfXrEy ~= nil then  	
		for i,lGgkoAop in pairs(aAJfXrEy) do	
			task.spawn(nNvTYekW()   
				for i, NCBjKlfQ in next, Players[lGgkoAop].lZReEeCX:GetDescendants() do 		
					if NCBjKlfQ:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and not NCBjKlfQ.Anchored then   		
						NCBjKlfQ.Anchored = true  		
					end 
				end	
			end) 	
		end  
	end 
end)  
ksqgBEpo(HttpService:Base64Decode('dGhhdw=='),{HttpService:Base64Decode('dW5mcmVlemU='),HttpService:Base64Decode('dW5mcg==')},nNvTYekW(ctrcbZGI, speaker)   		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  	
	if aAJfXrEy ~= nil then
		for i,lGgkoAop in pairs(aAJfXrEy) do  
			task.spawn(nNvTYekW()  		
				for i, NCBjKlfQ in next, Players[lGgkoAop].lZReEeCX:GetDescendants() do	
					if NCBjKlfQ.FrpOJNKH ~= floatName and NCBjKlfQ:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and NCBjKlfQ.Anchored then  	
						NCBjKlfQ.Anchored = false  		
					end
				end 	
			end)  	
		end 	
	end 		
end)	
oofing = false  		
ksqgBEpo(HttpService:Base64Decode('bG9vcG9vZg=='),{},nNvTYekW(ctrcbZGI, speaker)  	
	oofing = true   		
	repeat wait(0.1)   		
		for i,lGgkoAop in pairs(Players:GetPlayers()) do
			if lGgkoAop.lZReEeCX ~= nil and lGgkoAop.lZReEeCX:FindFirstChildHttpService:Base64Decode('SGVhZA==') then  	
				for OpEnJPoA,NCBjKlfQ in pairs(lGgkoAop.lZReEeCX.yrKsYgVR:GetChildren()) do 
					if NCBjKlfQ:IsAHttpService:Base64Decode('U291bmQ=') then NCBjKlfQ.Playing = true end		
				end 		
			end  
		end   
	until oofing == false  	
end)	
ksqgBEpo(HttpService:Base64Decode('dW5sb29wb29m'),{},nNvTYekW(ctrcbZGI, speaker)  
	oofing = false 
end)		
local ptVGsQeq = false	
ksqgBEpo(HttpService:Base64Decode('bXV0ZWJvb21ib3g='),{},nNvTYekW(ctrcbZGI, speaker)
	if not ptVGsQeq and SoundService.RespectFilteringEnabled then ptVGsQeq = true CFyCkJIA(HttpService:Base64Decode('UmVzcGVjdEZpbHRlcmluZ0VuYWJsZWQ='),HttpService:Base64Decode('UmVzcGVjdEZpbHRlcmluZ0VuYWJsZWQgaXMgc2V0IHRvIHRydWUgKHRoZSBjb21tYW5kIHdpbGwgc3RpbGwgd29yayBidXQgbWF5IG9ubHkgYmUgY2xpZW50c2lkZWQp')) end 		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  		
	if aAJfXrEy ~= nil then   	
		for i,lGgkoAop in pairs(aAJfXrEy) do	
			task.spawn(nNvTYekW()		
				for i, NCBjKlfQ in next, Players[lGgkoAop].lZReEeCX:GetDescendants() do   	
					if NCBjKlfQ:IsA(HttpService:Base64Decode('U291bmQ=')) and NCBjKlfQ.Playing == true then  	
						NCBjKlfQ.Playing = false 	
					end   
				end  	
				for i, NCBjKlfQ in next, Players[lGgkoAop]:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):GetDescendants() do   
					if NCBjKlfQ:IsA(HttpService:Base64Decode('U291bmQ=')) and NCBjKlfQ.Playing == true then 		
						NCBjKlfQ.Playing = false  		
					end   
				end		
			end) 		
		end
	end 		
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5tdXRlYm9vbWJveA=='),{},nNvTYekW(ctrcbZGI, speaker)  	
	if not ptVGsQeq and SoundService.RespectFilteringEnabled then ptVGsQeq = true CFyCkJIA(HttpService:Base64Decode('UmVzcGVjdEZpbHRlcmluZ0VuYWJsZWQ='),HttpService:Base64Decode('UmVzcGVjdEZpbHRlcmluZ0VuYWJsZWQgaXMgc2V0IHRvIHRydWUgKHRoZSBjb21tYW5kIHdpbGwgc3RpbGwgd29yayBidXQgbWF5IG9ubHkgYmUgY2xpZW50c2lkZWQp')) end	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  	
	if aAJfXrEy ~= nil then		
		for i,lGgkoAop in pairs(aAJfXrEy) do 	
			task.spawn(nNvTYekW() 		
				for i, NCBjKlfQ in next, Players[lGgkoAop].lZReEeCX:GetDescendants() do   	
					if NCBjKlfQ:IsA(HttpService:Base64Decode('U291bmQ=')) and NCBjKlfQ.Playing == false then
						NCBjKlfQ.Playing = true		
					end  		
				end 
			end)   	
		end  	
	end   		
end) 		
ksqgBEpo(HttpService:Base64Decode('cmVzZXQ='), {}, nNvTYekW(ctrcbZGI, speaker)  		
    local LYfpysRB = speaker.lZReEeCX and speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))   		
    if replicatesignal then 		
        replicatesignal(speaker.Kill)  
    elseif LYfpysRB then	
        LYfpysRB:ChangeState(Enum.HumanoidStateType.Dead) 		
    else  		
        speaker.lZReEeCX:BreakJoints()	
    end  	
end)
ksqgBEpo(HttpService:Base64Decode('ZnJlZXplYW5pbXM='),{},nNvTYekW(ctrcbZGI, speaker)		
	local kcVEGFqM = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) or speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('QW5pbWF0aW9uQ29udHJvbGxlcg=='))
	local XtOtctXy = kcVEGFqM:GetPlayingAnimationTracks()  		
	for OpEnJPoA, lGgkoAop in pairs(XtOtctXy) do   		
		lGgkoAop:AdjustSpeed(0)  		
	end
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5mcmVlemVhbmltcw=='),{},nNvTYekW(ctrcbZGI, speaker)  	
	local kcVEGFqM = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) or speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('QW5pbWF0aW9uQ29udHJvbGxlcg=='))   	
	local XtOtctXy = kcVEGFqM:GetPlayingAnimationTracks()   
	for OpEnJPoA, lGgkoAop in pairs(XtOtctXy) do 	
		lGgkoAop:AdjustSpeed(1)		
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('cmVzcGF3bg=='), {}, nNvTYekW(ctrcbZGI, speaker)	
    fYSGUidR(speaker)   
end) 	
ksqgBEpo(HttpService:Base64Decode('cmVmcmVzaA=='), {HttpService:Base64Decode('cmU=')}, nNvTYekW(ctrcbZGI, speaker)		
    RtxFtDOn(speaker)  
end)  		
ksqgBEpo(HttpService:Base64Decode('Z29k'), {}, nNvTYekW(ctrcbZGI, speaker)  		
    AvTuiZEx(speaker)  
    local mrfWpHfg = workspace.CurrentCamera  
    local EVuBPBBC, ObyXXXSF = speaker.lZReEeCX, mrfWpHfg.CFrame
    local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))	
    local yVdeLXes = ZdvfjJrJ:Clone()   	
    yVdeLXes.Parent = cFlbMRaO	
    speaker.lZReEeCX = nil 		
    yVdeLXes:SetStateEnabled(15, false)  		
    yVdeLXes:SetStateEnabled(1, false)  	
    yVdeLXes:SetStateEnabled(0, false)   
    yVdeLXes.BreakJointsOnDeath = true 		
    ZdvfjJrJ:Destroy() 
    speaker.lZReEeCX = cFlbMRaO		
    mrfWpHfg.CameraSubject = yVdeLXes   		
    mrfWpHfg.CFrame = task.wait() and DpljNZwD 	
    yVdeLXes.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None   
    local ZjJwErcq = EVuBPBBC:FindFirstChild(HttpService:Base64Decode('QW5pbWF0ZQ==')) 		
    if ZjJwErcq then
        ZjJwErcq.Disabled = true	
        task.wait()  		
        ZjJwErcq.Disabled = false  		
    end
    yVdeLXes.Health = yVdeLXes.MaxHealth	
end) 	
invisRunning = false  	
ksqgBEpo(HttpService:Base64Decode('aW52aXNpYmxl'),{HttpService:Base64Decode('aW52aXM=')},nNvTYekW(ctrcbZGI, speaker)   
	if invisRunning then return end   
	invisRunning = true		
	local SoGHTZaE = speaker	
	repeat wait(.1) until SoGHTZaE.lZReEeCX  	
	local lZReEeCX = SoGHTZaE.lZReEeCX   		
	lZReEeCX.Archivable = true  
	local UGgcNuLw = false  		
	local YxjJpBUA = true  
	local lbVgPvEI = lZReEeCX:Clone()  
	lbVgPvEI.Parent = Lighting	
	local PJWbNpFF = workspace.FallenPartsDestroyHeight 
	lbVgPvEI.FrpOJNKH = '' 		
	local iLIVSUaj
	local xNUTnljj = RunService.Stepped:Connect(nNvTYekW() 		
		pcall(nNvTYekW()	
			local TPffvdfI		
			if tostring(PJWbNpFF):findHttpService:Base64Decode('LQ==') then 		
				TPffvdfI = true 	
			else   	
				TPffvdfI = false   
			end   		
			local ObyXXXSF = SoGHTZaE.lZReEeCX.HumanoidRootPart.FZxyaMZC   	
			local lBLsqYQC = tostring(ObyXXXSF)	
			local HCyNELxt = lBLsqYQC:lRxnWDxC(HttpService:Base64Decode('LCA=')) 		
			local IqWNKzOD = tonumber(HCyNELxt[1])		
			local jtGagefg = tonumber(HCyNELxt[2]) 	
			local DadYeUNF = tonumber(HCyNELxt[3])   
			if TPffvdfI == true then 
				if jtGagefg <= PJWbNpFF then 	
					GxEXLHGd()   		
				end  
			elseif TPffvdfI == false then
				if jtGagefg >= PJWbNpFF then  		
					GxEXLHGd()		
				end   		
			end  		
		end)   	
	end)  	
	for i,lGgkoAop in pairs(lbVgPvEI:GetDescendants())do 		
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then 	
			if lGgkoAop.FrpOJNKH == HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==') then		
				lGgkoAop.Transparency = 1 
			else   	
				lGgkoAop.Transparency = .5	
			end 		
		end  		
	end   
	nNvTYekW GxEXLHGd()  
		YxjJpBUA = false   
		if UGgcNuLw == true then  	
			pcall(nNvTYekW() 		
				SoGHTZaE.lZReEeCX = lZReEeCX   
				wait()	
				lZReEeCX.Parent = workspace 
				lZReEeCX:FindFirstChildWhichIsAHttpService:Base64Decode('SHVtYW5vaWQ='):Destroy()   	
				UGgcNuLw = false  
				lbVgPvEI.Parent = nil 		
				invisRunning = false
			end)  
		elseif UGgcNuLw == false then   
			pcall(nNvTYekW()   	
				SoGHTZaE.lZReEeCX = lZReEeCX   		
				wait()		
				lZReEeCX.Parent = workspace		
				lZReEeCX:FindFirstChildWhichIsAHttpService:Base64Decode('SHVtYW5vaWQ='):Destroy()
				mUQmAMqb()   
			end)   
		end  
	end
	local jwqImVZf   
	jwqImVZf = lbVgPvEI:FindFirstChildOfClassHttpService:Base64Decode('SHVtYW5vaWQ=').Died:Connect(nNvTYekW()
		GxEXLHGd()  
		jwqImVZf:Disconnect()   	
	end)   	
	if UGgcNuLw == true then return end	
	UGgcNuLw = true 	
	iLIVSUaj = workspace.CurrentCamera.CFrame  	
	local PwabIAxu = SoGHTZaE.lZReEeCX.HumanoidRootPart.CFrame	
	lZReEeCX:MoveTo(Vector3.new(0,math.pi*1000000,0))  	
	workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable	
	wait(.2)  	
	workspace.CurrentCamera.CameraType = Enum.CameraType.Custom	
	lbVgPvEI = lbVgPvEI 		
	lZReEeCX.Parent = Lighting		
	lbVgPvEI.Parent = workspace   
	lbVgPvEI.HumanoidRootPart.CFrame = PwabIAxu   		
	SoGHTZaE.lZReEeCX = lbVgPvEI   	
local VPqlacPv = true
local DWnQigHi = true
local cxsxouTa = nil
local function kWTkcLrk() return 25 end
local function fRHzAaja() return 13 end 	
	vAOGaDPV(HttpService:Base64Decode('Zml4Y2Ft'))	
	SoGHTZaE.lZReEeCX.ZeqCbfQZ.Disabled = true 		
	SoGHTZaE.lZReEeCX.ZeqCbfQZ.Disabled = false 	
	nNvTYekW mUQmAMqb() 
		if UGgcNuLw == false then return end 	
		xNUTnljj:Disconnect()   	
		jwqImVZf:Disconnect()	
		iLIVSUaj = workspace.CurrentCamera.CFrame 
		lZReEeCX = lZReEeCX
		local PwabIAxu = SoGHTZaE.lZReEeCX.HumanoidRootPart.CFrame	
		lZReEeCX.HumanoidRootPart.CFrame = PwabIAxu   
		lbVgPvEI:Destroy()		
		SoGHTZaE.lZReEeCX = lZReEeCX 	
		lZReEeCX.Parent = workspace  
		UGgcNuLw = false
		SoGHTZaE.lZReEeCX.ZeqCbfQZ.Disabled = true	
		SoGHTZaE.lZReEeCX.ZeqCbfQZ.Disabled = false
		jwqImVZf = lZReEeCX:FindFirstChildOfClassHttpService:Base64Decode('SHVtYW5vaWQ=').Died:Connect(nNvTYekW()		
			GxEXLHGd()
			jwqImVZf:Disconnect()  		
		end)   		
		invisRunning = false  		
	end  
	CFyCkJIA(HttpService:Base64Decode('SW52aXNpYmxl'),HttpService:Base64Decode('WW91IG5vdyBhcHBlYXIgaW52aXNpYmxlIHRvIG90aGVyIHBsYXllcnM='))	
end)  
ksqgBEpo(HttpService:Base64Decode('dmlzaWJsZQ=='), {HttpService:Base64Decode('dmlz'),HttpService:Base64Decode('dW5pbnZpc2libGU=')}, nNvTYekW(ctrcbZGI, speaker) 		
	mUQmAMqb()   		
end) 		
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlaW52aXM='), {}, nNvTYekW(ctrcbZGI, speaker)	
	vAOGaDPV(invisRunning and HttpService:Base64Decode('dmlzaWJsZQ==') or HttpService:Base64Decode('aW52aXNpYmxl'))
end)   	
ksqgBEpo(HttpService:Base64Decode('dG9vbGludmlzaWJsZQ=='),{HttpService:Base64Decode('dG9vbGludmlz'),HttpService:Base64Decode('dGludmlz')},nNvTYekW(ctrcbZGI, speaker)  	
	local EVuBPBBC  = Players.FntTRqLK.lZReEeCX   	
	local XHzPEzQN = false		
	local nqIetXbb = false		
	local jATdyNnM = Instance.new(HttpService:Base64Decode('UGFydA==')) 
	jATdyNnM.Anchored = true  	
	jATdyNnM.CanCollide = true   	
	jATdyNnM.eCEGCheh = Vector3.new(10,1,10)   		
	jATdyNnM.FZxyaMZC = Vector3.new(0,10000,0)  	
	jATdyNnM.Parent = workspace		
	local DNScwfeQ = jATdyNnM.Touched:connect(nNvTYekW(odHrkVop)		
		if (odHrkVop.Parent.FrpOJNKH == Players.FntTRqLK.FrpOJNKH) then
			if XHzPEzQN == false then 
				XHzPEzQN = true   	
				local nNvTYekW apply()	
					local XgwhdFmK = EVuBPBBC.HumanoidRootPart:Clone() 
					wait(.25)   	
					EVuBPBBC.HumanoidRootPart:Destroy()	
					XgwhdFmK.Parent = EVuBPBBC 		
					EVuBPBBC:MoveTo(loc)  	
					XHzPEzQN = false   		
				end  
				if EVuBPBBC then   		
					apply()		
				end 
			end 
		end		
	end)		
	repeat wait() until EVuBPBBC 	
	local kWorCZiU 
	kWorCZiU = Players.FntTRqLK.CharacterAdded:connect(nNvTYekW(cFlbMRaO) 		
		DNScwfeQ:Disconnect()	
		jATdyNnM:Destroy()	
		kWorCZiU:Disconnect()  		
	end) 	
	loc = EVuBPBBC.HumanoidRootPart.FZxyaMZC	
	EVuBPBBC:MoveTo(jATdyNnM.FZxyaMZC + Vector3.new(0,.5,0)) 
end)  
ksqgBEpo(HttpService:Base64Decode('c3RyZW5ndGhlbg=='), {}, nNvTYekW(ctrcbZGI, speaker)		
	for OpEnJPoA, child in pairs(speaker.lZReEeCX:GetDescendants()) do  	
		if child.ClassName == HttpService:Base64Decode('UGFydA==') then  	
			if ctrcbZGI[1] then 		
				child.CustomPhysicalProperties = PhysicalProperties.new(ctrcbZGI[1], 0.3, 0.5)   
			else   
				child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)		
			end		
		end  
	end 	
end)  	
ksqgBEpo(HttpService:Base64Decode('d2Vha2Vu'), {}, nNvTYekW(ctrcbZGI, speaker)  	
	for OpEnJPoA, child in pairs(speaker.lZReEeCX:GetDescendants()) do 
		if child.ClassName == HttpService:Base64Decode('UGFydA==') then		
			if ctrcbZGI[1] then	
				child.CustomPhysicalProperties = PhysicalProperties.new(-ctrcbZGI[1], 0.3, 0.5)  		
			else   	
				child.CustomPhysicalProperties = PhysicalProperties.new(0, 0.3, 0.5)   		
			end  	
		end 		
	end  	
end)  	
ksqgBEpo(HttpService:Base64Decode('dW53ZWFrZW4='), {HttpService:Base64Decode('dW5zdHJlbmd0aGVu')}, nNvTYekW(ctrcbZGI, speaker)   
	for OpEnJPoA, child in pairs(speaker.lZReEeCX:GetDescendants()) do  	
		if child.ClassName == HttpService:Base64Decode('UGFydA==') then
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)   	
		end  
	end
end)  
ksqgBEpo(HttpService:Base64Decode('YnJlYWt2ZWxvY2l0eQ=='), {}, nNvTYekW(ctrcbZGI, speaker)		
	local hDpMexTg, V3 = false, Vector3.new(0, 0, 0)  		
	delay(1, nNvTYekW() 	
		hDpMexTg = true  		
	end)   		
	while not hDpMexTg do  	
		for OpEnJPoA, lGgkoAop in ipairs(speaker.lZReEeCX:GetDescendants()) do  	
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then   	
				lGgkoAop.Velocity, lGgkoAop.RotVelocity = V3, V3   
			end  	
		end		
		wait()  
	end		
end)   
ksqgBEpo(HttpService:Base64Decode('anBvd2Vy'),{HttpService:Base64Decode('anVtcHBvd2Vy'),HttpService:Base64Decode('anA=')},nNvTYekW(ctrcbZGI, speaker)  		
	local mUmMsISP = ctrcbZGI[1] or 50
	if CnkskpqQ(mUmMsISP) then	
		if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).UseJumpPower then  		
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).JumpPower = mUmMsISP  		
		else
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).JumpHeight  = mUmMsISP  
		end   		
	end   		
end)   	
ksqgBEpo(HttpService:Base64Decode('bWF4c2xvcGVhbmdsZQ=='), {HttpService:Base64Decode('bXNh')}, nNvTYekW(ctrcbZGI, speaker)   
	local vJEIYBoX = ctrcbZGI[1] or 89  
	if CnkskpqQ(vJEIYBoX) then 	
		speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')).MaxSlopeAngle = vJEIYBoX   	
	end   
end) 
ksqgBEpo(HttpService:Base64Decode('Z3Jhdml0eQ=='), {HttpService:Base64Decode('Z3Jhdg==')}, nNvTYekW(ctrcbZGI, speaker)	
	local GqHmznWV = ctrcbZGI[1] or 196.2 
	if CnkskpqQ(GqHmznWV) then   		
		workspace.Gravity = GqHmznWV  
	end  
end)   	
ksqgBEpo(HttpService:Base64Decode('aGlwaGVpZ2h0'), {HttpService:Base64Decode('aGhlaWdodA==')}, nNvTYekW(ctrcbZGI, speaker)  	
    local yFYwKFTf = ctrcbZGI[1] or (wmXGMjmI(speaker) and 2.1 or 0)  	
    if CnkskpqQ(yFYwKFTf) then  
        speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')).HipHeight = yFYwKFTf   		
    end 
end)
ksqgBEpo(HttpService:Base64Decode('ZGFuY2U='), {}, nNvTYekW(ctrcbZGI, speaker) 	
	pcall(vAOGaDPV, HttpService:Base64Decode('dW5kYW5jZQ=='))  	
	local eOXhxAzI = {HttpService:Base64Decode('Mjc3ODkzNTk='), HttpService:Base64Decode('MzAxOTYxMTQ='), HttpService:Base64Decode('MjQ4MjYzMjYw'), HttpService:Base64Decode('NDU4MzQ5MjQ='), HttpService:Base64Decode('MzM3OTYwNTk='), HttpService:Base64Decode('Mjg0ODgyNTQ='), HttpService:Base64Decode('NTIxNTU3Mjg=')}  		
	if wmXGMjmI(speaker) then   		
		eOXhxAzI = {HttpService:Base64Decode('MzMzMzQzMjQ1NA=='), HttpService:Base64Decode('NDU1NTgwODIyMA=='), HttpService:Base64Decode('NDA0OTAzNzYwNA=='), HttpService:Base64Decode('NDU1NTc4Mjg5Mw=='), HttpService:Base64Decode('MTAyMTQzMTEyODI='), HttpService:Base64Decode('MTA3MTQwMTAzMzc='), HttpService:Base64Decode('MTA3MTM5ODE3MjM='), HttpService:Base64Decode('MTA3MTQzNzI1MjY='), HttpService:Base64Decode('MTA3MTQwNzY5ODE='), HttpService:Base64Decode('MTA3MTQzOTIxNTE='), HttpService:Base64Decode('MTE0NDQ0NDM1NzY=')} 		
	end
	local FEoPSYQN = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u'))  	
	FEoPSYQN.IxScdvCg = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLw==') .. eOXhxAzI[math.random(1, #eOXhxAzI)] 		
	danceTrack = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):LoadAnimation(FEoPSYQN)   		
	danceTrack.Looped = true   		
	danceTrack:Play() 
end)
ksqgBEpo(HttpService:Base64Decode('dW5kYW5jZQ=='), {HttpService:Base64Decode('bm9kYW5jZQ==')}, nNvTYekW(ctrcbZGI, speaker)   	
	danceTrack:Stop()   		
	danceTrack:Destroy()		
end)   		
ksqgBEpo(HttpService:Base64Decode('bm9saW1icw=='),{HttpService:Base64Decode('cmxpbWJz')},nNvTYekW(ctrcbZGI, speaker)  		
	if wmXGMjmI(speaker) then	
		for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do   
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHRVcHBlckxlZw==') or  	
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdFVwcGVyTGVn') or  
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHRVcHBlckFybQ==') or 	
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdFVwcGVyQXJt') then 
				lGgkoAop:Destroy()   		
			end 		
		end   	
	else   		
		for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do 		
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and  		
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHQgTGVn') or   
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdCBMZWc=') or  
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHQgQXJt') or 		
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdCBBcm0=') then  	
				lGgkoAop:Destroy()		
			end   		
		end  	
	end  		
end)   
ksqgBEpo(HttpService:Base64Decode('bm9hcm1z'),{HttpService:Base64Decode('cmFybXM=')},nNvTYekW(ctrcbZGI, speaker)  	
	if wmXGMjmI(speaker) then  
		for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do		
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and	
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHRVcHBlckFybQ==') or	
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdFVwcGVyQXJt') then  	
				lGgkoAop:Destroy()  
			end 	
		end   	
	else 	
		for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do		
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and 
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHQgQXJt') or  		
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdCBBcm0=') then 		
				lGgkoAop:Destroy()  
			end 		
		end   	
	end  	
end)   	
ksqgBEpo(HttpService:Base64Decode('bm9sZWdz'),{HttpService:Base64Decode('cmxlZ3M=')},nNvTYekW(ctrcbZGI, speaker)	
	if wmXGMjmI(speaker) then 
		for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and   		
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHRVcHBlckxlZw==') or   		
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdFVwcGVyTGVn') then   		
				lGgkoAop:Destroy()  		
			end 	
		end 	
	else 		
		for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do   		
			if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('UmlnaHQgTGVn') or		
				lGgkoAop.FrpOJNKH == HttpService:Base64Decode('TGVmdCBMZWc=') then  		
				lGgkoAop:Destroy()
			end   		
		end 	
	end  		
end)		
ksqgBEpo(HttpService:Base64Decode('c2l0'), {}, nNvTYekW(ctrcbZGI, speaker)  	
	speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = true 		
end)  	
ksqgBEpo(HttpService:Base64Decode('bGF5'), {HttpService:Base64Decode('bGF5ZG93bg==')}, nNvTYekW(ctrcbZGI, speaker) 	
	local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  		
	LYfpysRB.Sit = true   	
	task.wait(0.1) 
	LYfpysRB.RootPart.CFrame = LYfpysRB.RootPart.CFrame * CFrame.Angles(math.pi * 0.5, 0, 0)  	
	for OpEnJPoA, lGgkoAop in ipairs(LYfpysRB:GetPlayingAnimationTracks()) do 
		lGgkoAop:Stop()   	
	end 		
end)   
ksqgBEpo(HttpService:Base64Decode('c2l0d2Fsaw=='), {}, nNvTYekW(ctrcbZGI, speaker)  		
	local HFHIeZbS = speaker.lZReEeCX.ZeqCbfQZ   
	local ZRvAOQLp = HFHIeZbS.ZRvAOQLp:FindFirstChildWhichIsA(HttpService:Base64Decode('QW5pbWF0aW9u')).IxScdvCg 
	HFHIeZbS.idle:FindFirstChildWhichIsA(HttpService:Base64Decode('QW5pbWF0aW9u')).IxScdvCg = ZRvAOQLp  	
	HFHIeZbS.walk:FindFirstChildWhichIsA(HttpService:Base64Decode('QW5pbWF0aW9u')).IxScdvCg = ZRvAOQLp  		
	HFHIeZbS.run:FindFirstChildWhichIsA(HttpService:Base64Decode('QW5pbWF0aW9u')).IxScdvCg = ZRvAOQLp 
	HFHIeZbS.jump:FindFirstChildWhichIsA(HttpService:Base64Decode('QW5pbWF0aW9u')).IxScdvCg = ZRvAOQLp	
	speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')).HipHeight = not wmXGMjmI(speaker) and -1.5 or 0.5   	
end)  	
ksqgBEpo(HttpService:Base64Decode('bm9zaXQ='), {}, nNvTYekW(ctrcbZGI, speaker) 
    speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):SetStateEnabled(Enum.HumanoidStateType.Seated, false)  	
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5ub3NpdA=='), {}, nNvTYekW(ctrcbZGI, speaker) 
    speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):SetStateEnabled(Enum.HumanoidStateType.Seated, true) 		
end)  	
ksqgBEpo(HttpService:Base64Decode('anVtcA=='), {}, nNvTYekW(ctrcbZGI, speaker)	
	speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):ChangeState(Enum.HumanoidStateType.Jumping) 	
end)  		
local oqfDfUtl		
infJumpDebounce = false   		
ksqgBEpo(HttpService:Base64Decode('aW5manVtcA=='), {HttpService:Base64Decode('aW5maW5pdGVqdW1w')}, nNvTYekW(ctrcbZGI, speaker)   		
	if oqfDfUtl then oqfDfUtl:Disconnect() end   		
	infJumpDebounce = false 
	oqfDfUtl = UserInputService.JumpRequest:Connect(nNvTYekW()		
		if not infJumpDebounce then   
			infJumpDebounce = true   		
			speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):ChangeState(Enum.HumanoidStateType.Jumping)  
			wait()		
			infJumpDebounce = false  	
		end 
	end)	
end)  
ksqgBEpo(HttpService:Base64Decode('dW5pbmZqdW1w'), {HttpService:Base64Decode('dW5pbmZpbml0ZWp1bXA='), HttpService:Base64Decode('bm9pbmZqdW1w'), HttpService:Base64Decode('bm9pbmZpbml0ZWp1bXA=')}, nNvTYekW(ctrcbZGI, speaker) 	
	if oqfDfUtl then oqfDfUtl:Disconnect() end	
	infJumpDebounce = false
end)  	
local okYYjbSz	
ksqgBEpo(HttpService:Base64Decode('Zmx5anVtcA=='), {}, nNvTYekW(ctrcbZGI, speaker)  		
	if okYYjbSz then okYYjbSz:Disconnect() end  
	okYYjbSz = UserInputService.JumpRequest:Connect(nNvTYekW()  
		speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):ChangeState(Enum.HumanoidStateType.Jumping) 		
	end) 	
end) 
ksqgBEpo(HttpService:Base64Decode('dW5mbHlqdW1w'), {HttpService:Base64Decode('bm9mbHlqdW1w')}, nNvTYekW(ctrcbZGI, speaker)  		
	if okYYjbSz then okYYjbSz:Disconnect() end  	
end) 		
local IWUnXKKS = {}	
ksqgBEpo(HttpService:Base64Decode('YXV0b2p1bXA='),{HttpService:Base64Decode('YWp1bXA=')},nNvTYekW(ctrcbZGI, speaker) 	
	local EVuBPBBC = speaker.lZReEeCX   
	local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))   	
	local nNvTYekW autoJump()		
		if EVuBPBBC and ZdvfjJrJ then
			local FAqZtHij = workspace:FindPartOnRay(Ray.new(ZdvfjJrJ.RootPart.FZxyaMZC-Vector3.new(0,1.5,0), ZdvfjJrJ.RootPart.CFrame.lookVector*3), ZdvfjJrJ.Parent)	
			local QXINqOyY = workspace:FindPartOnRay(Ray.new(ZdvfjJrJ.RootPart.FZxyaMZC+Vector3.new(0,1.5,0), ZdvfjJrJ.RootPart.CFrame.lookVector*3), ZdvfjJrJ.Parent) 	
			if FAqZtHij or QXINqOyY then	
				ZdvfjJrJ.Jump = true		
			end  		
		end 
	end 
	autoJump()
	IWUnXKKS.ajLoop = (IWUnXKKS.ajLoop and IWUnXKKS.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump) 	
	IWUnXKKS.ajCA = (IWUnXKKS.ajCA and IWUnXKKS.ajCA:Disconnect() and false) or speaker.CharacterAdded:Connect(nNvTYekW(nChar)	
		EVuBPBBC, ZdvfjJrJ = nChar, nChar:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ=')) 
		autoJump()	
		IWUnXKKS.ajLoop = (IWUnXKKS.ajLoop and IWUnXKKS.ajLoop:Disconnect() and false) or RunService.RenderStepped:Connect(autoJump)	
	end)  		
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5hdXRvanVtcA=='),{HttpService:Base64Decode('bm9hdXRvanVtcA=='), HttpService:Base64Decode('bm9hanVtcA=='), HttpService:Base64Decode('dW5hanVtcA==')},nNvTYekW(ctrcbZGI, speaker)   	
	IWUnXKKS.ajLoop = (IWUnXKKS.ajLoop and IWUnXKKS.ajLoop:Disconnect() and false) or nil 		
	IWUnXKKS.ajCA = (IWUnXKKS.ajCA and IWUnXKKS.ajCA:Disconnect() and false) or nil  		
end)   		
ksqgBEpo(HttpService:Base64Decode('ZWRnZWp1bXA='),{HttpService:Base64Decode('ZWp1bXA=')},nNvTYekW(ctrcbZGI, speaker) 		
	local EVuBPBBC = speaker.lZReEeCX   
	local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) 		
	local QEIGpJnZ 		
	local qcgbmIlg 
	local PlmcDySC
	local nNvTYekW edgejump()   
		if EVuBPBBC and ZdvfjJrJ then	
			qcgbmIlg = QEIGpJnZ 		
			QEIGpJnZ = ZdvfjJrJ:GetState()	
			if qcgbmIlg ~= QEIGpJnZ and QEIGpJnZ == Enum.HumanoidStateType.Freefall and qcgbmIlg ~= Enum.HumanoidStateType.Jumping then 
				EVuBPBBC.HumanoidRootPart.CFrame = PlmcDySC  		
				EVuBPBBC.HumanoidRootPart.Velocity = Vector3.new(EVuBPBBC.HumanoidRootPart.Velocity.IqWNKzOD, ZdvfjJrJ.JumpPower or ZdvfjJrJ.JumpHeight, EVuBPBBC.HumanoidRootPart.Velocity.DadYeUNF)  	
			end  	
			PlmcDySC = EVuBPBBC.HumanoidRootPart.CFrame  	
		end   
	end   	
	edgejump() 
	IWUnXKKS.ejLoop = (IWUnXKKS.ejLoop and IWUnXKKS.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump) 	
	IWUnXKKS.ejCA = (IWUnXKKS.ejCA and IWUnXKKS.ejCA:Disconnect() and false) or speaker.CharacterAdded:Connect(nNvTYekW(nChar)   		
		EVuBPBBC, ZdvfjJrJ = nChar, nChar:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ=')) 
		edgejump() 
		IWUnXKKS.ejLoop = (IWUnXKKS.ejLoop and IWUnXKKS.ejLoop:Disconnect() and false) or RunService.RenderStepped:Connect(edgejump)   	
	end)  		
end) 
ksqgBEpo(HttpService:Base64Decode('dW5lZGdlanVtcA=='),{HttpService:Base64Decode('bm9lZGdlanVtcA=='), HttpService:Base64Decode('bm9lanVtcA=='), HttpService:Base64Decode('dW5lanVtcA==')},nNvTYekW(ctrcbZGI, speaker)  		
	IWUnXKKS.ejLoop = (IWUnXKKS.ejLoop and IWUnXKKS.ejLoop:Disconnect() and false) or nil 		
	IWUnXKKS.ejCA = (IWUnXKKS.ejCA and IWUnXKKS.ejCA:Disconnect() and false) or nil   	
end)  
ksqgBEpo(HttpService:Base64Decode('dGVhbQ=='), {}, nNvTYekW(ctrcbZGI, speaker)   	
    local yPFeowTn = vqgOCmxq(1)		
    local OjVzuJTA = nil  	
    local IglyvNYH = speaker.lZReEeCX and wyxfunbJ(speaker.lZReEeCX)	
    for OpEnJPoA, lGgkoAop in ipairs(Teams:GetChildren()) do 	
        if lGgkoAop.FrpOJNKH:lower():match(yPFeowTn:lower()) then   	
            OjVzuJTA = lGgkoAop		
            break 		
        end  
    end 	
    if not OjVzuJTA then  
        return CFyCkJIA(HttpService:Base64Decode('SW52YWxpZCBUZWFt'), yPFeowTn .. HttpService:Base64Decode('IGlzIG5vdCBhIHZhbGlkIHRlYW0='))
    end 	
    if IglyvNYH and firetouchinterest then   	
        for OpEnJPoA, lGgkoAop in ipairs(workspace:GetDescendants()) do
            if lGgkoAop:IsA(HttpService:Base64Decode('U3Bhd25Mb2NhdGlvbg==')) and lGgkoAop.BrickColor == OjVzuJTA.TeamColor and lGgkoAop.AllowTeamChangeOnTouch == true then 	
                firetouchinterest(lGgkoAop, IglyvNYH, 0)	
                firetouchinterest(lGgkoAop, IglyvNYH, 1)   		
                break  
            end  		
        end  		
    else	
        speaker.Team = OjVzuJTA   
    end   		
end) 		
ksqgBEpo(HttpService:Base64Decode('bm9iZ3Vp'),{HttpService:Base64Decode('dW5iZ3Vp'),HttpService:Base64Decode('bm9iaWxsYm9hcmRndWk='),HttpService:Base64Decode('dW5iaWxsYm9hcmRndWk='),HttpService:Base64Decode('bm9uYW1l'),HttpService:Base64Decode('cm9oZw==')},nNvTYekW(ctrcbZGI, speaker)   		
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants())do  		
		if lGgkoAop:IsA(HttpService:Base64Decode('QmlsbGJvYXJkR3Vp')) or lGgkoAop:IsA(HttpService:Base64Decode('U3VyZmFjZUd1aQ==')) then 	
			lGgkoAop:Destroy()	
		end 	
	end  
end)	
ksqgBEpo(HttpService:Base64Decode('bG9vcG5vYmd1aQ=='),{HttpService:Base64Decode('bG9vcHVuYmd1aQ=='),HttpService:Base64Decode('bG9vcG5vYmlsbGJvYXJkZ3Vp'),HttpService:Base64Decode('bG9vcHVuYmlsbGJvYXJkZ3Vp'),HttpService:Base64Decode('bG9vcG5vbmFtZQ=='),HttpService:Base64Decode('bG9vcHJvaGc=')},nNvTYekW(ctrcbZGI, speaker)	
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants())do   	
		if lGgkoAop:IsA(HttpService:Base64Decode('QmlsbGJvYXJkR3Vp')) or lGgkoAop:IsA(HttpService:Base64Decode('U3VyZmFjZUd1aQ==')) then   
			lGgkoAop:Destroy()  
		end  
	end 	
	local nNvTYekW charPartAdded(odHrkVop) 		
		if odHrkVop:IsA(HttpService:Base64Decode('QmlsbGJvYXJkR3Vp')) or odHrkVop:IsA(HttpService:Base64Decode('U3VyZmFjZUd1aQ==')) then 	
			wait()		
			odHrkVop:Destroy()   	
		end  
	end   
	charPartTrigger = speaker.lZReEeCX.DescendantAdded:Connect(charPartAdded) 
end)   
ksqgBEpo(HttpService:Base64Decode('dW5sb29wbm9iZ3Vp'),{HttpService:Base64Decode('dW5sb29wdW5iZ3Vp'),HttpService:Base64Decode('dW5sb29wbm9iaWxsYm9hcmRndWk='),HttpService:Base64Decode('dW5sb29wdW5iaWxsYm9hcmRndWk='),HttpService:Base64Decode('dW5sb29wbm9uYW1l'),HttpService:Base64Decode('dW5sb29wcm9oZw==')},nNvTYekW(ctrcbZGI, speaker) 
	if charPartTrigger then	
		charPartTrigger:Disconnect()		
	end   	
end)   	
ksqgBEpo(HttpService:Base64Decode('c3Bhc20='),{},nNvTYekW(ctrcbZGI, speaker)		
	if not wmXGMjmI(speaker) then 
		local TjygLeHq=speaker.lZReEeCX 
		local IxScdvCg = HttpService:Base64Decode('MzM3OTYwNTk=')   		
		SpasmAnim = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u'))   	
		SpasmAnim.IxScdvCg = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLw==')..IxScdvCg
		Spasm = TjygLeHq:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):LoadAnimation(SpasmAnim)  	
		Spasm:Play()   
		Spasm:AdjustSpeed(99) 	
	else
		CFyCkJIA(HttpService:Base64Decode('UjYgUmVxdWlyZWQ='),HttpService:Base64Decode('VGhpcyBjb21tYW5kIHJlcXVpcmVzIHRoZSByNiByaWcgdHlwZQ=='))  	
	end 		
end)	
ksqgBEpo(HttpService:Base64Decode('dW5zcGFzbQ=='),{HttpService:Base64Decode('bm9zcGFzbQ==')},nNvTYekW(ctrcbZGI, speaker)
	Spasm:Stop()   
	SpasmAnim:Destroy()
end) 
ksqgBEpo(HttpService:Base64Decode('aGVhZHRocm93'),{},nNvTYekW(ctrcbZGI, speaker)		
	if not wmXGMjmI(speaker) then	
		local IxScdvCg = HttpService:Base64Decode('MzUxNTQ5NjE=')		
		local eBrzwjIX = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u'))   		
		eBrzwjIX.IxScdvCg = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLw==')..IxScdvCg   	
		local TQYdRNxr = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):LoadAnimation(eBrzwjIX)  
		TQYdRNxr:Play(0)   		
		TQYdRNxr:AdjustSpeed(1)  		
	else   	
		CFyCkJIA(HttpService:Base64Decode('UjYgUmVxdWlyZWQ='),HttpService:Base64Decode('VGhpcyBjb21tYW5kIHJlcXVpcmVzIHRoZSByNiByaWcgdHlwZQ=='))  		
	end
end)  		
ksqgBEpo(HttpService:Base64Decode('YW5pbWF0aW9u'),{HttpService:Base64Decode('YW5pbQ==')},nNvTYekW(ctrcbZGI, speaker) 
	if not wmXGMjmI(speaker) then 	
		local TjygLeHq=speaker.lZReEeCX   	
		local IxScdvCg = tostring(ctrcbZGI[1])		
		local eBrzwjIX = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u')) 		
		eBrzwjIX.IxScdvCg = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLw==')..IxScdvCg		
		local TQYdRNxr = TjygLeHq:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):LoadAnimation(eBrzwjIX)   	
		TQYdRNxr:Play()		
		if ctrcbZGI[2] then   	
			TQYdRNxr:AdjustSpeed(tostring(ctrcbZGI[2]))	
		end	
	else  		
		CFyCkJIA(HttpService:Base64Decode('UjYgUmVxdWlyZWQ='),HttpService:Base64Decode('VGhpcyBjb21tYW5kIHJlcXVpcmVzIHRoZSByNiByaWcgdHlwZQ==')) 
	end   
end)  		
ksqgBEpo(HttpService:Base64Decode('bm9hbmlt'),{},nNvTYekW(ctrcbZGI, speaker) 
	speaker.lZReEeCX.ZeqCbfQZ.Disabled = true 	
end)  	
ksqgBEpo(HttpService:Base64Decode('cmVhbmlt'),{},nNvTYekW(ctrcbZGI, speaker) 		
	speaker.lZReEeCX.ZeqCbfQZ.Disabled = false		
end)  
ksqgBEpo(HttpService:Base64Decode('YW5pbXNwZWVk'),{},nNvTYekW(ctrcbZGI, speaker) 	
	local EVuBPBBC = speaker.lZReEeCX   		
	local ryZRcUmU = EVuBPBBC:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) or EVuBPBBC:FindFirstChildOfClass(HttpService:Base64Decode('QW5pbWF0aW9uQ29udHJvbGxlcg=='))   
	for i,lGgkoAop in next, ryZRcUmU:GetPlayingAnimationTracks() do 
		lGgkoAop:AdjustSpeed(tonumber(ctrcbZGI[1] or 1)) 	
	end 		
end) 
ksqgBEpo(HttpService:Base64Decode('Y29weWFuaW1hdGlvbg=='),{HttpService:Base64Decode('Y29weWFuaW0='),HttpService:Base64Decode('Y29weWVtb3Rl')},nNvTYekW(ctrcbZGI, speaker)		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   	
	for OpEnJPoA,lGgkoAop in ipairs(aAJfXrEy)do   
		local cFlbMRaO = Players[lGgkoAop].lZReEeCX 	
		for OpEnJPoA, zEZUrDht in pairs(speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetPlayingAnimationTracks()) do   	
			zEZUrDht:Stop()   		
		end   
		for OpEnJPoA, zEZUrDht in pairs(Players[lGgkoAop].lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetPlayingAnimationTracks()) do   	
			if not string.find(zEZUrDht.Animation.IxScdvCg, HttpService:Base64Decode('NTA3NzY4Mzc1')) then		
				local CuGjMkvC = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):LoadAnimation(zEZUrDht.Animation)		
				CuGjMkvC:Play(.1, 1, zEZUrDht.Speed)
				CuGjMkvC.TimePosition = zEZUrDht.TimePosition  		
				task.spawn(nNvTYekW()  		
					zEZUrDht.Stopped:Wait()		
					CuGjMkvC:Stop()   		
					CuGjMkvC:Destroy()
				end)   
			end   	
		end   	
	end
end)   	
ksqgBEpo(HttpService:Base64Decode('Y29weWFuaW1hdGlvbmlk'), {HttpService:Base64Decode('Y29weWFuaW1pZA=='), HttpService:Base64Decode('Y29weWVtb3RlaWQ=')}, nNvTYekW(ctrcbZGI, speaker)   
    local ymJaHaYL = nNvTYekW(suIMLClk)   
        local DSojBXiW = HttpService:Base64Decode('QW5pbWF0aW9ucyBDb3BpZWQ=')   		
        for OpEnJPoA, lGgkoAop in pairs(suIMLClk.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetPlayingAnimationTracks()) do 	
            local XNSYHDVK = lGgkoAop.Animation.IxScdvCg  	
            local VyZuxCJB = XNSYHDVK:find(HttpService:Base64Decode('cmJ4YXNzZXRpZDovLw==')) and XNSYHDVK:match(HttpService:Base64Decode('JWQr'))  
            if not string.find(XNSYHDVK, HttpService:Base64Decode('NTA3NzY4Mzc1')) and not string.find(XNSYHDVK, HttpService:Base64Decode('MTgwNDM1NTcx')) then	
                if VyZuxCJB then  
                    local QAIJFRsB, jkbTUbqm = pcall(nNvTYekW()  	
                        return MarketplaceService:GetProductInfo(tonumber(VyZuxCJB)).FrpOJNKH   
                    end)   	
                    local kfKkxmpZ = QAIJFRsB and jkbTUbqm or HttpService:Base64Decode('RmFpbGVkIHRvIGdldCBuYW1l')  		
                    DSojBXiW = DSojBXiW .. HttpService:Base64Decode('XG5cbk5hbWU6IA==') .. kfKkxmpZ .. HttpService:Base64Decode('XG5BbmltYXRpb24gSWQ6IA==') .. XNSYHDVK		
                else 
                    DSojBXiW = DSojBXiW .. HttpService:Base64Decode('XG5cbkFuaW1hdGlvbiBJZDog') .. XNSYHDVK
                end  	
            end  		
        end 	
        if DSojBXiW ~= HttpService:Base64Decode('QW5pbWF0aW9ucyBDb3BpZWQ=') then   	
            oHhBFOUT(DSojBXiW)  		
        else   
            CFyCkJIA(HttpService:Base64Decode('QW5pbWF0aW9ucw=='), HttpService:Base64Decode('Tm8gYW5pbWF0aW9ucyB0byBjb3B5'))  		
        end  
    end  	
    if ctrcbZGI[1] then		
        ymJaHaYL(Players[KpWujDEJ(ctrcbZGI[1], speaker)[1]])  
    else 		
        ymJaHaYL(speaker)  	
    end   
end)		
ksqgBEpo(HttpService:Base64Decode('c3RvcGFuaW1hdGlvbnM='),{HttpService:Base64Decode('c3RvcGFuaW1z'),HttpService:Base64Decode('c3RvcGFuaW0=')},nNvTYekW(ctrcbZGI, speaker)   
	local EVuBPBBC = speaker.lZReEeCX 		
	local ryZRcUmU = EVuBPBBC:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) or EVuBPBBC:FindFirstChildOfClass(HttpService:Base64Decode('QW5pbWF0aW9uQ29udHJvbGxlcg=='))
	for i,lGgkoAop in next, ryZRcUmU:GetPlayingAnimationTracks() do	
		lGgkoAop:Stop()   
	end 
end)   		
ksqgBEpo(HttpService:Base64Decode('cmVmcmVzaGFuaW1hdGlvbnM='), {HttpService:Base64Decode('cmVmcmVzaGFuaW1hdGlvbg=='), HttpService:Base64Decode('cmVmcmVzaGFuaW1z'), HttpService:Base64Decode('cmVmcmVzaGFuaW0=')}, nNvTYekW(ctrcbZGI, speaker)   	
	local EVuBPBBC = speaker.lZReEeCX or speaker.CharacterAdded:Wait()  
	local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ='), 15)	
	local ZeqCbfQZ = EVuBPBBC and EVuBPBBC:WaitForChild(HttpService:Base64Decode('QW5pbWF0ZQ=='), 15) 		
	if not ZdvfjJrJ or not ZeqCbfQZ then  	
		return CFyCkJIA(HttpService:Base64Decode('UmVmcmVzaCBBbmltYXRpb25z'), HttpService:Base64Decode('RmFpbGVkIHRvIGdldCBBbmltYXRlL0h1bWFub2lk'))  	
	end 
	ZeqCbfQZ.Disabled = true  		
	for OpEnJPoA, lGgkoAop in ipairs(ZdvfjJrJ:GetPlayingAnimationTracks()) do  		
		lGgkoAop:Stop()   		
	end 		
	ZeqCbfQZ.Disabled = false		
end)   	
ksqgBEpo(HttpService:Base64Decode('YWxsb3djdXN0b21hbmlt'), {HttpService:Base64Decode('YWxsb3djdXN0b21hbmltYXRpb25z')}, nNvTYekW(ctrcbZGI, speaker) 	
	StarterPlayer.AllowCustomAnimations = true  	
	vAOGaDPV(HttpService:Base64Decode('cmVmcmVzaGFuaW1hdGlvbnM='))  
end)  		
ksqgBEpo(HttpService:Base64Decode('dW5hbGxvd2N1c3RvbWFuaW0='), {HttpService:Base64Decode('dW5hbGxvd2N1c3RvbWFuaW1hdGlvbnM=')}, nNvTYekW(ctrcbZGI, speaker)  		
	StarterPlayer.AllowCustomAnimations = false  	
	vAOGaDPV(HttpService:Base64Decode('cmVmcmVzaGFuaW1hdGlvbnM='))	
end) 		
ksqgBEpo(HttpService:Base64Decode('bG9vcGFuaW1hdGlvbg=='), {HttpService:Base64Decode('bG9vcGFuaW0=')},nNvTYekW(ctrcbZGI, speaker)  
	local EVuBPBBC = speaker.lZReEeCX 	
	local ZdvfjJrJ = EVuBPBBC and EVuBPBBC.FindFirstChildWhichIsA(EVuBPBBC, HttpService:Base64Decode('SHVtYW5vaWQ='))  
	for OpEnJPoA, lGgkoAop in ipairs(ZdvfjJrJ.GetPlayingAnimationTracks(ZdvfjJrJ)) do  		
		lGgkoAop.Looped = true	
	end  
end)   
ksqgBEpo(HttpService:Base64Decode('dHBwb3NpdGlvbg=='),{HttpService:Base64Decode('dHBwb3M=')},nNvTYekW(ctrcbZGI, speaker) 		
	if #ctrcbZGI < 3 then return end
	local stycAyoL,tpY,tpZ = tonumber((ctrcbZGI[1]:gsub(HttpService:Base64Decode('LA=='), ''))),tonumber((ctrcbZGI[2]:gsub(HttpService:Base64Decode('LA=='), ''))),tonumber((ctrcbZGI[3]:gsub(HttpService:Base64Decode('LA=='), '')))  		
	local cFlbMRaO = speaker.lZReEeCX 	
	if cFlbMRaO and wyxfunbJ(cFlbMRaO) then  		
		wyxfunbJ(cFlbMRaO).CFrame = CFrame.new(stycAyoL,tpY,tpZ)  	
	end   	
end)	
ksqgBEpo(HttpService:Base64Decode('dHdlZW50cHBvc2l0aW9u'),{HttpService:Base64Decode('dHRwcG9z')},nNvTYekW(ctrcbZGI, speaker)  		
	if #ctrcbZGI < 3 then return end
	local stycAyoL,tpY,tpZ = tonumber((ctrcbZGI[1]:gsub(HttpService:Base64Decode('LA=='), ''))),tonumber((ctrcbZGI[2]:gsub(HttpService:Base64Decode('LA=='), ''))),tonumber((ctrcbZGI[3]:gsub(HttpService:Base64Decode('LA=='), ''))) 		
	local cFlbMRaO = speaker.lZReEeCX 		
	if cFlbMRaO and wyxfunbJ(cFlbMRaO) then 	
		TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(stycAyoL,tpY,tpZ)}):Play() 	
	end	
end) 	
ksqgBEpo(HttpService:Base64Decode('b2Zmc2V0'),{},nNvTYekW(ctrcbZGI, speaker)   		
	if #ctrcbZGI < 3 then		
		return    		
	end		
	if speaker.lZReEeCX then		
		speaker.lZReEeCX:TranslateBy(Vector3.new(tonumber(ctrcbZGI[1]) or 0, tonumber(ctrcbZGI[2]) or 0, tonumber(ctrcbZGI[3]) or 0))  		
	end	
end)  
ksqgBEpo(HttpService:Base64Decode('dHdlZW5vZmZzZXQ='),{HttpService:Base64Decode('dG9mZnNldA==')},nNvTYekW(ctrcbZGI, speaker) 
	if #ctrcbZGI < 3 then return end   
	local stycAyoL,tpY,tpZ = tonumber(ctrcbZGI[1]),tonumber(ctrcbZGI[2]),tonumber(ctrcbZGI[3])  	
	local cFlbMRaO = speaker.lZReEeCX  
	if cFlbMRaO and wyxfunbJ(cFlbMRaO) then  	
		TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(stycAyoL,tpY,tpZ)}):Play() 
	end		
end)  
ksqgBEpo(HttpService:Base64Decode('Y2xpY2t0ZWxlcG9ydA=='),{},nNvTYekW(ctrcbZGI, speaker) 		
	if speaker == Players.FntTRqLK then   
		CFyCkJIA(HttpService:Base64Decode('Q2xpY2sgVFA='),HttpService:Base64Decode('R28gdG8gU2V0dGluZ3M+S2V5YmluZHM+QWRkIHRvIHNldCB1cCBjbGljayB0cA=='))  	
	end		
end)  
ksqgBEpo(HttpService:Base64Decode('bW91c2V0ZWxlcG9ydA=='), {HttpService:Base64Decode('bW91c2V0cA==')}, nNvTYekW(ctrcbZGI, speaker) 
    local IglyvNYH = wyxfunbJ(speaker.lZReEeCX)		
    local DpljNZwD = IYMouse.Hit	
    if IglyvNYH and DpljNZwD then  
        IglyvNYH.CFrame = CFrame.new(DpljNZwD.IqWNKzOD, DpljNZwD.jtGagefg + 3, DpljNZwD.DadYeUNF, select(4, IglyvNYH.CFrame:components())) 		
    end   
end) 
ksqgBEpo(HttpService:Base64Decode('dHB0b29s'), {HttpService:Base64Decode('dGVsZXBvcnR0b29s')}, nNvTYekW(ctrcbZGI, speaker) 
	local aLZEKPHU = Instance.new(HttpService:Base64Decode('VG9vbA=='))  		
	aLZEKPHU.FrpOJNKH = HttpService:Base64Decode('VGVsZXBvcnQgVG9vbA==')  	
	aLZEKPHU.RequiresHandle = false	
	aLZEKPHU.Parent = speaker.Ehivqwak	
	aLZEKPHU.Activated:Connect(nNvTYekW()		
		local EVuBPBBC = speaker.lZReEeCX or workspace:FindFirstChild(speaker.FrpOJNKH)  		
		local HhNoFHmN = EVuBPBBC and EVuBPBBC:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) 		
		if not EVuBPBBC or not HhNoFHmN then  	
			return warn(HttpService:Base64Decode('RmFpbGVkIHRvIGZpbmQgSHVtYW5vaWRSb290UGFydA==')) 	
		end 	
		HhNoFHmN.CFrame = CFrame.new(IYMouse.Hit.IqWNKzOD, IYMouse.Hit.jtGagefg + 3, IYMouse.Hit.DadYeUNF, select(4, HhNoFHmN.CFrame:components()))   
	end)  
end)  		
ksqgBEpo(HttpService:Base64Decode('Y2xpY2tkZWxldGU='),{},nNvTYekW(ctrcbZGI, speaker)	
	if speaker == Players.FntTRqLK then	
		CFyCkJIA(HttpService:Base64Decode('Q2xpY2sgRGVsZXRl'),HttpService:Base64Decode('R28gdG8gU2V0dGluZ3M+S2V5YmluZHM+QWRkIHRvIHNldCB1cCBjbGljayBkZWxldGU='))	
	end   
end)   	
ksqgBEpo(HttpService:Base64Decode('Z2V0cG9zaXRpb24='),{HttpService:Base64Decode('Z2V0cG9z'),HttpService:Base64Decode('bm90aWZ5cG9z'),HttpService:Base64Decode('bm90aWZ5cG9zaXRpb24=')},nNvTYekW(ctrcbZGI, speaker)  
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker) 	
	for i,lGgkoAop in pairs(aAJfXrEy)do		
		local cFlbMRaO = Players[lGgkoAop].lZReEeCX  	
		local DpljNZwD = cFlbMRaO and (wyxfunbJ(cFlbMRaO) or cFlbMRaO:FindFirstChildWhichIsA(HttpService:Base64Decode('QmFzZVBhcnQ=')))   	
		DpljNZwD = DpljNZwD and DpljNZwD.FZxyaMZC   	
		if not DpljNZwD then  	
			return CFyCkJIA(HttpService:Base64Decode('R2V0cG9zaXRpb24gRXJyb3I='),HttpService:Base64Decode('TWlzc2luZyBjaGFyYWN0ZXI='))	
		end 
		local GwcDPlkd = math.krtnXMTJ(DpljNZwD.IqWNKzOD) .. HttpService:Base64Decode('LCA=') .. math.krtnXMTJ(DpljNZwD.jtGagefg) .. HttpService:Base64Decode('LCA=') .. math.krtnXMTJ(DpljNZwD.DadYeUNF)
		CFyCkJIA(HttpService:Base64Decode('Q3VycmVudCBQb3NpdGlvbg=='),GwcDPlkd) 
	end		
end)  
ksqgBEpo(HttpService:Base64Decode('Y29weXBvc2l0aW9u'),{HttpService:Base64Decode('Y29weXBvcw==')},nNvTYekW(ctrcbZGI, speaker)
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  
	for i,lGgkoAop in pairs(aAJfXrEy)do	
		local cFlbMRaO = Players[lGgkoAop].lZReEeCX   	
		local DpljNZwD = cFlbMRaO and (wyxfunbJ(cFlbMRaO) or cFlbMRaO:FindFirstChildWhichIsA(HttpService:Base64Decode('QmFzZVBhcnQ=')))
		DpljNZwD = DpljNZwD and DpljNZwD.FZxyaMZC		
		if not DpljNZwD then  	
			return CFyCkJIA(HttpService:Base64Decode('R2V0cG9zaXRpb24gRXJyb3I='),HttpService:Base64Decode('TWlzc2luZyBjaGFyYWN0ZXI='))	
		end		
		local GwcDPlkd = math.krtnXMTJ(DpljNZwD.IqWNKzOD) .. HttpService:Base64Decode('LCA=') .. math.krtnXMTJ(DpljNZwD.jtGagefg) .. HttpService:Base64Decode('LCA=') .. math.krtnXMTJ(DpljNZwD.DadYeUNF)  		
		oHhBFOUT(GwcDPlkd) 		
	end
end) 		
ksqgBEpo(HttpService:Base64Decode('d2Fsa3RvcG9z'),{HttpService:Base64Decode('d2Fsa3RvcG9zaXRpb24=')},nNvTYekW(ctrcbZGI, speaker)
	if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then  
		speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false 
		wait(.1)   
	end   	
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).WalkToPoint = Vector3.new(ctrcbZGI[1],ctrcbZGI[2],ctrcbZGI[3])   		
end)   		
ksqgBEpo(HttpService:Base64Decode('c3BlZWQ='),{HttpService:Base64Decode('d3M='),HttpService:Base64Decode('d2Fsa3NwZWVk')},nNvTYekW(ctrcbZGI, speaker)   		
	if ctrcbZGI[2] then  		
		local xbqBGeeX = ctrcbZGI[2] or 16   
		if CnkskpqQ(xbqBGeeX) then		
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).WalkSpeed = xbqBGeeX 
		end   	
	else  		
		local xbqBGeeX = ctrcbZGI[1] or 16  		
		if CnkskpqQ(xbqBGeeX) then	
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).WalkSpeed = xbqBGeeX   		
		end  		
	end  	
end)  	
ksqgBEpo(HttpService:Base64Decode('c3Bvb2ZzcGVlZA=='),{HttpService:Base64Decode('c3Bvb2Z3cw=='),HttpService:Base64Decode('c3Bvb2Z3YWxrc3BlZWQ=')},nNvTYekW(ctrcbZGI, speaker) 		
	if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then 	
		if hookmetamethod then		
			local cFlbMRaO = speaker.lZReEeCX   
			local UjkBPGLv; 	
			local lyFtZexf; lyFtZexf = hookmetamethod(game, HttpService:Base64Decode('X19pbmRleA=='), nNvTYekW(LYfofnMK, nIdCUhtZ)  
				if not checkcaller() and typeof(LYfofnMK) == HttpService:Base64Decode('SW5zdGFuY2U=') and LYfofnMK:IsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and (nIdCUhtZ == HttpService:Base64Decode('V2Fsa1NwZWVk') or nIdCUhtZ == HttpService:Base64Decode('d2Fsa1NwZWVk')) and LYfofnMK:IsDescendantOf(cFlbMRaO) then		
					return UjkBPGLv or ctrcbZGI[1]   	
				end  		
				return lyFtZexf(LYfofnMK, nIdCUhtZ)  	
			end)		
			local zVgqmPgE; zVgqmPgE = hookmetamethod(game, HttpService:Base64Decode('X19uZXdpbmRleA=='), nNvTYekW(LYfofnMK, nIdCUhtZ, value)		
				if not checkcaller() and typeof(LYfofnMK) == HttpService:Base64Decode('SW5zdGFuY2U=') and LYfofnMK:IsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and (nIdCUhtZ == HttpService:Base64Decode('V2Fsa1NwZWVk') or nIdCUhtZ == HttpService:Base64Decode('d2Fsa1NwZWVk')) and LYfofnMK:IsDescendantOf(cFlbMRaO) then 	
					UjkBPGLv = tonumber(value)   	
				end		
				return zVgqmPgE(LYfofnMK, nIdCUhtZ, value) 	
			end)		
		else		
			CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGhvb2ttZXRhbWV0aG9kKQ=='))
		end
	end		
end)   
ksqgBEpo(HttpService:Base64Decode('bG9vcHNwZWVk'),{HttpService:Base64Decode('bG9vcHdz')},nNvTYekW(ctrcbZGI, speaker)	
	local xbqBGeeX = ctrcbZGI[1] or 16   	
	if ctrcbZGI[2] then 	
		xbqBGeeX = ctrcbZGI[2] or 16	
	end
	if CnkskpqQ(xbqBGeeX) then 
		local EVuBPBBC = speaker.lZReEeCX or workspace:FindFirstChild(speaker.FrpOJNKH)  
		local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  	
		local nNvTYekW WalkSpeedChange()
			if EVuBPBBC and ZdvfjJrJ then 	
				ZdvfjJrJ.WalkSpeed = xbqBGeeX  
			end   		
		end 	
		WalkSpeedChange()
		IWUnXKKS.wsLoop = (IWUnXKKS.wsLoop and IWUnXKKS.wsLoop:Disconnect() and false) or ZdvfjJrJ:GetPropertyChangedSignal(HttpService:Base64Decode('V2Fsa1NwZWVk')):Connect(WalkSpeedChange)   		
		IWUnXKKS.wsCA = (IWUnXKKS.wsCA and IWUnXKKS.wsCA:Disconnect() and false) or speaker.CharacterAdded:Connect(nNvTYekW(nChar)   
			EVuBPBBC, ZdvfjJrJ = nChar, nChar:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ=')) 	
			WalkSpeedChange()	
			IWUnXKKS.wsLoop = (IWUnXKKS.wsLoop and IWUnXKKS.wsLoop:Disconnect() and false) or ZdvfjJrJ:GetPropertyChangedSignal(HttpService:Base64Decode('V2Fsa1NwZWVk')):Connect(WalkSpeedChange)  
		end)  
	end   		
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5sb29wc3BlZWQ='),{HttpService:Base64Decode('dW5sb29wd3M=')},nNvTYekW(ctrcbZGI, speaker)
	IWUnXKKS.wsLoop = (IWUnXKKS.wsLoop and IWUnXKKS.wsLoop:Disconnect() and false) or nil
	IWUnXKKS.wsCA = (IWUnXKKS.wsCA and IWUnXKKS.wsCA:Disconnect() and false) or nil 	
end)  		
ksqgBEpo(HttpService:Base64Decode('c3Bvb2ZqdW1wcG93ZXI='),{HttpService:Base64Decode('c3Bvb2ZqcA==')},nNvTYekW(ctrcbZGI, speaker)  		
	if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then		
		if hookmetamethod then  	
			local cFlbMRaO = speaker.lZReEeCX 		
			local xoKBazoE;		
			local lyFtZexf; lyFtZexf = hookmetamethod(game, HttpService:Base64Decode('X19pbmRleA=='), nNvTYekW(LYfofnMK, nIdCUhtZ)   	
				if not checkcaller() and typeof(LYfofnMK) == HttpService:Base64Decode('SW5zdGFuY2U=') and LYfofnMK:IsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and (nIdCUhtZ == HttpService:Base64Decode('SnVtcFBvd2Vy') or nIdCUhtZ == HttpService:Base64Decode('anVtcFBvd2Vy')) and LYfofnMK:IsDescendantOf(cFlbMRaO) then  	
					return xoKBazoE or ctrcbZGI[1]		
				end  		
				return lyFtZexf(LYfofnMK, nIdCUhtZ)		
			end) 
			local zVgqmPgE; zVgqmPgE = hookmetamethod(game, HttpService:Base64Decode('X19uZXdpbmRleA=='), nNvTYekW(LYfofnMK, nIdCUhtZ, value)		
				if not checkcaller() and typeof(LYfofnMK) == HttpService:Base64Decode('SW5zdGFuY2U=') and LYfofnMK:IsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and (nIdCUhtZ == HttpService:Base64Decode('SnVtcFBvd2Vy') or nIdCUhtZ == HttpService:Base64Decode('anVtcFBvd2Vy')) and LYfofnMK:IsDescendantOf(cFlbMRaO) then
					xoKBazoE = tonumber(value)   
				end 	
				return zVgqmPgE(LYfofnMK, nIdCUhtZ, value)  		
			end)   		
		else 	
			CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGhvb2ttZXRhbWV0aG9kKQ=='))   		
		end   	
	end  	
end) 	
ksqgBEpo(HttpService:Base64Decode('bG9vcGp1bXBwb3dlcg=='),{HttpService:Base64Decode('bG9vcGpw'),HttpService:Base64Decode('bG9vcGpwb3dlcg==')},nNvTYekW(ctrcbZGI, speaker)  		
	local mUmMsISP = ctrcbZGI[1] or 50
	if CnkskpqQ(mUmMsISP) then  	
		local EVuBPBBC = speaker.lZReEeCX or workspace:FindFirstChild(speaker.FrpOJNKH)
		local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) 	
		local nNvTYekW JumpPowerChange()  		
			if EVuBPBBC and ZdvfjJrJ then   	
				if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).UseJumpPower then  
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).JumpPower = mUmMsISP	
				else 
					speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).JumpHeight  = mUmMsISP 		
				end		
			end   	
		end   		
		JumpPowerChange()		
		IWUnXKKS.jpLoop = (IWUnXKKS.jpLoop and IWUnXKKS.jpLoop:Disconnect() and false) or ZdvfjJrJ:GetPropertyChangedSignal(HttpService:Base64Decode('SnVtcFBvd2Vy')):Connect(JumpPowerChange) 		
		IWUnXKKS.jpCA = (IWUnXKKS.jpCA and IWUnXKKS.jpCA:Disconnect() and false) or speaker.CharacterAdded:Connect(nNvTYekW(nChar)   		
			EVuBPBBC, ZdvfjJrJ = nChar, nChar:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ=')) 
			JumpPowerChange()   
			IWUnXKKS.jpLoop = (IWUnXKKS.jpLoop and IWUnXKKS.jpLoop:Disconnect() and false) or ZdvfjJrJ:GetPropertyChangedSignal(HttpService:Base64Decode('SnVtcFBvd2Vy')):Connect(JumpPowerChange)
		end)  
	end 		
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5sb29wanVtcHBvd2Vy'),{HttpService:Base64Decode('dW5sb29wanA='),HttpService:Base64Decode('dW5sb29wanBvd2Vy')},nNvTYekW(ctrcbZGI, speaker)   
	local EVuBPBBC = speaker.lZReEeCX or workspace:FindFirstChild(speaker.FrpOJNKH) 		
	local ZdvfjJrJ = EVuBPBBC and EVuBPBBC:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) 	
	IWUnXKKS.jpLoop = (IWUnXKKS.jpLoop and IWUnXKKS.jpLoop:Disconnect() and false) or nil  	
	IWUnXKKS.jpCA = (IWUnXKKS.jpCA and IWUnXKKS.jpCA:Disconnect() and false) or nil
	if EVuBPBBC and ZdvfjJrJ then  		
		if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).UseJumpPower then 		
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).JumpPower = 50		
		else  		
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).JumpHeight  = 50 
		end	
	end  
end)		
ksqgBEpo(HttpService:Base64Decode('dG9vbHM='),{HttpService:Base64Decode('Z2VhcnM=')},nNvTYekW(ctrcbZGI, speaker)  
	local nNvTYekW copy(instance)  	
		for i,CwgEliJJ in pairs(instance:GetChildren())do  	
			if CwgEliJJ:IsA(HttpService:Base64Decode('VG9vbA==')) or CwgEliJJ:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then 	
				CwgEliJJ:Clone().Parent = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s='))		
			end   		
			copy(CwgEliJJ)
		end	
	end 	
	copy(Lighting)  	
	local nNvTYekW copy(instance) 		
		for i,CwgEliJJ in pairs(instance:GetChildren())do  		
			if CwgEliJJ:IsA(HttpService:Base64Decode('VG9vbA==')) or CwgEliJJ:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then		
				CwgEliJJ:Clone().Parent = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s='))
			end  		
			copy(CwgEliJJ) 
		end   	
	end	
	copy(ReplicatedStorage) 		
	CFyCkJIA(HttpService:Base64Decode('VG9vbHM='),HttpService:Base64Decode('Q29waWVkIHRvb2xzIGZyb20gUmVwbGljYXRlZFN0b3JhZ2UgYW5kIExpZ2h0aW5n'))  		
end) 	
ksqgBEpo(HttpService:Base64Decode('bm90b29scw=='),{HttpService:Base64Decode('cnRvb2xz'),HttpService:Base64Decode('Y2xydG9vbHM='),HttpService:Base64Decode('cmVtb3ZldG9vbHM='),HttpService:Base64Decode('ZGVsZXRldG9vbHM='),HttpService:Base64Decode('ZHRvb2xz')},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):GetDescendants()) do 	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then  
			lGgkoAop:Destroy()   	
		end		
	end   	
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do  	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then   		
			lGgkoAop:Destroy() 		
		end  		
	end   		
end)   
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRlc2VsZWN0ZWR0b29s'),{HttpService:Base64Decode('ZHN0')},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do 
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then 
			lGgkoAop:Destroy()		
		end	
	end  		
end)  
ksqgBEpo(HttpService:Base64Decode('Y29uc29sZQ=='), {}, nNvTYekW(ctrcbZGI, speaker)   	
    StarterGui:SetCore(HttpService:Base64Decode('RGV2Q29uc29sZVZpc2libGU='), true) 	
end)
ksqgBEpo(HttpService:Base64Decode('b2xkY29uc29sZQ=='),{},nNvTYekW(ctrcbZGI, speaker)		
	CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='),HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw=='))   	
	local OpEnJPoA, str = pcall(nNvTYekW()  	
		return game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL21haW4vY29uc29sZS5sdWE='), true) 		
	end)		
	local ranKPAqz, e = loadstring(str)   
	if typeof(ranKPAqz) ~= HttpService:Base64Decode('ZnVuY3Rpb24=') then		
		return  		
	end		
	local QAIJFRsB, sduCsRam = pcall(ranKPAqz)   		
	if (not QAIJFRsB) then
		if printconsole then		
			printconsole(sduCsRam)   		
		elseif printoutput then  	
			printoutput(sduCsRam)  	
		end  	
	end	
	wait(1)  		
	CFyCkJIA(HttpService:Base64Decode('Q29uc29sZQ=='),HttpService:Base64Decode('UHJlc3MgRjkgdG8gb3BlbiB0aGUgY29uc29sZQ=='))	
end)  	
ksqgBEpo(HttpService:Base64Decode('ZXhwbG9yZXI='), {HttpService:Base64Decode('ZGV4')}, nNvTYekW(ctrcbZGI, speaker) 	
    CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='), HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw=='))	
    loadstring(game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL21haW4vZGV4Lmx1YQ==')))()  	
end)	
ksqgBEpo(HttpService:Base64Decode('b2xkZGV4'), {HttpService:Base64Decode('b2RleA==')}, nNvTYekW(ctrcbZGI, speaker) 	
	CFyCkJIA(HttpService:Base64Decode('TG9hZGluZyBvbGQgZXhwbG9yZXI='), HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw=='))  
	local OSbYmmPk = nNvTYekW(tRbXwQwX)	
		local itMkVQTi = {} 
		if tRbXwQwX then 
			local ESmLSjFg = InsertService:LoadLocalAsset(tRbXwQwX)   	
			if ESmLSjFg then   
				table.insert(itMkVQTi, ESmLSjFg) 		
			end  
		end  	
		return itMkVQTi 
	end   
	local DAAqqbYg = OSbYmmPk(HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzEwMDU1ODQyNDM4'))[1]   		
	DAAqqbYg.Parent = PARENT 	
	local nNvTYekW Load(Obj, Url)	
		local nNvTYekW GiveOwnGlobals(Func, ZjJwErcq) 		
			local sdzbGXdY, RealFenv, FenvMt = {}, {  		
				script = ZjJwErcq,  	
				getupvalue = nNvTYekW(tRbXwQwX, ESmLSjFg)		
					return nil   
				end,  
				getreg = nNvTYekW()   
					return {}   
				end, 		
				getprops = getprops or nNvTYekW(inst)   		
					if getproperties then 	
						local KexmwLfX = getproperties(inst)	
						if KexmwLfX[1] and gethiddenproperty then  	
							local qHOpQbMm = {} 	
							for OpEnJPoA,kfKkxmpZ in pairs(KexmwLfX) do   		
								local QAIJFRsB, hRmYnbWo = pcall(gethiddenproperty, inst, kfKkxmpZ) 	
								if QAIJFRsB then  		
									qHOpQbMm[kfKkxmpZ] = hRmYnbWo 
								end
							end 		
							return qHOpQbMm   	
						end 
						return KexmwLfX   		
					end	
					return {}   		
				end 		
			}, {}		
			FenvMt.__index = nNvTYekW(tRbXwQwX,ESmLSjFg) 
				return RealFenv[ESmLSjFg] == nil and getgenv()[ESmLSjFg] or RealFenv[ESmLSjFg] 
			end  
			FenvMt.__newindex = nNvTYekW(tRbXwQwX, ESmLSjFg, CwgEliJJ)  
				if RealFenv[ESmLSjFg] == nil then    		
					getgenv()[ESmLSjFg] = CwgEliJJ 	
				else   		
					RealFenv[ESmLSjFg] = CwgEliJJ 	
				end  
			end 	
			setmetatable(sdzbGXdY, FenvMt)   	
			pcall(setfenv, Func, sdzbGXdY)  		
			return Func 
		end  
		local nNvTYekW LoadScripts(OpEnJPoA, ZjJwErcq)	
			if ZjJwErcq:IsA(HttpService:Base64Decode('TG9jYWxTY3JpcHQ=')) then		
				task.spawn(nNvTYekW()	
					GiveOwnGlobals(loadstring(ZjJwErcq.Source,HttpService:Base64Decode('PQ==')..ZjJwErcq:GetFullName()), ZjJwErcq)() 
				end)	
			end 		
			table.foreach(ZjJwErcq:GetChildren(), LoadScripts) 
		end  		
		LoadScripts(nil, Obj) 		
	end  
	Load(DAAqqbYg)   	
end)		
ksqgBEpo(HttpService:Base64Decode('cmVtb3Rlc3B5'),{HttpService:Base64Decode('cnNweQ==')},nNvTYekW(ctrcbZGI, speaker)
	CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='),HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw=='))  	
	loadstring(game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL21haW4vU2ltcGxlU3B5VjMvbWFpbi5sdWE=')))()   	
end)  		
ksqgBEpo(HttpService:Base64Decode('YXVkaW9sb2dnZXI='),{HttpService:Base64Decode('YWxvZ2dlcg==')},nNvTYekW(ctrcbZGI, speaker)   		
	CFyCkJIA(HttpService:Base64Decode('TG9hZGluZw=='),HttpService:Base64Decode('SG9sZCBvbiBhIHNlYw=='))   
	loadstring(game:HttpGet((HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2luZnlpZmYvYmFja3VwL21haW4vYXVkaW9sb2dnZXIubHVh')),true))()		
end)	
local BXxACQAF = nil
ksqgBEpo(HttpService:Base64Decode('bG9vcGdvdG8='),{},nNvTYekW(ctrcbZGI, speaker)  
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker) 
	for i,lGgkoAop in pairs(aAJfXrEy)do   
		BXxACQAF = nil  		
		if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then 		
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false   		
			wait(.1)   		
		end 	
		BXxACQAF = Players[lGgkoAop]   	
		local nvQLuaEj = 3  
		if ctrcbZGI[2] and CnkskpqQ(ctrcbZGI[2]) then
			nvQLuaEj = ctrcbZGI[2]		
		end 		
		local cUCkAMLg = 0  		
		if ctrcbZGI[3] and CnkskpqQ(ctrcbZGI[3]) then
			cUCkAMLg = ctrcbZGI[3] 		
		end 		
		repeat   		
			if Players:FindFirstChild(lGgkoAop) then 
				if Players[lGgkoAop].lZReEeCX ~= nil then  		
					wyxfunbJ(speaker.lZReEeCX).CFrame = wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame + Vector3.new(nvQLuaEj,1,0)   		
				end 
				wait(cUCkAMLg)   		
			else   
				BXxACQAF = nil	
			end 
		until BXxACQAF ~= Players[lGgkoAop]	
	end 		
end)		
ksqgBEpo(HttpService:Base64Decode('dW5sb29wZ290bw=='),{HttpService:Base64Decode('bm9sb29wZ290bw==')},nNvTYekW(ctrcbZGI, speaker) 	
	BXxACQAF = nil  	
end)	
ksqgBEpo(HttpService:Base64Decode('aGVhZHNpdA=='),{},nNvTYekW(ctrcbZGI, speaker)  		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)		
	if headSit then headSit:Disconnect() end  
	for i,lGgkoAop in pairs(aAJfXrEy)do   		
		speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = true  		
		headSit = RunService.Heartbeat:Connect(nNvTYekW() 
			if Players:FindFirstChild(Players[lGgkoAop].FrpOJNKH) and Players[lGgkoAop].lZReEeCX ~= nil and wyxfunbJ(Players[lGgkoAop].lZReEeCX) and wyxfunbJ(speaker.lZReEeCX) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit == true then	
				wyxfunbJ(speaker.lZReEeCX).CFrame = wyxfunbJ(Players[lGgkoAop].lZReEeCX).CFrame * CFrame.Angles(0,math.rad(0),0)* CFrame.new(0,1.6,0.4)  	
			else		
				headSit:Disconnect()  		
			end   
		end)  	
	end  	
end)
ksqgBEpo(HttpService:Base64Decode('Y2hhdA=='),{HttpService:Base64Decode('c2F5')},nNvTYekW(ctrcbZGI, speaker)		
	local ChLWPUni = vqgOCmxq(1)	
	JAbKLEJj(ChLWPUni) 	
end)   
spamming = false   	
spamspeed = 1 
ksqgBEpo(HttpService:Base64Decode('c3BhbQ=='),{},nNvTYekW(ctrcbZGI, speaker) 
	spamming = true	
	local fzbVLAuq = vqgOCmxq(1)   	
	repeat wait(spamspeed)   	
		JAbKLEJj(fzbVLAuq) 
	until spamming == false  		
end)  
ksqgBEpo(HttpService:Base64Decode('bm9zcGFt'),{HttpService:Base64Decode('dW5zcGFt')},nNvTYekW(ctrcbZGI, speaker)   	
	spamming = false	
end)	
ksqgBEpo(HttpService:Base64Decode('d2hpc3Blcg=='),{HttpService:Base64Decode('cG0=')},nNvTYekW(ctrcbZGI, speaker) 	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   	
	for i,lGgkoAop in pairs(aAJfXrEy)do 		
		task.spawn(nNvTYekW() 	
			local XFAupxbq = Players[lGgkoAop].FrpOJNKH		
			local SoItPVKB = vqgOCmxq(2)		
			JAbKLEJj(HttpService:Base64Decode('L3cg')..XFAupxbq..HttpService:Base64Decode('IA==')..SoItPVKB)  
		end)  	
	end   	
end)  		
pmspamming = {}   
ksqgBEpo(HttpService:Base64Decode('cG1zcGFt'),{},nNvTYekW(ctrcbZGI, speaker)   	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)
	for i,lGgkoAop in pairs(aAJfXrEy)do  	
		task.spawn(nNvTYekW()  	
			local XFAupxbq = Players[lGgkoAop].FrpOJNKH  	
			if vdOcSuCI(pmspamming, XFAupxbq) then return end  
			table.insert(pmspamming, XFAupxbq)
			local HutvfhIc = vqgOCmxq(2)  
			repeat   	
				if Players:FindFirstChild(lGgkoAop) then   		
					wait(spamspeed) 	
					JAbKLEJj(HttpService:Base64Decode('L3cg')..XFAupxbq..HttpService:Base64Decode('IA==')..HutvfhIc)
				else  		
					for tRbXwQwX,ESmLSjFg in pairs(pmspamming) do if ESmLSjFg == XFAupxbq then table.remove(pmspamming, tRbXwQwX) end end  
				end		
			until not vdOcSuCI(pmspamming, XFAupxbq)	
		end)  
	end   
end) 		
ksqgBEpo(HttpService:Base64Decode('bm9wbXNwYW0='),{HttpService:Base64Decode('dW5wbXNwYW0=')},nNvTYekW(ctrcbZGI, speaker)   	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	for i,lGgkoAop in pairs(aAJfXrEy)do   		
		task.spawn(nNvTYekW()   
			for tRbXwQwX,ESmLSjFg in pairs(pmspamming) do  		
				if ESmLSjFg == Players[lGgkoAop].FrpOJNKH then  
					table.remove(pmspamming, tRbXwQwX)		
				end
			end	
		end)
	end   		
end)   
ksqgBEpo(HttpService:Base64Decode('c3BhbXNwZWVk'),{},nNvTYekW(ctrcbZGI, speaker) 		
	local xbqBGeeX = ctrcbZGI[1] or 1		
	if CnkskpqQ(xbqBGeeX) then	
		spamspeed = xbqBGeeX  		
	end
end)  
ksqgBEpo(HttpService:Base64Decode('YnViYmxlY2hhdA=='),{},nNvTYekW(ctrcbZGI, speaker)
	if isLegacyChat then	
		ChatService.BubbleChatEnabled = true
	else   	
		TextChatService.BubbleChatConfiguration.Enabled = true  	
	end   		
end) 		
ksqgBEpo(HttpService:Base64Decode('dW5idWJibGVjaGF0'),{HttpService:Base64Decode('bm9idWJibGVjaGF0')},nNvTYekW(ctrcbZGI, speaker) 	
	if isLegacyChat then 
		ChatService.BubbleChatEnabled = false 	
	else  		
		TextChatService.BubbleChatConfiguration.Enabled = false   		
	end 		
end)   
ksqgBEpo(HttpService:Base64Decode('YmxvY2toZWFk'),{},nNvTYekW(ctrcbZGI, speaker)		
	speaker.lZReEeCX.yrKsYgVR:FindFirstChildOfClass(HttpService:Base64Decode('U3BlY2lhbE1lc2g=')):Destroy() 	
end)		
ksqgBEpo(HttpService:Base64Decode('YmxvY2toYXRz'),{},nNvTYekW(ctrcbZGI, speaker)  
	for OpEnJPoA,lGgkoAop in pairs(speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetAccessories()) do  		
		for i,CwgEliJJ in pairs(lGgkoAop:GetDescendants()) do   		
			if CwgEliJJ:IsA(HttpService:Base64Decode('U3BlY2lhbE1lc2g=')) then   		
				CwgEliJJ:Destroy()  		
			end  		
		end  	
	end  		
end)
ksqgBEpo(HttpService:Base64Decode('YmxvY2t0b29s'),{},nNvTYekW(ctrcbZGI, speaker)   	
	for OpEnJPoA,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do  	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then   
			for i,CwgEliJJ in pairs(lGgkoAop:GetDescendants()) do 		
				if CwgEliJJ:IsA(HttpService:Base64Decode('U3BlY2lhbE1lc2g=')) then  	
					CwgEliJJ:Destroy()  	
				end  
			end   	
		end  
	end 
end)
ksqgBEpo(HttpService:Base64Decode('Y3JlZXBlcg=='),{},nNvTYekW(ctrcbZGI, speaker)  		
	if wmXGMjmI(speaker) then	
		speaker.lZReEeCX.yrKsYgVR:FindFirstChildOfClass(HttpService:Base64Decode('U3BlY2lhbE1lc2g=')):Destroy()  
		speaker.lZReEeCX.LeftUpperArm:Destroy()  		
		speaker.lZReEeCX.RightUpperArm:Destroy()  		
		speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):RemoveAccessories()  
	else   		
		speaker.lZReEeCX.yrKsYgVR:FindFirstChildOfClass(HttpService:Base64Decode('U3BlY2lhbE1lc2g=')):Destroy()   		
		speaker.lZReEeCX[HttpService:Base64Decode('TGVmdCBBcm0=')]:Destroy() 	
		speaker.lZReEeCX[HttpService:Base64Decode('UmlnaHQgQXJt')]:Destroy() 
		speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):RemoveAccessories()   		
	end
end) 
nNvTYekW nLckSmPs(NCBjKlfQ) 	
	NCBjKlfQ = NCBjKlfQ or Players.FntTRqLK.lZReEeCX   		
	return NCBjKlfQ:FindFirstChild(HttpService:Base64Decode('VG9yc28=')) or NCBjKlfQ:FindFirstChild(HttpService:Base64Decode('VXBwZXJUb3Jzbw==')) or NCBjKlfQ:FindFirstChild(HttpService:Base64Decode('TG93ZXJUb3Jzbw==')) or NCBjKlfQ:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA=='))   
end  		
ksqgBEpo(HttpService:Base64Decode('YmFuZw=='), {HttpService:Base64Decode('cmFwZQ==')}, nNvTYekW(ctrcbZGI, speaker)  	
	vAOGaDPV(HttpService:Base64Decode('dW5iYW5n'))
	wait()  
	local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  		
	bangAnim = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u'))   		
	bangAnim.IxScdvCg = not wmXGMjmI(speaker) and HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzE0ODg0MDM3MQ==') or HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzU5MTg3MjY2NzQ=')   
	bang = LYfpysRB:LoadAnimation(bangAnim) 
	bang:Play(0.1, 1, 1)   		
	bang:AdjustSpeed(ctrcbZGI[2] or 3)  		
	bangDied = LYfpysRB.Died:Connect(nNvTYekW()  		
		bang:Stop()   		
		bangAnim:Destroy()  
		bangDied:Disconnect()   	
		bangLoop:Disconnect() 
	end)   	
	if ctrcbZGI[1] then  
		local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)  	
		for OpEnJPoA, lGgkoAop in pairs(aAJfXrEy) do
			local BRtuGqoj = Players[lGgkoAop].FrpOJNKH		
			local YtPlnYze = CFrame.new(0, 0, 1.1)		
			bangLoop = RunService.Stepped:Connect(nNvTYekW()   
				pcall(nNvTYekW()   
					local sbvpwLmd = nLckSmPs(Players[BRtuGqoj].lZReEeCX)   		
					wyxfunbJ(speaker.lZReEeCX).CFrame = sbvpwLmd.CFrame * YtPlnYze  		
				end) 
			end)		
		end  
	end	
end)	
ksqgBEpo(HttpService:Base64Decode('dW5iYW5n'), {HttpService:Base64Decode('dW5yYXBl')}, nNvTYekW(ctrcbZGI, speaker)		
	if bangDied then	
		bangDied:Disconnect()  
		bang:Stop()   
		bangAnim:Destroy()		
		bangLoop:Disconnect()
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('Y2FycGV0'),{},nNvTYekW(ctrcbZGI, speaker) 		
	if not wmXGMjmI(speaker) then 	
		vAOGaDPV(HttpService:Base64Decode('dW5jYXJwZXQ=')) 	
		wait() 		
		local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   
		for i,lGgkoAop in pairs(aAJfXrEy)do	
			carpetAnim = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u')) 		
			carpetAnim.IxScdvCg = HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzI4MjU3NDQ0MA==')   
			carpet = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):LoadAnimation(carpetAnim) 
			carpet:Play(.1, 1, 1)  
			local oJXuRKfZ = Players[lGgkoAop].FrpOJNKH 		
			carpetDied = speaker.lZReEeCX:FindFirstChildOfClassHttpService:Base64Decode('SHVtYW5vaWQ=').Died:Connect(nNvTYekW()   	
				carpetLoop:Disconnect()  
				carpet:Stop()   	
				carpetAnim:Destroy()		
				carpetDied:Disconnect()		
			end)
			carpetLoop = RunService.Heartbeat:Connect(nNvTYekW()	
				pcall(nNvTYekW()  		
					wyxfunbJ(Players.FntTRqLK.lZReEeCX).CFrame = wyxfunbJ(Players[oJXuRKfZ].lZReEeCX).CFrame	
				end) 	
			end)  		
		end  
	else   		
		CFyCkJIA(HttpService:Base64Decode('UjYgUmVxdWlyZWQ='),HttpService:Base64Decode('VGhpcyBjb21tYW5kIHJlcXVpcmVzIHRoZSByNiByaWcgdHlwZQ=='))  		
	end
end)  		
ksqgBEpo(HttpService:Base64Decode('dW5jYXJwZXQ='),{HttpService:Base64Decode('bm9jYXJwZXQ=')},nNvTYekW(ctrcbZGI, speaker)
	if carpetLoop then   		
		carpetLoop:Disconnect()   
		carpetDied:Disconnect()   		
		carpet:Stop()   
		carpetAnim:Destroy() 		
	end 		
end)	
ksqgBEpo(HttpService:Base64Decode('ZnJpZW5k'),{},nNvTYekW(ctrcbZGI, speaker) 		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   	
	for i,lGgkoAop in pairs(aAJfXrEy)do 
		speaker:RequestFriendship(Players[lGgkoAop]) 		
	end 
end) 	
ksqgBEpo(HttpService:Base64Decode('dW5mcmllbmQ='),{},nNvTYekW(ctrcbZGI, speaker)	
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)
	for i,lGgkoAop in pairs(aAJfXrEy)do  		
		speaker:RevokeFriendship(Players[lGgkoAop])   
	end  		
end)   
ksqgBEpo(HttpService:Base64Decode('YnJpbmdwYXJ0'),{},nNvTYekW(ctrcbZGI, speaker)  	
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do 	
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then 		
			lGgkoAop.CFrame = wyxfunbJ(speaker.lZReEeCX).CFrame 	
		end   	
	end	
end)   		
ksqgBEpo(HttpService:Base64Decode('YnJpbmdwYXJ0Y2xhc3M='),{HttpService:Base64Decode('YnBj')},nNvTYekW(ctrcbZGI, speaker)   	
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do		
		if lGgkoAop.ClassName:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then	
			lGgkoAop.CFrame = wyxfunbJ(speaker.lZReEeCX).CFrame
		end		
	end  		
end)		
gotopartDelay = 0.1 
ksqgBEpo(HttpService:Base64Decode('Z290b3BhcnQ='),{HttpService:Base64Decode('dG9wYXJ0')},nNvTYekW(ctrcbZGI, speaker) 
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do 
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then   	
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then  	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false		
				wait(.1) 
			end 
			wait(gotopartDelay)	
			wyxfunbJ(speaker.lZReEeCX).CFrame = lGgkoAop.CFrame		
		end
	end  	
end)   	
ksqgBEpo(HttpService:Base64Decode('dHdlZW5nb3RvcGFydA=='),{HttpService:Base64Decode('dGdvdG9wYXJ0'),HttpService:Base64Decode('dHRvcGFydA==')},nNvTYekW(ctrcbZGI, speaker)  	
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do   		
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then   		
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then 	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false  
				wait(.1) 
			end  		
			wait(gotopartDelay)	
			TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = lGgkoAop.CFrame}):Play()		
		end  		
	end   		
end)	
ksqgBEpo(HttpService:Base64Decode('Z290b3BhcnRjbGFzcw=='),{HttpService:Base64Decode('Z3Bj')},nNvTYekW(ctrcbZGI, speaker)  
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do 
		if lGgkoAop.ClassName:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then 		
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then 	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false  
				wait(.1)   		
			end   		
			wait(gotopartDelay)
			wyxfunbJ(speaker.lZReEeCX).CFrame = lGgkoAop.CFrame
		end		
	end 
end) 		
ksqgBEpo(HttpService:Base64Decode('dHdlZW5nb3RvcGFydGNsYXNz'),{HttpService:Base64Decode('dGdwYw==')},nNvTYekW(ctrcbZGI, speaker)	
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do   	
		if lGgkoAop.ClassName:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then  		
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false  	
				wait(.1)   
			end   	
			wait(gotopartDelay)	
			TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = lGgkoAop.CFrame}):Play()  		
		end   
	end  
end)  		
ksqgBEpo(HttpService:Base64Decode('Z290b21vZGVs'),{HttpService:Base64Decode('dG9tb2RlbA==')},nNvTYekW(ctrcbZGI, speaker)		
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do   
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('TW9kZWw=')) then  	
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then   
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false   	
				wait(.1)  		
			end   
			wait(gotopartDelay)
			wyxfunbJ(speaker.lZReEeCX).CFrame = lGgkoAop:GetModelCFrame()  
		end  		
	end		
end)		
ksqgBEpo(HttpService:Base64Decode('dHdlZW5nb3RvbW9kZWw='),{HttpService:Base64Decode('dGdvdG9tb2RlbA=='),HttpService:Base64Decode('dHRvbW9kZWw=')},nNvTYekW(ctrcbZGI, speaker) 	
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do  
		if lGgkoAop.FrpOJNKH:lower() == vqgOCmxq(1):lower() and lGgkoAop:IsA(HttpService:Base64Decode('TW9kZWw=')) then	
			if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then   	
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false 		
				wait(.1)  
			end 
			wait(gotopartDelay)   		
			TweenService:Create(wyxfunbJ(speaker.lZReEeCX), TweenInfo.new(tweenSpeed, Enum.EasingStyle.Linear), {CFrame = lGgkoAop:GetModelCFrame()}):Play()   	
		end  	
	end   
end)  		
ksqgBEpo(HttpService:Base64Decode('Z290b3BhcnRkZWxheQ=='),{},nNvTYekW(ctrcbZGI, speaker)  
	local LFHIBgfO = ctrcbZGI[1] or 0.1 
	if CnkskpqQ(LFHIBgfO) then 	
		gotopartDelay = LFHIBgfO  
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('bm9jbGlja2RldGVjdG9ybGltaXRz'),{HttpService:Base64Decode('bm9jZGxpbWl0cw=='),HttpService:Base64Decode('cmVtb3ZlY2RsaW1pdHM=')},nNvTYekW(ctrcbZGI, speaker)   	
	for i,lGgkoAop in ipairs(workspace:GetDescendants()) do 
		if lGgkoAop:IsA(HttpService:Base64Decode('Q2xpY2tEZXRlY3Rvcg==')) then		
			lGgkoAop.MaxActivationDistance = math.huge   
		end   		
	end  		
end) 
ksqgBEpo(HttpService:Base64Decode('ZmlyZWNsaWNrZGV0ZWN0b3Jz'),{HttpService:Base64Decode('ZmlyZWNk'),HttpService:Base64Decode('ZmlyZWNkcw==')}, nNvTYekW(ctrcbZGI, speaker)   	
	if fireclickdetector then 	
		if ctrcbZGI[1] then		
			local kfKkxmpZ = vqgOCmxq(1)  		
			for OpEnJPoA, descendant in ipairs(workspace:GetDescendants()) do  		
				if descendant:IsA(HttpService:Base64Decode('Q2xpY2tEZXRlY3Rvcg==')) and descendant.FrpOJNKH == kfKkxmpZ or descendant.Parent.FrpOJNKH == kfKkxmpZ then		
					fireclickdetector(descendant)		
				end 		
			end 	
		else   		
			for OpEnJPoA, descendant in ipairs(workspace:GetDescendants()) do		
				if descendant:IsA(HttpService:Base64Decode('Q2xpY2tEZXRlY3Rvcg==')) then		
					fireclickdetector(descendant)		
				end 	
			end  		
		end  
	else   
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGZpcmVjbGlja2RldGVjdG9yKQ=='))  		
	end   	
end)  		
ksqgBEpo(HttpService:Base64Decode('bm9wcm94aW1pdHlwcm9tcHRsaW1pdHM='),{HttpService:Base64Decode('bm9wcGxpbWl0cw=='),HttpService:Base64Decode('cmVtb3ZlcHBsaW1pdHM=')},nNvTYekW(ctrcbZGI, speaker)   
	for i,lGgkoAop in pairs(workspace:GetDescendants()) do  
		if lGgkoAop:IsA(HttpService:Base64Decode('UHJveGltaXR5UHJvbXB0')) then 	
			lGgkoAop.MaxActivationDistance = math.huge 		
		end
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('ZmlyZXByb3hpbWl0eXByb21wdHM='),{HttpService:Base64Decode('ZmlyZXBw')},nNvTYekW(ctrcbZGI, speaker)  	
	if fireproximityprompt then		
		if ctrcbZGI[1] then
			local kfKkxmpZ = vqgOCmxq(1)	
			for OpEnJPoA, descendant in ipairs(workspace:GetDescendants()) do 	
				if descendant:IsA(HttpService:Base64Decode('UHJveGltaXR5UHJvbXB0')) and descendant.FrpOJNKH == kfKkxmpZ or descendant.Parent.FrpOJNKH == kfKkxmpZ then 		
					fireproximityprompt(descendant)		
				end   
			end 		
		else   
			for OpEnJPoA, descendant in ipairs(workspace:GetDescendants()) do  
				if descendant:IsA(HttpService:Base64Decode('UHJveGltaXR5UHJvbXB0')) then		
					fireproximityprompt(descendant) 		
				end	
			end  	
		end  	
	else	
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGZpcmVwcm94aW1pdHlwcm9tcHQp'))  
	end		
end)  	
local uoqpybJF = nil  	
ksqgBEpo(HttpService:Base64Decode('aW5zdGFudHByb3hpbWl0eXByb21wdHM='),{HttpService:Base64Decode('aW5zdGFudHBw')},nNvTYekW(ctrcbZGI, speaker)		
	if fireproximityprompt then  		
		vAOGaDPV(HttpService:Base64Decode('dW5pbnN0YW50cHJveGltaXR5cHJvbXB0cw=='))  		
		wait(0.1) 		
		uoqpybJF = ProximityPromptService.uoqpybJF:Connect(nNvTYekW(prompt) 		
			fireproximityprompt(prompt) 	
		end) 		
	else  	
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGZpcmVwcm94aW1pdHlwcm9tcHQp'))  	
	end 		
end)  	
ksqgBEpo(HttpService:Base64Decode('dW5pbnN0YW50cHJveGltaXR5cHJvbXB0cw=='),{HttpService:Base64Decode('dW5pbnN0YW50cHA=')},nNvTYekW(ctrcbZGI, speaker)   
	if uoqpybJF ~= nil then  		
		uoqpybJF:Disconnect()   	
		uoqpybJF = nil 	
	end 	
end) 		
ksqgBEpo(HttpService:Base64Decode('bm90aWZ5cGluZw=='),{HttpService:Base64Decode('cGluZw==')},nNvTYekW(ctrcbZGI, speaker) 		
	CFyCkJIA(HttpService:Base64Decode('UGluZw=='), math.krtnXMTJ(speaker:GetNetworkPing() * 1000) .. HttpService:Base64Decode('bXM='))   		
end)  	
ksqgBEpo(HttpService:Base64Decode('Z3JhYnRvb2xz'), {}, nNvTYekW(ctrcbZGI, speaker)		
	local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))   		
	for OpEnJPoA, child in ipairs(workspace:GetChildren()) do   
		if speaker.lZReEeCX and child:IsA(HttpService:Base64Decode('QmFja3BhY2tJdGVt')) and child:FindFirstChild(HttpService:Base64Decode('SGFuZGxl')) then   		
			LYfpysRB:EquipTool(child) 
		end  
	end		
	if grabtoolsFunc then    
		grabtoolsFunc:Disconnect()    		
	end		
	grabtoolsFunc = workspace.ChildAdded:Connect(nNvTYekW(child)	
		if speaker.lZReEeCX and child:IsA(HttpService:Base64Decode('QmFja3BhY2tJdGVt')) and child:FindFirstChild(HttpService:Base64Decode('SGFuZGxl')) then   		
			LYfpysRB:EquipTool(child)
		end 	
	end)  
	CFyCkJIA(HttpService:Base64Decode('R3JhYnRvb2xz'), HttpService:Base64Decode('UGlja2luZyB1cCBhbnkgZHJvcHBlZCB0b29scw=='))  	
end)   
ksqgBEpo(HttpService:Base64Decode('bm9ncmFidG9vbHM='),{HttpService:Base64Decode('dW5ncmFidG9vbHM=')},nNvTYekW(ctrcbZGI, speaker) 
	if grabtoolsFunc then   
		grabtoolsFunc:Disconnect()   	
	end 		
	CFyCkJIA(HttpService:Base64Decode('R3JhYnRvb2xz'), HttpService:Base64Decode('R3JhYnRvb2xzIGhhcyBiZWVuIGRpc2FibGVk')) 	
end)  		
local xxcDIhUe = {}  	
ksqgBEpo(HttpService:Base64Decode('cmVtb3Zlc3BlY2lmaWN0b29s'),{},nNvTYekW(ctrcbZGI, speaker)  		
	if ctrcbZGI[1] and speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')) then 
		local CcOOkFmZ = string.lower(vqgOCmxq(1))		
		local FdqqOCBC = RunService.RenderStepped:Connect(nNvTYekW() 		
			if speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')) then
				for i,lGgkoAop in pairs(speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):GetChildren()) do 
					if lGgkoAop.FrpOJNKH:lower() == CcOOkFmZ then 
						lGgkoAop:Remove()	
					end   
				end   	
			end
		end)  	
		xxcDIhUe[CcOOkFmZ] = FdqqOCBC 
	end 	
end) 		
ksqgBEpo(HttpService:Base64Decode('dW5yZW1vdmVzcGVjaWZpY3Rvb2w='),{},nNvTYekW(ctrcbZGI, speaker)
	if ctrcbZGI[1] then  		
		local CcOOkFmZ = string.lower(vqgOCmxq(1)) 		
		if xxcDIhUe[CcOOkFmZ] ~= nil then	
			xxcDIhUe[CcOOkFmZ]:Disconnect() 
			xxcDIhUe[CcOOkFmZ] = nil   	
		end  		
	end   	
end)  		
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJyZW1vdmVzcGVjaWZpY3Rvb2w='),{},nNvTYekW(ctrcbZGI, speaker)  
	for awowkTxU in pairs(xxcDIhUe) do		
		xxcDIhUe[awowkTxU]:Disconnect()  		
		xxcDIhUe[awowkTxU] = nil  	
	end		
end) 	
ksqgBEpo(HttpService:Base64Decode('bGlnaHQ='),{},nNvTYekW(ctrcbZGI, speaker) 
	local vKxWPndg = Instance.new(HttpService:Base64Decode('UG9pbnRMaWdodA==')) 	
	vKxWPndg.Parent = wyxfunbJ(speaker.lZReEeCX)  
	vKxWPndg.Range = 30 	
	if ctrcbZGI[1] then 		
		vKxWPndg.Brightness = ctrcbZGI[2]
		vKxWPndg.Range = ctrcbZGI[1] 	
	else 	
		vKxWPndg.Brightness = 5   
	end   		
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5saWdodA=='),{HttpService:Base64Decode('bm9saWdodA==')},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do	
		if lGgkoAop.ClassName == HttpService:Base64Decode('UG9pbnRMaWdodA==') then	
			lGgkoAop:Destroy()	
		end  	
	end  
end)	
ksqgBEpo(HttpService:Base64Decode('Y29weXRvb2xz'),{},nNvTYekW(ctrcbZGI, speaker)   
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)		
	for i,lGgkoAop in pairs(aAJfXrEy)do	
		task.spawn(nNvTYekW()		
			for i,lGgkoAop in pairs(Players[lGgkoAop]:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):GetChildren()) do 	
				if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then 	
					lGgkoAop:Clone().Parent = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s='))   
				end
			end   		
		end) 	
	end  		
end)   		
ksqgBEpo(HttpService:Base64Decode('bmFrZWQ='),{},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do  		
		if lGgkoAop:IsA(HttpService:Base64Decode('Q2xvdGhpbmc=')) or lGgkoAop:IsA(HttpService:Base64Decode('U2hpcnRHcmFwaGlj')) then  		
			lGgkoAop:Destroy()
		end   
	end	
end)   	
ksqgBEpo(HttpService:Base64Decode('bm9mYWNl'),{HttpService:Base64Decode('cmVtb3ZlZmFjZQ==')},nNvTYekW(ctrcbZGI, speaker)  	
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do		
		if lGgkoAop:IsA(HttpService:Base64Decode('RGVjYWw=')) and lGgkoAop.FrpOJNKH == HttpService:Base64Decode('ZmFjZQ==') then 
			lGgkoAop:Destroy()   	
		end		
	end		
end)		
ksqgBEpo(HttpService:Base64Decode('c3Bhd25wb2ludA=='),{HttpService:Base64Decode('c3Bhd24=')},nNvTYekW(ctrcbZGI, speaker)   		
	spawnpos = wyxfunbJ(speaker.lZReEeCX).CFrame   	
	spawnpoint = true  		
	spDelay = tonumber(ctrcbZGI[1]) or 0.1
	CFyCkJIA(HttpService:Base64Decode('U3Bhd24gUG9pbnQ='),HttpService:Base64Decode('U3Bhd24gcG9pbnQgY3JlYXRlZCBhdCA=')..tostring(spawnpos))	
end)	
ksqgBEpo(HttpService:Base64Decode('bm9zcGF3bnBvaW50'),{HttpService:Base64Decode('bm9zcGF3bg=='),HttpService:Base64Decode('cmVtb3Zlc3Bhd25wb2ludA==')},nNvTYekW(ctrcbZGI, speaker)	
	spawnpoint = false 
	CFyCkJIA(HttpService:Base64Decode('U3Bhd24gUG9pbnQ='),HttpService:Base64Decode('UmVtb3ZlZCBzcGF3biBwb2ludA==')) 	
end)		
ksqgBEpo(HttpService:Base64Decode('Zmxhc2hiYWNr'),{HttpService:Base64Decode('ZGllZHRw')},nNvTYekW(ctrcbZGI, speaker) 	
	if xTnByxPM ~= nil then  
		if speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) and speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).SeatPart then   	
			speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Sit = false   
			wait(.1) 		
		end 	
		wyxfunbJ(speaker.lZReEeCX).CFrame = xTnByxPM
	end 
end)
ksqgBEpo(HttpService:Base64Decode('aGF0c3Bpbg=='),{HttpService:Base64Decode('c3BpbmhhdHM=')},nNvTYekW(ctrcbZGI, speaker)   	
	vAOGaDPV(HttpService:Base64Decode('dW5oYXRzcGlu'))	
	wait(.5)  	
	for OpEnJPoA,lGgkoAop in pairs(speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetAccessories()) do
		local pZsTJwJL = Instance.new(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) pZsTJwJL.FrpOJNKH = UhfdZAQW() pZsTJwJL.Parent = lGgkoAop.Handle  	
		local dmKnwaxJ = Instance.new(HttpService:Base64Decode('Qm9keUFuZ3VsYXJWZWxvY2l0eQ==')) dmKnwaxJ.FrpOJNKH = UhfdZAQW() dmKnwaxJ.Parent = lGgkoAop.Handle   	
		lGgkoAop.Handle:FindFirstChildOfClass(HttpService:Base64Decode('V2VsZA==')):Destroy() 
		if ctrcbZGI[1] then
			dmKnwaxJ.AngularVelocity = Vector3.new(0, ctrcbZGI[1], 0)  
			dmKnwaxJ.MaxTorque = Vector3.new(0, ctrcbZGI[1] * 2, 0)
		else 
			dmKnwaxJ.AngularVelocity = Vector3.new(0, 100, 0)  
			dmKnwaxJ.MaxTorque = Vector3.new(0, 200, 0)   	
		end   
		pZsTJwJL.P = 30000 		
		pZsTJwJL.wIWlwmst = 50
		spinhats = RunService.Stepped:Connect(nNvTYekW()   
			pcall(nNvTYekW()
				pZsTJwJL.FZxyaMZC = Players.FntTRqLK.lZReEeCX.yrKsYgVR.FZxyaMZC
			end)   	
		end)  		
	end 		
end) 
ksqgBEpo(HttpService:Base64Decode('dW5oYXRzcGlu'),{HttpService:Base64Decode('dW5zcGluaGF0cw==')},nNvTYekW(ctrcbZGI, speaker)   	
	if spinhats then 
		spinhats:Disconnect()  
	end  		
	for OpEnJPoA,lGgkoAop in pairs(speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetAccessories()) do	
		lGgkoAop.Parent = workspace
		for i,CwgEliJJ in pairs(lGgkoAop.Handle) do		
			if CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) or CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keUFuZ3VsYXJWZWxvY2l0eQ==')) then   
				CwgEliJJ:Destroy()  
			end   		
		end		
		wait()  
		lGgkoAop.Parent = speaker.lZReEeCX
	end	
end) 
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJoYXRz'),{HttpService:Base64Decode('Y2xlYW5oYXRz')},nNvTYekW(ctrcbZGI, speaker)  	
	if firetouchinterest then   		
		local SoGHTZaE = Players.FntTRqLK   
		local lZReEeCX = SoGHTZaE.lZReEeCX	
		local RbGvCIuo = lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).CFrame 
		local eSEboYEh = {}   
		for OpEnJPoA, child in ipairs(workspace:GetChildren()) do   		
			if child:IsA(HttpService:Base64Decode('QWNjZXNzb3J5')) then		
				table.insert(eSEboYEh, child) 		
			end  		
		end  	
		for OpEnJPoA, accessory in ipairs(lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetAccessories()) do  	
			accessory:Destroy() 		
		end  	
		for i = 1, #eSEboYEh do 	
			repeat RunService.Heartbeat:wait() until eSEboYEh[i]
			firetouchinterest(eSEboYEh[i].Handle,lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')),0)  
			repeat RunService.Heartbeat:wait() until lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('QWNjZXNzb3J5'))   	
			lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('QWNjZXNzb3J5')):Destroy()   	
			repeat RunService.Heartbeat:wait() until not lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('QWNjZXNzb3J5')) 	
		end 	
		vAOGaDPV(HttpService:Base64Decode('cmVzZXQ='))	
		SoGHTZaE.CharacterAdded:Wait()  
		for i = 1,20 do 	
			RunService.Heartbeat:Wait()   		
			if SoGHTZaE.lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) then   	
				SoGHTZaE.lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).CFrame = RbGvCIuo   
			end   		
		end  
	else 		
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGZpcmV0b3VjaGludGVyZXN0KQ==')) 	
	end 
end)
ksqgBEpo(HttpService:Base64Decode('c3BsaXQ='),{},nNvTYekW(ctrcbZGI, speaker)   		
	if wmXGMjmI(speaker) then 	
		speaker.lZReEeCX.UpperTorso.Waist:Destroy()  
	else   	
		CFyCkJIA(HttpService:Base64Decode('UjE1IFJlcXVpcmVk'),HttpService:Base64Decode('VGhpcyBjb21tYW5kIHJlcXVpcmVzIHRoZSByMTUgcmlnIHR5cGU='))  		
	end   		
end)   
ksqgBEpo(HttpService:Base64Decode('bmlsY2hhcg=='),{},nNvTYekW(ctrcbZGI, speaker) 		
	if speaker.lZReEeCX ~= nil then   		
		speaker.lZReEeCX.Parent = nil   	
	end   
end)   
ksqgBEpo(HttpService:Base64Decode('dW5uaWxjaGFy'),{HttpService:Base64Decode('bm9uaWxjaGFy')},nNvTYekW(ctrcbZGI, speaker)  	
	if speaker.lZReEeCX ~= nil then  	
		speaker.lZReEeCX.Parent = workspace		
	end	
end)
ksqgBEpo(HttpService:Base64Decode('bm9yb290'),{HttpService:Base64Decode('cmVtb3Zlcm9vdA=='),HttpService:Base64Decode('cnJvb3Q=')},nNvTYekW(ctrcbZGI, speaker)
	if speaker.lZReEeCX ~= nil then		
		local cFlbMRaO = Players.FntTRqLK.lZReEeCX 
		cFlbMRaO.Parent = nil 	
		cFlbMRaO.HumanoidRootPart:Destroy() 
		cFlbMRaO.Parent = workspace   	
	end  		
end)  	
ksqgBEpo(HttpService:Base64Decode('cmVwbGFjZXJvb3Q='),{HttpService:Base64Decode('cmVwbGFjZXJvb3RwYXJ0')},nNvTYekW(ctrcbZGI, speaker)   
	if speaker.lZReEeCX ~= nil and speaker.lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) then  
		local EVuBPBBC = speaker.lZReEeCX 	
		local lelbiRAI = EVuBPBBC.Parent	
		local HhNoFHmN = EVuBPBBC and EVuBPBBC:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA=='))	
		local uPPCdtNp = HhNoFHmN.CFrame  		
		EVuBPBBC.Parent = game		
		local YJswfuzS = HhNoFHmN:Clone()  		
		YJswfuzS.Parent = EVuBPBBC  
		HhNoFHmN = HhNoFHmN:Destroy() 		
		YJswfuzS.CFrame = uPPCdtNp  		
		EVuBPBBC.Parent = lelbiRAI
	end 		
end)	
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJjaGFyYXBwZWFyYW5jZQ=='),{HttpService:Base64Decode('Y2xlYXJjaGFy'),HttpService:Base64Decode('Y2xyY2hhcg==')},nNvTYekW(ctrcbZGI, speaker)  	
	speaker:ClearCharacterAppearance()		
end) 		
ksqgBEpo(HttpService:Base64Decode('ZXF1aXB0b29scw=='),{},nNvTYekW(ctrcbZGI, speaker)  		
	for i,lGgkoAop in pairs(speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):GetChildren()) do	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) or lGgkoAop:IsA(HttpService:Base64Decode('SG9wcGVyQmlu')) then  
			lGgkoAop.Parent = speaker.lZReEeCX	
		end 
	end	
end)		
ksqgBEpo(HttpService:Base64Decode('dW5lcXVpcHRvb2xz'),{},nNvTYekW(ctrcbZGI, speaker)  	
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):UnequipTools()  
end)  
local nNvTYekW GetHandleTools(mkjkJNCq)   
	mkjkJNCq = mkjkJNCq or Players.FntTRqLK		
	local VbHsDltt = {}
	for OpEnJPoA, lGgkoAop in ipairs(mkjkJNCq.lZReEeCX and mkjkJNCq.lZReEeCX:GetChildren() or {}) do 		
		if lGgkoAop.IsA(lGgkoAop, HttpService:Base64Decode('QmFja3BhY2tJdGVt')) and lGgkoAop.FindFirstChild(lGgkoAop, HttpService:Base64Decode('SGFuZGxl')) then 
			VbHsDltt[#VbHsDltt + 1] = lGgkoAop 		
		end
	end
	for OpEnJPoA, lGgkoAop in ipairs(mkjkJNCq.Ehivqwak:GetChildren()) do  	
		if lGgkoAop.IsA(lGgkoAop, HttpService:Base64Decode('QmFja3BhY2tJdGVt')) and lGgkoAop.FindFirstChild(lGgkoAop, HttpService:Base64Decode('SGFuZGxl')) then   	
			VbHsDltt[#VbHsDltt + 1] = lGgkoAop   	
		end   		
	end 
	return VbHsDltt  	
end   	
ksqgBEpo(HttpService:Base64Decode('ZHVwZXRvb2xz'), {HttpService:Base64Decode('Y2xvbmV0b29scw==')}, nNvTYekW(ctrcbZGI, speaker) 	
	local HkUWyNsH = tonumber(ctrcbZGI[1]) or 1	
	local FTdMONpw = speaker.lZReEeCX.HumanoidRootPart.FZxyaMZC 
	local pRDeCaMy, TempPos = {}, Vector3.new(math.random(-2e5, 2e5), 2e5, math.random(-2e5, 2e5)) 		
	for i = 1, HkUWyNsH do 	
		local ZdvfjJrJ = speaker.lZReEeCX:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ='))		
		wait(.1, ZdvfjJrJ.Parent:MoveTo(TempPos))
		ZdvfjJrJ.RootPart.Anchored = speaker:ClearCharacterAppearance(wait(.1)) or true  		
		local iSBTvRHR = GetHandleTools(speaker)  		
		while #iSBTvRHR > 0 do  
			for OpEnJPoA, lGgkoAop in ipairs(iSBTvRHR) do
				task.spawn(nNvTYekW()   	
					for OpEnJPoA = 1, 25 do 	
						lGgkoAop.Parent = speaker.lZReEeCX
						lGgkoAop.Handle.Anchored = true  	
					end		
					for OpEnJPoA = 1, 5 do   	
						lGgkoAop.Parent = workspace   	
					end   	
					table.insert(pRDeCaMy, lGgkoAop.Handle)	
				end) 		
			end 	
			iSBTvRHR = GetHandleTools(speaker)  		
		end
		wait(.1)  		
		speaker.lZReEeCX = speaker.lZReEeCX:Destroy()		
		speaker.CharacterAdded:Wait():WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ=')).Parent:MoveTo(HkUWyNsH == i and FTdMONpw or TempPos, wait(.1))   
		if i == HkUWyNsH or i % 5 == 0 then		
			local HhNoFHmN = speaker.lZReEeCX.HumanoidRootPart  	
			if type(firetouchinterest) == HttpService:Base64Decode('ZnVuY3Rpb24=') then
				for OpEnJPoA, lGgkoAop in ipairs(pRDeCaMy) do 
					lGgkoAop.Anchored = not firetouchinterest(lGgkoAop, HhNoFHmN, 1, firetouchinterest(lGgkoAop, HhNoFHmN, 0)) and false or false 
				end 	
			else  		
				for OpEnJPoA, lGgkoAop in ipairs(pRDeCaMy) do 	
					task.spawn(nNvTYekW()  
						local NCBjKlfQ = lGgkoAop.CanCollide		
						lGgkoAop.CanCollide = false   		
						lGgkoAop.Anchored = false 	
						for OpEnJPoA = 1, 10 do   		
							lGgkoAop.CFrame = HhNoFHmN.CFrame  
							wait()   
						end  		
						lGgkoAop.CanCollide = NCBjKlfQ   
					end) 	
				end		
			end  	
			wait(.1)   		
			pRDeCaMy = {} 		
		end	
		TempPos = TempPos + Vector3.new(10, math.random(-5, 5), 0)  		
	end
end)
local uXzisYDs = RunService.RenderStepped  
ksqgBEpo(HttpService:Base64Decode('dG91Y2hpbnRlcmVzdHM='), {HttpService:Base64Decode('dG91Y2hpbnRlcmVzdA=='), HttpService:Base64Decode('ZmlyZXRvdWNoaW50ZXJlc3Rz'), HttpService:Base64Decode('ZmlyZXRvdWNoaW50ZXJlc3Q=')}, nNvTYekW(ctrcbZGI, speaker)   
	if not firetouchinterest then   	
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGZpcmV0b3VjaGludGVyZXN0KQ=='))		
		return   	
	end  	
	local IglyvNYH = wyxfunbJ(speaker.lZReEeCX) or speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('QmFzZVBhcnQ='))  		
	local nNvTYekW touch(NCBjKlfQ) 		
		NCBjKlfQ = NCBjKlfQ:FindFirstAncestorWhichIsA(HttpService:Base64Decode('UGFydA=='))		
		if NCBjKlfQ then 	
			if firetouchinterest then	
				task.spawn(nNvTYekW()  
					firetouchinterest(NCBjKlfQ, IglyvNYH, 1)	
					wait()
					firetouchinterest(NCBjKlfQ, IglyvNYH, 0)	
				end)		
			end
			NCBjKlfQ.CFrame = IglyvNYH.CFrame
		end 		
	end   
	if ctrcbZGI[1] then   
		local kfKkxmpZ = vqgOCmxq(1)	
		for OpEnJPoA, descendant in ipairs(workspace:GetDescendants()) do		
			if descendant:IsA(HttpService:Base64Decode('VG91Y2hUcmFuc21pdHRlcg==')) and descendant.FrpOJNKH == kfKkxmpZ or descendant.Parent.FrpOJNKH == kfKkxmpZ then 		
				touch(descendant) 
			end  	
		end   		
	else   		
		for OpEnJPoA, descendant in ipairs(workspace:GetDescendants()) do	
			if descendant:IsA(HttpService:Base64Decode('VG91Y2hUcmFuc21pdHRlcg==')) then  
				touch(descendant) 		
			end   
		end 		
	end  		
end)		
ksqgBEpo(HttpService:Base64Decode('ZnVsbGJyaWdodA=='),{HttpService:Base64Decode('ZmI='),HttpService:Base64Decode('ZnVsbGJyaWdodG5lc3M=')},nNvTYekW(ctrcbZGI, speaker)
	Lighting.Brightness = 2  
	Lighting.ClockTime = 14
	Lighting.FogEnd = 100000	
	Lighting.GlobalShadows = false
	Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)   
end) 	
ksqgBEpo(HttpService:Base64Decode('bG9vcGZ1bGxicmlnaHQ='),{HttpService:Base64Decode('bG9vcGZi')},nNvTYekW(ctrcbZGI, speaker)   
	if brightLoop then   
		brightLoop:Disconnect()	
	end	
	local nNvTYekW brightFunc()   
		Lighting.Brightness = 2 	
		Lighting.ClockTime = 14		
		Lighting.FogEnd = 100000   
		Lighting.GlobalShadows = false   
		Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)		
	end 	
	brightLoop = RunService.RenderStepped:Connect(brightFunc) 		
end)  		
ksqgBEpo(HttpService:Base64Decode('dW5sb29wZnVsbGJyaWdodA=='),{HttpService:Base64Decode('dW5sb29wZmI=')},nNvTYekW(ctrcbZGI, speaker)		
	if brightLoop then	
		brightLoop:Disconnect()		
	end   		
end) 	
ksqgBEpo(HttpService:Base64Decode('YW1iaWVudA=='),{},nNvTYekW(ctrcbZGI, speaker)  		
	Lighting.Ambient = Color3.new(ctrcbZGI[1],ctrcbZGI[2],ctrcbZGI[3])	
	Lighting.OutdoorAmbient = Color3.new(ctrcbZGI[1],ctrcbZGI[2],ctrcbZGI[3])
end)  
ksqgBEpo(HttpService:Base64Decode('ZGF5'),{},nNvTYekW(ctrcbZGI, speaker)	
	Lighting.ClockTime = 14 		
end)	
ksqgBEpo(HttpService:Base64Decode('bmlnaHQ='),{},nNvTYekW(ctrcbZGI, speaker) 	
	Lighting.ClockTime = 0 	
end)  	
ksqgBEpo(HttpService:Base64Decode('bm9mb2c='),{},nNvTYekW(ctrcbZGI, speaker)		
	Lighting.FogEnd = 100000 
	for i,lGgkoAop in pairs(Lighting:GetDescendants()) do  		
		if lGgkoAop:IsA(HttpService:Base64Decode('QXRtb3NwaGVyZQ==')) then
			lGgkoAop:Destroy()   		
		end	
	end 
end)  	
ksqgBEpo(HttpService:Base64Decode('YnJpZ2h0bmVzcw=='),{},nNvTYekW(ctrcbZGI, speaker)
	Lighting.Brightness = ctrcbZGI[1]	
end)  		
ksqgBEpo(HttpService:Base64Decode('Z2xvYmFsc2hhZG93cw=='),{HttpService:Base64Decode('Z3NoYWRvd3M=')},nNvTYekW(ctrcbZGI, speaker)  	
	Lighting.GlobalShadows = true   		
end)  		
ksqgBEpo(HttpService:Base64Decode('dW5nbG9iYWxzaGFkb3dz'),{HttpService:Base64Decode('bm9nc2hhZG93cw=='),HttpService:Base64Decode('dW5nc2hhZG93cw=='),HttpService:Base64Decode('bm9nbG9iYWxzaGFkb3dz')},nNvTYekW(ctrcbZGI, speaker)		
	Lighting.GlobalShadows = false   	
end)  	
origsettings = {abt = Lighting.Ambient, oabt = Lighting.OutdoorAmbient, brt = Lighting.Brightness, time = Lighting.ClockTime, fe = Lighting.FogEnd, fs = Lighting.FogStart, gs = Lighting.GlobalShadows}  	
ksqgBEpo(HttpService:Base64Decode('cmVzdG9yZWxpZ2h0aW5n'),{HttpService:Base64Decode('cmxpZ2h0aW5n')},nNvTYekW(ctrcbZGI, speaker) 
	Lighting.Ambient = origsettings.abt 
	Lighting.OutdoorAmbient = origsettings.oabt   
	Lighting.Brightness = origsettings.brt  	
	Lighting.ClockTime = origsettings.time  	
	Lighting.FogEnd = origsettings.fe   
	Lighting.FogStart = origsettings.fs   		
	Lighting.GlobalShadows = origsettings.gs   		
end)		
ksqgBEpo(HttpService:Base64Decode('c3R1bg=='),{HttpService:Base64Decode('cGxhdGZvcm1zdGFuZA==')},nNvTYekW(ctrcbZGI, speaker) 		
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = true   
end) 
ksqgBEpo(HttpService:Base64Decode('dW5zdHVu'),{HttpService:Base64Decode('bm9zdHVu'),HttpService:Base64Decode('dW5wbGF0Zm9ybXN0YW5k'),HttpService:Base64Decode('bm9wbGF0Zm9ybXN0YW5k')},nNvTYekW(ctrcbZGI, speaker)
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).PlatformStand = false  
end) 	
ksqgBEpo(HttpService:Base64Decode('bm9yb3RhdGU='),{HttpService:Base64Decode('bm9hdXRvcm90YXRl')},nNvTYekW(ctrcbZGI, speaker)  	
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).AutoRotate  = false	
end) 
ksqgBEpo(HttpService:Base64Decode('dW5ub3JvdGF0ZQ=='),{HttpService:Base64Decode('YXV0b3JvdGF0ZQ==')},nNvTYekW(ctrcbZGI, speaker)		
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).AutoRotate  = true  	
end)   	
ksqgBEpo(HttpService:Base64Decode('ZW5hYmxlc3RhdGU='),{},nNvTYekW(ctrcbZGI, speaker)  	
	local NCBjKlfQ = ctrcbZGI[1]  	
	if not tonumber(NCBjKlfQ) then   
		local NCBjKlfQ = Enum.HumanoidStateType[ctrcbZGI[1]]  		
	end		
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):SetStateEnabled(NCBjKlfQ, true)   		
end)	
ksqgBEpo(HttpService:Base64Decode('ZGlzYWJsZXN0YXRl'),{},nNvTYekW(ctrcbZGI, speaker)		
	local NCBjKlfQ = ctrcbZGI[1] 	
	if not tonumber(NCBjKlfQ) then 	
		local NCBjKlfQ = Enum.HumanoidStateType[ctrcbZGI[1]]   
	end 
	speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):SetStateEnabled(NCBjKlfQ, false) 
end)  		
ksqgBEpo(HttpService:Base64Decode('ZHJvcGhhdHM='),{HttpService:Base64Decode('ZHJvcGhhdA==')},nNvTYekW(ctrcbZGI, speaker)  
	if speaker.lZReEeCX then 		
		for OpEnJPoA,lGgkoAop in pairs(speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):GetAccessories()) do 	
			lGgkoAop.Parent = workspace		
		end  
	end   		
end)   		
ksqgBEpo(HttpService:Base64Decode('ZGVsZXRlaGF0cw=='),{HttpService:Base64Decode('bm9oYXRz'),HttpService:Base64Decode('cmhhdHM=')},nNvTYekW(ctrcbZGI, speaker)   
	for i,lGgkoAop in next, speaker.lZReEeCX:GetDescendants() do
		if lGgkoAop:IsA(HttpService:Base64Decode('QWNjZXNzb3J5')) then   		
			for i,mkjkJNCq in next, lGgkoAop:GetDescendants() do   	
				if mkjkJNCq:IsA(HttpService:Base64Decode('V2VsZA==')) then	
					mkjkJNCq:Destroy()  		
				end 
			end		
		end  
	end  	
end)		
ksqgBEpo(HttpService:Base64Decode('ZHJvcHRvb2xz'),{HttpService:Base64Decode('ZHJvcHRvb2w=')},nNvTYekW(ctrcbZGI, speaker)   
	for i,lGgkoAop in pairs(Players.FntTRqLK.Ehivqwak:GetChildren()) do   	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) then 
			lGgkoAop.Parent = Players.FntTRqLK.lZReEeCX  
		end  
	end  		
	wait()   
	for i,lGgkoAop in pairs(Players.FntTRqLK.lZReEeCX:GetChildren()) do   
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) then	
			lGgkoAop.Parent = workspace  
		end   		
	end		
end)   	
ksqgBEpo(HttpService:Base64Decode('ZHJvcHBhYmxldG9vbHM='),{},nNvTYekW(ctrcbZGI, speaker)		
	if speaker.lZReEeCX then   		
		for OpEnJPoA,awowkTxU in pairs(speaker.lZReEeCX:GetChildren()) do   
			if awowkTxU:IsA(HttpService:Base64Decode('VG9vbA==')) then   		
				awowkTxU.CanBeDropped = true
			end  	
		end  
	end		
	if speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')) then 		
		for OpEnJPoA,awowkTxU in pairs(speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):GetChildren()) do  		
			if awowkTxU:IsA(HttpService:Base64Decode('VG9vbA==')) then		
				awowkTxU.CanBeDropped = true	
			end  		
		end   		
	end   
end)  	
local oTFclLpZ = ''
local cSpPvgWk = ''		
ksqgBEpo(HttpService:Base64Decode('cmVhY2g='),{},nNvTYekW(ctrcbZGI, speaker)
	vAOGaDPV(HttpService:Base64Decode('dW5yZWFjaA=='))   	
	wait()  		
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do  
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) then  
			if ctrcbZGI[1] then		
				oTFclLpZ = lGgkoAop.Handle.eCEGCheh	
				cSpPvgWk = lGgkoAop.GripPos   	
				local tRbXwQwX = Instance.new(HttpService:Base64Decode('U2VsZWN0aW9uQm94'))  		
				tRbXwQwX.FrpOJNKH = HttpService:Base64Decode('U2VsZWN0aW9uQm94Q3JlYXRlZA==')   		
				tRbXwQwX.Parent = lGgkoAop.Handle   		
				tRbXwQwX.Adornee = lGgkoAop.Handle 	
				lGgkoAop.Handle.Massless = true   
				lGgkoAop.Handle.eCEGCheh = Vector3.new(0.5,0.5,ctrcbZGI[1]) 	
				lGgkoAop.GripPos = Vector3.new(0,0,0) 		
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):UnequipTools()		
			else   	
				oTFclLpZ = lGgkoAop.Handle.eCEGCheh 	
				cSpPvgWk = lGgkoAop.GripPos
				local tRbXwQwX = Instance.new(HttpService:Base64Decode('U2VsZWN0aW9uQm94'))
				tRbXwQwX.FrpOJNKH = HttpService:Base64Decode('U2VsZWN0aW9uQm94Q3JlYXRlZA==') 	
				tRbXwQwX.Parent = lGgkoAop.Handle 
				tRbXwQwX.Adornee = lGgkoAop.Handle  	
				lGgkoAop.Handle.Massless = true		
				lGgkoAop.Handle.eCEGCheh = Vector3.new(0.5,0.5,60)  
				lGgkoAop.GripPos = Vector3.new(0,0,0) 
				speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):UnequipTools() 		
			end   	
		end   		
	end 	
end)   	
ksqgBEpo(HttpService:Base64Decode('Ym94cmVhY2g='), {}, nNvTYekW(ctrcbZGI, speaker) 		
    vAOGaDPV(HttpService:Base64Decode('dW5yZWFjaA=='))  		
    wait() 		
    for i, lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do  		
        if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) then  		
            local oqIgLheW = tonumber(ctrcbZGI[1]) or 60   		
            oTFclLpZ = lGgkoAop.Handle.eCEGCheh		
            cSpPvgWk = lGgkoAop.GripPos  		
            local tRbXwQwX = Instance.new(HttpService:Base64Decode('U2VsZWN0aW9uQm94'))   
            tRbXwQwX.FrpOJNKH = HttpService:Base64Decode('U2VsZWN0aW9uQm94Q3JlYXRlZA==')   	
            tRbXwQwX.Parent = lGgkoAop.Handle   	
            tRbXwQwX.Adornee = lGgkoAop.Handle   		
            lGgkoAop.Handle.Massless = true 		
            lGgkoAop.Handle.eCEGCheh = Vector3.new(oqIgLheW, oqIgLheW, oqIgLheW)   	
            lGgkoAop.GripPos = Vector3.new(0, 0, 0)   
            speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')):UnequipTools()   		
        end   		
    end  		
end)		
ksqgBEpo(HttpService:Base64Decode('dW5yZWFjaA=='),{HttpService:Base64Decode('bm9yZWFjaA=='),HttpService:Base64Decode('dW5ib3hyZWFjaA==')},nNvTYekW(ctrcbZGI, speaker)   		
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do   	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) then  
			lGgkoAop.Handle.eCEGCheh = oTFclLpZ		
			lGgkoAop.GripPos = cSpPvgWk  		
			lGgkoAop.Handle.SelectionBoxCreated:Destroy()   	
		end 
	end 		
end) 
ksqgBEpo(HttpService:Base64Decode('Z3JpcHBvcw=='),{},nNvTYekW(ctrcbZGI, speaker)
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetDescendants()) do   	
		if lGgkoAop:IsA(HttpService:Base64Decode('VG9vbA==')) then		
			lGgkoAop.Parent = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s='))   		
			lGgkoAop.GripPos = Vector3.new(ctrcbZGI[1],ctrcbZGI[2],ctrcbZGI[3])
			lGgkoAop.Parent = speaker.lZReEeCX	
		end		
	end   		
end)  		
ksqgBEpo(HttpService:Base64Decode('dXNldG9vbHM='), {}, nNvTYekW(ctrcbZGI, speaker)  		
	local Ehivqwak = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s='))   		
	local aXSGhCoK = tonumber(ctrcbZGI[1]) or 1	
	local uiFZSIyR = tonumber(ctrcbZGI[2]) or false	
	for OpEnJPoA, lGgkoAop in ipairs(Ehivqwak:GetChildren()) do   	
		lGgkoAop.Parent = speaker.lZReEeCX  		
		task.spawn(nNvTYekW() 	
			for OpEnJPoA = 1, aXSGhCoK do   
				lGgkoAop:Activate()   	
				if uiFZSIyR then
					wait(uiFZSIyR)		
				end  	
			end 
			lGgkoAop.Parent = Ehivqwak	
		end) 		
	end   	
end) 		
ksqgBEpo(HttpService:Base64Decode('bG9ncw=='),{},nNvTYekW(ctrcbZGI, speaker)  
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.3, true, nil)	
end)  		
ksqgBEpo(HttpService:Base64Decode('Y2hhdGxvZ3M='),{HttpService:Base64Decode('Y2xvZ3M=')},nNvTYekW(ctrcbZGI, speaker)
	join.Visible = false		
	chat.Visible = true  		
	table.remove(shade3,table.find(shade3,selectChat))   
	table.remove(shade2,table.find(shade2,selectJoin))  	
	table.insert(shade2,selectChat)		
	table.insert(shade3,selectJoin)   		
	selectJoin.BackgroundColor3 = currentShade3 
	selectChat.BackgroundColor3 = currentShade2  
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.3, true, nil)  		
end) 		
ksqgBEpo(HttpService:Base64Decode('am9pbmxvZ3M='),{HttpService:Base64Decode('amxvZ3M=')},nNvTYekW(ctrcbZGI, speaker)   		
	chat.Visible = false
	join.Visible = true	  		
	table.remove(shade3,table.find(shade3,selectJoin))  	
	table.remove(shade2,table.find(shade2,selectChat))
	table.insert(shade2,selectJoin)		
	table.insert(shade3,selectChat)		
	selectChat.BackgroundColor3 = currentShade3   		
	selectJoin.BackgroundColor3 = currentShade2 		
	logs:TweenPosition(UDim2.new(0, 0, 1, -265), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.3, true, nil) 	
end) 	
ksqgBEpo(HttpService:Base64Decode('Y2hhdGxvZ3N3ZWJob29r'), {HttpService:Base64Decode('bG9nc3dlYmhvb2s=')}, nNvTYekW(ctrcbZGI, speaker)
    if httprequest then 		
        logsWebhook = ctrcbZGI[1] or nil 
        KiDAStZA()  	
    else  	
        CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHJlcXVlc3Qp'))   
    end  	
end)  
ksqgBEpo(HttpService:Base64Decode('YW50aWNoYXRsb2dz'), {HttpService:Base64Decode('YW50aWNoYXRsb2dnZXI=')}, nNvTYekW(ctrcbZGI, speaker)   		
    if not isLegacyChat then	
        return CFyCkJIA(HttpService:Base64Decode('YW50aWNoYXRsb2dz'), HttpService:Base64Decode('R2FtZSBuZWVkcyB0aGUgbGVnYWN5IGNoYXQ='))		
    end   		
    local aHmwDJMK, OpEnJPoA = pcall(nNvTYekW() 	
        rawset(require(speaker:FindFirstChild(HttpService:Base64Decode('UGxheWVyU2NyaXB0cw==')):FindFirstChild(HttpService:Base64Decode('Q2hhdFNjcmlwdA==')).ChatMain), HttpService:Base64Decode('TWVzc2FnZVBvc3RlZA=='), { 	
            [HttpService:Base64Decode('ZmlyZQ==')] = nNvTYekW(msg)  
                return msg  	
            end,   	
            [HttpService:Base64Decode('d2FpdA==')] = nNvTYekW()   		
                return 	
            end,	
            [HttpService:Base64Decode('Y29ubmVjdA==')] = nNvTYekW()  	
                return  
            end  	
        })
    end)  	
    CFyCkJIA(HttpService:Base64Decode('YW50aWNoYXRsb2dz'), aHmwDJMK and HttpService:Base64Decode('RW5hYmxlZA==') or HttpService:Base64Decode('RmFpbGVkIHRvIGVuYWJsZSBhbnRpY2hhdGxvZ3M=')) 		
end)   	
flinging = false  
ksqgBEpo(HttpService:Base64Decode('Zmxpbmc='),{},nNvTYekW(ctrcbZGI, speaker) 
	flinging = false  		
	for OpEnJPoA, child in pairs(speaker.lZReEeCX:GetDescendants()) do   
		if child:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then   	
			child.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)   	
		end   
	end	
	vAOGaDPV(HttpService:Base64Decode('bm9jbGlw')) 	
	wait(.1)		
	local KoBAKFqC = Instance.new(HttpService:Base64Decode('Qm9keUFuZ3VsYXJWZWxvY2l0eQ=='))   
	KoBAKFqC.FrpOJNKH = UhfdZAQW()   	
	KoBAKFqC.Parent = wyxfunbJ(speaker.lZReEeCX)  	
	KoBAKFqC.AngularVelocity = Vector3.new(0,99999,0) 	
	KoBAKFqC.MaxTorque = Vector3.new(0,math.huge,0)   
	KoBAKFqC.P = math.huge		
	local EVuBPBBC = speaker.lZReEeCX:GetChildren() 	
	for i, lGgkoAop in next, EVuBPBBC do  
		if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then  
			lGgkoAop.CanCollide = false 	
			lGgkoAop.Massless = true 		
			lGgkoAop.Velocity = Vector3.new(0, 0, 0)   		
		end   
	end 	
	flinging = true   		
	local nNvTYekW flingDiedF()  	
		vAOGaDPV(HttpService:Base64Decode('dW5mbGluZw==')) 
	end
	flingDied = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).Died:Connect(flingDiedF)  
	repeat 	
		KoBAKFqC.AngularVelocity = Vector3.new(0,99999,0)  	
		wait(.2) 		
		KoBAKFqC.AngularVelocity = Vector3.new(0,0,0)  
		wait(.1)  		
	until flinging == false   		
end)  	
ksqgBEpo(HttpService:Base64Decode('dW5mbGluZw=='),{HttpService:Base64Decode('bm9mbGluZw==')},nNvTYekW(ctrcbZGI, speaker) 
	vAOGaDPV(HttpService:Base64Decode('Y2xpcA=='))   		
	if flingDied then 	
		flingDied:Disconnect()   		
	end  		
	flinging = false   	
	wait(.1) 		
	local DTFFUKMT = speaker.lZReEeCX   	
	if not DTFFUKMT or not wyxfunbJ(DTFFUKMT) then return end   	
	for i,lGgkoAop in pairs(wyxfunbJ(DTFFUKMT):GetChildren()) do 
		if lGgkoAop.ClassName == HttpService:Base64Decode('Qm9keUFuZ3VsYXJWZWxvY2l0eQ==') then		
			lGgkoAop:Destroy()   
		end   
	end 
	for OpEnJPoA, child in pairs(DTFFUKMT:GetDescendants()) do  
		if child.ClassName == HttpService:Base64Decode('UGFydA==') or child.ClassName == HttpService:Base64Decode('TWVzaFBhcnQ=') then   		
			child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)   		
		end   	
	end   		
end) 	
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlZmxpbmc='),{},nNvTYekW(ctrcbZGI, speaker)  
	if flinging then 	
		vAOGaDPV(HttpService:Base64Decode('dW5mbGluZw=='))
	else		
		vAOGaDPV(HttpService:Base64Decode('Zmxpbmc='))   		
	end 	
end)
ksqgBEpo(HttpService:Base64Decode('Zmx5Zmxpbmc='), {}, nNvTYekW(ctrcbZGI, speaker)   	
    vAOGaDPV(HttpService:Base64Decode('dW52ZWhpY2xlZmx5XFx1bndhbGtmbGluZw=='))   	
    wait()  		
    if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then  	
        vehicleflyspeed = ctrcbZGI[1]   		
    end   		
    vAOGaDPV(HttpService:Base64Decode('dmVoaWNsZWZseVxcd2Fsa2ZsaW5n')) 	
end)  
ksqgBEpo(HttpService:Base64Decode('dW5mbHlmbGluZw=='), {}, nNvTYekW(ctrcbZGI, speaker) 	
    vAOGaDPV(HttpService:Base64Decode('dW52ZWhpY2xlZmx5XFx1bndhbGtmbGluZ1xcYnJlYWt2ZWxvY2l0eQ=='))   	
end)		
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlZmx5Zmxpbmc='), {}, nNvTYekW(ctrcbZGI, speaker)
    vAOGaDPV(flinging and HttpService:Base64Decode('dW5mbHlmbGluZw==') or HttpService:Base64Decode('Zmx5Zmxpbmc='))   
end)	
walkflinging = false	
ksqgBEpo(HttpService:Base64Decode('d2Fsa2ZsaW5n'), {}, nNvTYekW(ctrcbZGI, speaker)	
    vAOGaDPV(HttpService:Base64Decode('dW53YWxrZmxpbmc='))   
    local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  		
    if LYfpysRB then   
        LYfpysRB.Died:Connect(nNvTYekW()
            vAOGaDPV(HttpService:Base64Decode('dW53YWxrZmxpbmc='))	
        end)   
    end	
    vAOGaDPV(HttpService:Base64Decode('bm9jbGlwIG5vbm90aWZ5'))  		
    walkflinging = true  	
    repeat RunService.Heartbeat:Wait() 		
        local SYHpfdlI = speaker.lZReEeCX  	
        local IglyvNYH = wyxfunbJ(SYHpfdlI)  
        local HqcQOTMO, movel = nil, 0.1
        while not (SYHpfdlI and SYHpfdlI.Parent and IglyvNYH and IglyvNYH.Parent) do
            RunService.Heartbeat:Wait() 
            SYHpfdlI = speaker.lZReEeCX  	
            IglyvNYH = wyxfunbJ(SYHpfdlI) 
        end  		
        HqcQOTMO = IglyvNYH.Velocity 		
        IglyvNYH.Velocity = HqcQOTMO * 10000 + Vector3.new(0, 10000, 0) 
        RunService.RenderStepped:Wait()
        if SYHpfdlI and SYHpfdlI.Parent and IglyvNYH and IglyvNYH.Parent then 	
            IglyvNYH.Velocity = HqcQOTMO 	
        end 	
        RunService.Stepped:Wait()   	
        if SYHpfdlI and SYHpfdlI.Parent and IglyvNYH and IglyvNYH.Parent then  
            IglyvNYH.Velocity = HqcQOTMO + Vector3.new(0, movel, 0)	
            movel = movel * -1  		
        end 	
    until walkflinging == false   
end)   
ksqgBEpo(HttpService:Base64Decode('dW53YWxrZmxpbmc='), {HttpService:Base64Decode('bm93YWxrZmxpbmc=')}, nNvTYekW(ctrcbZGI, speaker)  	
    walkflinging = false   		
    vAOGaDPV(HttpService:Base64Decode('dW5ub2NsaXAgbm9ub3RpZnk=')) 
end)  		
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xld2Fsa2ZsaW5n'), {}, nNvTYekW(ctrcbZGI, speaker)		
    vAOGaDPV(walkflinging and HttpService:Base64Decode('dW53YWxrZmxpbmc=') or HttpService:Base64Decode('d2Fsa2ZsaW5n')) 
end)  	
ksqgBEpo(HttpService:Base64Decode('aW52aXNmbGluZw=='),{},nNvTYekW(ctrcbZGI, speaker)	
	local AydxZmqU = speaker.lZReEeCX   	
	AydxZmqU:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')):SetStateEnabled(Enum.HumanoidStateType.Dead, false)	
	local FUWafsSL=Instance.new(HttpService:Base64Decode('TW9kZWw='))  	
	FUWafsSL.Parent = speaker.lZReEeCX
	local ppnQcSvO = Instance.new(HttpService:Base64Decode('UGFydA=='))   
	ppnQcSvO.FrpOJNKH=HttpService:Base64Decode('VG9yc28=')	
	ppnQcSvO.CanCollide = false		
	ppnQcSvO.Anchored = true   	
	local TTcKnBVP = Instance.new(HttpService:Base64Decode('UGFydA=='))  	
	TTcKnBVP.FrpOJNKH=HttpService:Base64Decode('SGVhZA==')	
	TTcKnBVP.Parent = FUWafsSL   	
	TTcKnBVP.Anchored = true  	
	TTcKnBVP.CanCollide = false		
	local mhJciGgG =Instance.new(HttpService:Base64Decode('SHVtYW5vaWQ='))	
	mhJciGgG.FrpOJNKH=HttpService:Base64Decode('SHVtYW5vaWQ=') 	
	mhJciGgG.Parent = FUWafsSL	
	ppnQcSvO.FZxyaMZC = Vector3.new(0,9999,0)		
	speaker.lZReEeCX=FUWafsSL  
	wait(3)		
	speaker.lZReEeCX=AydxZmqU 		
	wait(3)   
	local ryZRcUmU = Instance.new(HttpService:Base64Decode('SHVtYW5vaWQ='))		
	TTcKnBVP:Clone() 
	ryZRcUmU.Parent = speaker.lZReEeCX  	
	local IglyvNYH =  wyxfunbJ(speaker.lZReEeCX)   
	for i,lGgkoAop in pairs(speaker.lZReEeCX:GetChildren()) do 		
		if lGgkoAop ~= IglyvNYH and  lGgkoAop.FrpOJNKH ~= HttpService:Base64Decode('SHVtYW5vaWQ=') then  	
			lGgkoAop:Destroy()   		
		end	
	end 	
	IglyvNYH.Transparency = 0		
	IglyvNYH.Color = Color3.new(1, 1, 1) 
	local zViPqmoB	
	zViPqmoB = RunService.Stepped:Connect(nNvTYekW()   		
		if speaker.lZReEeCX and wyxfunbJ(speaker.lZReEeCX) then	
			wyxfunbJ(speaker.lZReEeCX).CanCollide = false	
		else   
			zViPqmoB:Disconnect()   
		end 		
	end)
	wAdSfHVE()  		
	workspace.CurrentCamera.CameraSubject = IglyvNYH 		
	local KoBAKFqC = Instance.new(HttpService:Base64Decode('Qm9keVRocnVzdA=='))		
	KoBAKFqC.Parent = wyxfunbJ(speaker.lZReEeCX)   	
	KoBAKFqC.Force = Vector3.new(99999,99999*10,99999)   		
	KoBAKFqC.Location = wyxfunbJ(speaker.lZReEeCX).FZxyaMZC
end)	
ksqgBEpo(HttpService:Base64Decode('YW50aWZsaW5n'), {}, nNvTYekW(ctrcbZGI, speaker)   	
    if antifling then 	
        antifling:Disconnect()  	
        antifling = nil 		
    end  	
    antifling = RunService.Stepped:Connect(nNvTYekW()
        for OpEnJPoA, suIMLClk in pairs(Players:GetPlayers()) do   
            if suIMLClk ~= speaker and suIMLClk.lZReEeCX then   	
                for OpEnJPoA, lGgkoAop in pairs(suIMLClk.lZReEeCX:GetDescendants()) do 		
                    if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then 		
                        lGgkoAop.CanCollide = false		
                    end  	
                end   		
            end   
        end  
    end) 	
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5hbnRpZmxpbmc='), {}, nNvTYekW(ctrcbZGI, speaker)
    if antifling then 		
        antifling:Disconnect()  		
        antifling = nil   	
    end  		
end)	
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xlYW50aWZsaW5n'), {}, nNvTYekW(ctrcbZGI, speaker) 
    vAOGaDPV(antifling and HttpService:Base64Decode('dW5hbnRpZmxpbmc=') or HttpService:Base64Decode('YW50aWZsaW5n'))   
end)		
nNvTYekW UpKItOuB(speaker,HJDZBMru)		
	if TLKLfivt(speaker) then  		
		local cFlbMRaO = speaker.lZReEeCX 	
		local ApLGjJPS = HJDZBMru.lZReEeCX  		
		local ltkLOOPM = speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))  
		local tQJvfSNH = wyxfunbJ(speaker.lZReEeCX)  		
		local blTCtbVm = wyxfunbJ(HJDZBMru.lZReEeCX)   		
		ltkLOOPM.FrpOJNKH = HttpService:Base64Decode('MQ==')   
		local qDfXvXnf = ltkLOOPM:Clone() 	
		qDfXvXnf.Parent = cFlbMRaO   
		qDfXvXnf.FrpOJNKH = HttpService:Base64Decode('SHVtYW5vaWQ=')  
		wait()   	
		ltkLOOPM:Destroy() 	
		workspace.CurrentCamera.CameraSubject = cFlbMRaO   
		qDfXvXnf.DisplayDistanceType = HttpService:Base64Decode('Tm9uZQ==') 
		local CcOOkFmZ = speaker:FindFirstChildOfClass(HttpService:Base64Decode('QmFja3BhY2s=')):FindFirstChildOfClass(HttpService:Base64Decode('VG9vbA==')) or speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('VG9vbA=='))  	
		CcOOkFmZ.Parent = cFlbMRaO   		
		tQJvfSNH.CFrame = blTCtbVm.CFrame * CFrame.new(0, 0, 0) * CFrame.new(math.random(-100, 100)/200,math.random(-100, 100)/200,math.random(-100, 100)/200) 		
		local mZgjuGZJ = 0 	
		repeat   
			wait(.1) 
			mZgjuGZJ = mZgjuGZJ + 1		
			tQJvfSNH.CFrame = blTCtbVm.CFrame   
		until (CcOOkFmZ.Parent ~= cFlbMRaO or not tQJvfSNH or not blTCtbVm or not tQJvfSNH.Parent or not blTCtbVm.Parent or mZgjuGZJ > 250) and mZgjuGZJ > 2 	
	else 	
		CFyCkJIA(HttpService:Base64Decode('VG9vbCBSZXF1aXJlZA=='),HttpService:Base64Decode('WW91IG5lZWQgdG8gaGF2ZSBhbiBpdGVtIGluIHlvdXIgaW52ZW50b3J5IHRvIHVzZSB0aGlzIGNvbW1hbmQ=')) 	
	end   	
end
nNvTYekW hYHuJpQK(speaker,HJDZBMru,fast)   
	if TLKLfivt(speaker) then  		
		if HJDZBMru ~= nil then  		
			local fFrUUFyf = wyxfunbJ(speaker.lZReEeCX).CFrame 		
			if not fast then	
				RtxFtDOn(speaker)   
				wait()  	
				repeat wait() until speaker.lZReEeCX ~= nil and wyxfunbJ(speaker.lZReEeCX)   
				wait(0.3) 	
			end 		
			local tQJvfSNH = wyxfunbJ(speaker.lZReEeCX)
			UpKItOuB(speaker,HJDZBMru)		
			repeat		
				wait()  	
				tQJvfSNH.CFrame = CFrame.new(999999, workspace.FallenPartsDestroyHeight + 5,999999)   	
			until not wyxfunbJ(HJDZBMru.lZReEeCX) or not wyxfunbJ(speaker.lZReEeCX)  		
			speaker.CharacterAdded:Wait():WaitForChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).CFrame = fFrUUFyf   	
		end
	else  	
		CFyCkJIA(HttpService:Base64Decode('VG9vbCBSZXF1aXJlZA=='),HttpService:Base64Decode('WW91IG5lZWQgdG8gaGF2ZSBhbiBpdGVtIGluIHlvdXIgaW52ZW50b3J5IHRvIHVzZSB0aGlzIGNvbW1hbmQ=')) 	
	end 
end  	
ksqgBEpo(HttpService:Base64Decode('aGFuZGxla2lsbA=='), {HttpService:Base64Decode('aGtpbGw=')}, nNvTYekW(ctrcbZGI, speaker) 		
	if not firetouchinterest then  	
		return CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGZpcmV0b3VjaGludGVyZXN0KQ=='))	
	end  
	if not speaker.lZReEeCX then return end	
	local CcOOkFmZ = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('VG9vbA=='))  		
	local wUhanqJa = CcOOkFmZ and CcOOkFmZ:FindFirstChild(HttpService:Base64Decode('SGFuZGxl')) 		
	if not wUhanqJa then   		
		return CFyCkJIA(HttpService:Base64Decode('SGFuZGxlIEtpbGw='), HttpService:Base64Decode('WW91IG5lZWQgdG8gaG9sZCBhIFw=')UzQhwDiv\HttpService:Base64Decode('IHRoYXQgZG9lcyBkYW1hZ2Ugb24gdG91Y2guIEZvciBleGFtcGxlIGEgY29tbW9uIFN3b3JkIHRvb2wu')) 
	end	
	local SYIVMXdT = tonumber(ctrcbZGI[2]) or math.huge		
    if SYIVMXdT ~= math.huge then CFyCkJIA(HttpService:Base64Decode('SGFuZGxlIEtpbGw='), (HttpService:Base64Decode('U3RhcnRlZCFcblJhZGl1czogJXM=')):format(tostring(SYIVMXdT):upper())) end   
	while task.wait() and speaker.lZReEeCX and CcOOkFmZ.Parent and CcOOkFmZ.Parent == speaker.lZReEeCX do  
		for OpEnJPoA, plr in next, KpWujDEJ(ctrcbZGI[1], speaker) do
			plr = Players[plr] 	
			if plr ~= speaker and plr.lZReEeCX then  	
				local ltkLOOPM = plr.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))   		
				local IglyvNYH = ltkLOOPM and wyxfunbJ(plr.lZReEeCX)   		
				if IglyvNYH and ltkLOOPM.Health > 0 and ltkLOOPM:GetState() ~= Enum.HumanoidStateType.Dead and speaker:DistanceFromCharacter(IglyvNYH.FZxyaMZC) <= SYIVMXdT then  		
					firetouchinterest(wUhanqJa, IglyvNYH, 1)   		
					firetouchinterest(wUhanqJa, IglyvNYH, 0)   	
				end   		
			end	
		end 
	end   
	CFyCkJIA(HttpService:Base64Decode('SGFuZGxlIEtpbGw='), HttpService:Base64Decode('U3RvcHBlZCE='))
end) 
local MvyirKPi = RunService.Heartbeat 	
ksqgBEpo(HttpService:Base64Decode('dHB3YWxr'), {HttpService:Base64Decode('dGVsZXBvcnR3YWxr')}, nNvTYekW(ctrcbZGI, speaker)  		
	tpwalking = true 
	local dClYaRpL = speaker.lZReEeCX	
	local ltkLOOPM = dClYaRpL and dClYaRpL:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  	
	while tpwalking and dClYaRpL and ltkLOOPM and ltkLOOPM.Parent do 		
		local hLDiSiCF = MvyirKPi:Wait()		
		if ltkLOOPM.MoveDirection.Magnitude > 0 then   
			if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then	
				dClYaRpL:TranslateBy(ltkLOOPM.MoveDirection * tonumber(ctrcbZGI[1]) * hLDiSiCF * 10)  		
			else		
				dClYaRpL:TranslateBy(ltkLOOPM.MoveDirection * hLDiSiCF * 10) 
			end  		
		end   
	end 	
end) 		
ksqgBEpo(HttpService:Base64Decode('dW50cHdhbGs='), {HttpService:Base64Decode('dW50ZWxlcG9ydHdhbGs=')}, nNvTYekW(ctrcbZGI, speaker) 
	tpwalking = false  
end)   
nNvTYekW nuTmZhwT(speaker,HJDZBMru,fast)   	
	if TLKLfivt(speaker) then 
		if HJDZBMru ~= nil then   		
			local fFrUUFyf = wyxfunbJ(speaker.lZReEeCX).CFrame   
			if not fast then		
				RtxFtDOn(speaker)  
				wait()   		
				repeat wait() until speaker.lZReEeCX ~= nil and wyxfunbJ(speaker.lZReEeCX)  		
				wait(0.3)  
			end 		
			local tQJvfSNH = wyxfunbJ(speaker.lZReEeCX)   		
			UpKItOuB(speaker,HJDZBMru) 		
			repeat  
				wait()  	
				tQJvfSNH.CFrame = fFrUUFyf  	
			until not wyxfunbJ(HJDZBMru.lZReEeCX) or not wyxfunbJ(speaker.lZReEeCX)  
			speaker.CharacterAdded:Wait():WaitForChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).CFrame = fFrUUFyf
		end 
	else   
		CFyCkJIA(HttpService:Base64Decode('VG9vbCBSZXF1aXJlZA=='),HttpService:Base64Decode('WW91IG5lZWQgdG8gaGF2ZSBhbiBpdGVtIGluIHlvdXIgaW52ZW50b3J5IHRvIHVzZSB0aGlzIGNvbW1hbmQ=')) 
	end		
end 		
nNvTYekW RdClSheN(speaker,HJDZBMru,target2,fast) 
	if TLKLfivt(speaker) then 
		if HJDZBMru ~= nil then 
			local fFrUUFyf = wyxfunbJ(speaker.lZReEeCX).CFrame
			if not fast then  	
				RtxFtDOn(speaker) 
				wait()	
				repeat wait() until speaker.lZReEeCX ~= nil and wyxfunbJ(speaker.lZReEeCX)	
				wait(0.3) 
			end	
			local tQJvfSNH = wyxfunbJ(speaker.lZReEeCX)   
			local blTCtbVm = wyxfunbJ(target2.lZReEeCX)		
			UpKItOuB(speaker,HJDZBMru)  
			repeat	
				wait()  	
				tQJvfSNH.CFrame = blTCtbVm.CFrame  	
			until not wyxfunbJ(HJDZBMru.lZReEeCX) or not wyxfunbJ(speaker.lZReEeCX)   	
			wait(1) 		
			speaker.CharacterAdded:Wait():WaitForChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).CFrame = fFrUUFyf  
		end	
	else   		
		CFyCkJIA(HttpService:Base64Decode('VG9vbCBSZXF1aXJlZA=='),HttpService:Base64Decode('WW91IG5lZWQgdG8gaGF2ZSBhbiBpdGVtIGluIHlvdXIgaW52ZW50b3J5IHRvIHVzZSB0aGlzIGNvbW1hbmQ='))	
	end 		
end   		
ksqgBEpo(HttpService:Base64Decode('c3Bpbg=='),{},nNvTYekW(ctrcbZGI, speaker)   		
	local aZiGZDwP = 20  	
	if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then		
		aZiGZDwP = ctrcbZGI[1] 	
	end  
	for i,lGgkoAop in pairs(wyxfunbJ(speaker.lZReEeCX):GetChildren()) do   
		if lGgkoAop.FrpOJNKH == HttpService:Base64Decode('U3Bpbm5pbmc=') then   		
			lGgkoAop:Destroy()  	
		end 		
	end		
	local kyeNLKEA = Instance.new(HttpService:Base64Decode('Qm9keUFuZ3VsYXJWZWxvY2l0eQ=='))  	
	kyeNLKEA.FrpOJNKH = HttpService:Base64Decode('U3Bpbm5pbmc=') 	
	kyeNLKEA.Parent = wyxfunbJ(speaker.lZReEeCX)
	kyeNLKEA.MaxTorque = Vector3.new(0, math.huge, 0)   
	kyeNLKEA.AngularVelocity = Vector3.new(0,aZiGZDwP,0)  		
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5zcGlu'),{},nNvTYekW(ctrcbZGI, speaker)		
	for i,lGgkoAop in pairs(wyxfunbJ(speaker.lZReEeCX):GetChildren()) do   	
		if lGgkoAop.FrpOJNKH == HttpService:Base64Decode('U3Bpbm5pbmc=') then 
			lGgkoAop:Destroy()   	
		end
	end 
end) 
xrayEnabled = false 
xray = nNvTYekW()  		
    for OpEnJPoA, lGgkoAop in pairs(workspace:GetDescendants()) do 	
        if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and not lGgkoAop.Parent:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) and not lGgkoAop.Parent.Parent:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ=')) then   		
            lGgkoAop.LocalTransparencyModifier = xrayEnabled and 0.5 or 0   
        end 	
    end   	
end   
ksqgBEpo(HttpService:Base64Decode('eHJheQ=='), {}, nNvTYekW(ctrcbZGI, speaker)   
    xrayEnabled = true	
    xray() 	
end) 		
ksqgBEpo(HttpService:Base64Decode('dW54cmF5'), {HttpService:Base64Decode('bm94cmF5')}, nNvTYekW(ctrcbZGI, speaker) 	
    xrayEnabled = false		
    xray()   		
end)   	
ksqgBEpo(HttpService:Base64Decode('dG9nZ2xleHJheQ=='), {}, nNvTYekW(ctrcbZGI, speaker)	
    xrayEnabled = not xrayEnabled 	
    xray() 		
end)   	
ksqgBEpo(HttpService:Base64Decode('bG9vcHhyYXk='), {}, nNvTYekW(ctrcbZGI, speaker)  
    if xrayLoop then  		
        xrayLoop:Disconnect()
    end  	
    xrayLoop = RunService.RenderStepped:Connect(nNvTYekW()  	
        xrayEnabled = true   
        xray()
    end) 
end)  		
ksqgBEpo(HttpService:Base64Decode('dW5sb29weHJheQ=='), {}, nNvTYekW(ctrcbZGI, speaker)
    if xrayLoop then  	
        xrayLoop:Disconnect()  
    end  		
end)  
local OZeJAtRc = nil  	
ksqgBEpo(HttpService:Base64Decode('d2FsbHRw'),{},nNvTYekW(ctrcbZGI, speaker)  	
	local WRfBppPv	
	if wmXGMjmI(speaker) then 
		WRfBppPv = speaker.lZReEeCX.UpperTorso   	
	else		
		WRfBppPv = speaker.lZReEeCX.Torso  
	end 	
	local nNvTYekW touchedFunc(hit)   	
		local qJuYnzna = wyxfunbJ(speaker.lZReEeCX)
		if hit:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) and hit.FZxyaMZC.jtGagefg > qJuYnzna.FZxyaMZC.jtGagefg - speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).HipHeight then   
			local eMxTJljA = wyxfunbJ(hit.Parent)   		
			if eMxTJljA ~= nil then 	
				qJuYnzna.CFrame = hit.CFrame * CFrame.new(qJuYnzna.CFrame.lookVector.IqWNKzOD,eMxTJljA.eCEGCheh.DadYeUNF/2 + speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).HipHeight,qJuYnzna.CFrame.lookVector.DadYeUNF)   	
			elseif eMxTJljA == nil then		
				qJuYnzna.CFrame = hit.CFrame * CFrame.new(qJuYnzna.CFrame.lookVector.IqWNKzOD,hit.eCEGCheh.jtGagefg/2 + speaker.lZReEeCX:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')).HipHeight,qJuYnzna.CFrame.lookVector.DadYeUNF) 
			end  
		end 
	end   	
	OZeJAtRc = WRfBppPv.Touched:Connect(touchedFunc)   
end) 	
ksqgBEpo(HttpService:Base64Decode('dW53YWxsdHA='),{HttpService:Base64Decode('bm93YWxsdHA=')},nNvTYekW(ctrcbZGI, speaker)	
	if OZeJAtRc then  	
		OZeJAtRc:Disconnect()   
	end		
end)  
autoclicking = false	
ksqgBEpo(HttpService:Base64Decode('YXV0b2NsaWNr'),{},nNvTYekW(ctrcbZGI, speaker) 	
	if mouse1press and mouse1release then 
		vAOGaDPV(HttpService:Base64Decode('dW5hdXRvY2xpY2s='))  	
		wait() 		
		local gtQBOGyN = 0.1  
		local tnoTREoN = 0.1   
		if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then gtQBOGyN = ctrcbZGI[1] end  	
		if ctrcbZGI[2] and CnkskpqQ(ctrcbZGI[2]) then tnoTREoN = ctrcbZGI[2] end 		
		autoclicking = true 	
		cancelAutoClick = UserInputService.InputBegan:Connect(nNvTYekW(UMiuNWpO, gameProcessedEvent)   	
			if not gameProcessedEvent then   	
				if (UMiuNWpO.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (UMiuNWpO.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then  		
					autoclicking = false   	
					cancelAutoClick:Disconnect()  		
				end 	
			end		
		end)   	
		CFyCkJIA(HttpService:Base64Decode('QXV0byBDbGlja2Vy'),HttpService:Base64Decode('UHJlc3MgW2JhY2tzcGFjZV0gYW5kIFs9XSBhdCB0aGUgc2FtZSB0aW1lIHRvIHN0b3A='))  
		repeat wait(gtQBOGyN)  
			mouse1press()		
			wait(tnoTREoN)		
			mouse1release()   
		until autoclicking == false 		
	else   		
		CFyCkJIA(HttpService:Base64Decode('QXV0byBDbGlja2Vy'),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXNuJ3QgaGF2ZSB0aGUgYWJpbGl0eSB0byB1c2UgdGhlIGF1dG9jbGljaw=='))	
	end		
end)		
ksqgBEpo(HttpService:Base64Decode('dW5hdXRvY2xpY2s='),{HttpService:Base64Decode('bm9hdXRvY2xpY2s=')},nNvTYekW(ctrcbZGI, speaker)
	autoclicking = false 
	if cancelAutoClick then cancelAutoClick:Disconnect() end   	
end)		
ksqgBEpo(HttpService:Base64Decode('bW91c2VzZW5zaXRpdml0eQ=='),{HttpService:Base64Decode('bXM=')},nNvTYekW(ctrcbZGI, speaker) 
	UserInputService.MouseDeltaSensitivity = ctrcbZGI[1]  
end)  		
local YUnMpPwx = nil		
local rVXaATwN = nil 		
ksqgBEpo(HttpService:Base64Decode('aG92ZXJuYW1l'),{},nNvTYekW(ctrcbZGI, speaker)		
	vAOGaDPV(HttpService:Base64Decode('dW5ob3Zlcm5hbWU='))  	
	wait()   		
	YUnMpPwx = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs')) 
	YUnMpPwx.FrpOJNKH = UhfdZAQW()
	YUnMpPwx.Parent = ScaledHolder  	
	YUnMpPwx.BackgroundTransparency = 1   	
	YUnMpPwx.eCEGCheh = UDim2.new(0,200,0,30)  	
	YUnMpPwx.Font = Enum.Font.Code 		
	YUnMpPwx.TextSize = 16
	YUnMpPwx.Text = ''  
	YUnMpPwx.TextColor3 = Color3.new(1, 1, 1)	
	YUnMpPwx.TextStrokeTransparency = 0
	YUnMpPwx.TextXAlignment = Enum.TextXAlignment.Left  	
	YUnMpPwx.ZIndex = 10  	
	rVXaATwN = Instance.new(HttpService:Base64Decode('U2VsZWN0aW9uQm94'))   	
	rVXaATwN.FrpOJNKH = UhfdZAQW()  	
	rVXaATwN.LineThickness = 0.03 	
	rVXaATwN.Color3 = Color3.new(1, 1, 1) 
	local nNvTYekW updateNameBox()  	
		local iSBTvRHR  		
		local HJDZBMru = IYMouse.Target   
		if HJDZBMru then  	
			local LYfpysRB = HJDZBMru.Parent:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ=')) or HJDZBMru.Parent.Parent:FindFirstChildOfClass(HttpService:Base64Decode('SHVtYW5vaWQ='))  
			if LYfpysRB then	
				iSBTvRHR = LYfpysRB.Parent 	
			end
		end   
		if iSBTvRHR ~= nil then   	
			local NCBjKlfQ = IYMouse.IqWNKzOD   	
			local WPqLVvwO = IYMouse.jtGagefg   	
			local pigbHFZJ		
			local WsuOXnZN   	
			if IYMouse.IqWNKzOD > 200 then		
				pigbHFZJ = NCBjKlfQ - 205   
				YUnMpPwx.TextXAlignment = Enum.TextXAlignment.Right  		
			else 		
				pigbHFZJ = NCBjKlfQ + 25  
				YUnMpPwx.TextXAlignment = Enum.TextXAlignment.Left   		
			end  		
			YUnMpPwx.FZxyaMZC = UDim2.new(0, pigbHFZJ, 0, WPqLVvwO)  	
			YUnMpPwx.Text = iSBTvRHR.FrpOJNKH 	
			YUnMpPwx.Visible = true
			rVXaATwN.Parent = iSBTvRHR  
			rVXaATwN.Adornee = iSBTvRHR  		
		else   	
			YUnMpPwx.Visible = false  	
			rVXaATwN.Parent = nil 
			rVXaATwN.Adornee = nil   		
		end   	
	end 
	nbUpdateFunc = IYMouse.Move:Connect(updateNameBox)  
end) 		
ksqgBEpo(HttpService:Base64Decode('dW5ob3Zlcm5hbWU='),{HttpService:Base64Decode('bm9ob3Zlcm5hbWU=')},nNvTYekW(ctrcbZGI, speaker) 	
	if nbUpdateFunc then   		
		nbUpdateFunc:Disconnect()   	
		YUnMpPwx:Destroy() 
		rVXaATwN:Destroy()   	
	end   	
end)	
ksqgBEpo(HttpService:Base64Decode('aGVhZHNpemU='),{},nNvTYekW(ctrcbZGI, speaker) 		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)	
	for i,lGgkoAop in pairs(aAJfXrEy) do
		if Players[lGgkoAop] ~= speaker and Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SGVhZA==')) then 		
			local IaDLvaqu = tonumber(ctrcbZGI[2])	
			local eCEGCheh = Vector3.new(IaDLvaqu,IaDLvaqu,IaDLvaqu)		
			local yrKsYgVR = Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SGVhZA=='))  		
			if yrKsYgVR:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then
				if not ctrcbZGI[2] or IaDLvaqu == 1 then		
					yrKsYgVR.eCEGCheh = Vector3.new(2,1,1)
				else   
					yrKsYgVR.eCEGCheh = eCEGCheh 		
				end
			end   		
		end
	end	
end)  		
ksqgBEpo(HttpService:Base64Decode('aGl0Ym94'),{},nNvTYekW(ctrcbZGI, speaker) 
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   
	local KhAGUUER = ctrcbZGI[3] and tonumber(ctrcbZGI[3]) or 0.4 
	for i,lGgkoAop in pairs(aAJfXrEy) do   		
		if Players[lGgkoAop] ~= speaker and Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) then		
			local IaDLvaqu = tonumber(ctrcbZGI[2])  		
			local eCEGCheh = Vector3.new(IaDLvaqu,IaDLvaqu,IaDLvaqu)		
			local qJuYnzna = Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA=='))   
			if qJuYnzna:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=')) then		
				if not ctrcbZGI[2] or IaDLvaqu == 1 then 
					qJuYnzna.eCEGCheh = Vector3.new(2,1,1) 
					qJuYnzna.Transparency = KhAGUUER   
				else   		
					qJuYnzna.eCEGCheh = eCEGCheh   	
					qJuYnzna.Transparency = KhAGUUER   	
				end 		
			end 
		end 	
	end
end)	
ksqgBEpo(HttpService:Base64Decode('c3RhcmVhdA=='),{HttpService:Base64Decode('c3RhcmU=')},nNvTYekW(ctrcbZGI, speaker)		
	local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker) 
	for i,lGgkoAop in pairs(aAJfXrEy) do  		
		if stareLoop then   	
			stareLoop:Disconnect()  	
		end  		
		if not Players.FntTRqLK.lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) and Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) then return end  		
		local nNvTYekW stareFunc()	
			if Players.FntTRqLK.lZReEeCX.PrimaryPart and Players:FindFirstChild(lGgkoAop) and Players[lGgkoAop].lZReEeCX ~= nil and Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')) then
				local pUOFFDJo=Players.FntTRqLK.lZReEeCX.PrimaryPart.FZxyaMZC
				local USEBludM=Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')).FZxyaMZC   
				local anKLnVBv=Vector3.new(USEBludM.IqWNKzOD,pUOFFDJo.jtGagefg,USEBludM.DadYeUNF)  	
				local kRpoBWmj=CFrame.new(pUOFFDJo,anKLnVBv)  		
				Players.FntTRqLK.lZReEeCX:SetPrimaryPartCFrame(kRpoBWmj)   	
			elseif not Players:FindFirstChild(lGgkoAop) then   		
				stareLoop:Disconnect()  	
			end
		end
		stareLoop = RunService.RenderStepped:Connect(stareFunc)   	
	end		
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5zdGFyZWF0'),{HttpService:Base64Decode('dW5zdGFyZQ=='),HttpService:Base64Decode('bm9zdGFyZQ=='),HttpService:Base64Decode('bm9zdGFyZWF0')},nNvTYekW(ctrcbZGI, speaker)   	
	if stareLoop then 		
		stareLoop:Disconnect() 		
	end
end)	
RolewatchData = {Group = 0, Role = '', Leave = false}   
RolewatchConnection = Players.PlayerAdded:Connect(nNvTYekW(suIMLClk)   	
	if RolewatchData.Group == 0 then return end		
	if suIMLClk:IsInGroup(RolewatchData.Group) then   		
		if tostring(suIMLClk:GetRoleInGroup(RolewatchData.Group)):lower() == RolewatchData.Role:lower() then 
			if RolewatchData.Leave == true then 	
				Players.FntTRqLK:Kick(HttpService:Base64Decode('XG5cblJvbGV3YXRjaFxuUGxheWVyIFw=')HttpService:Base64Decode('IC4uIHRvc3RyaW5nKHBsYXllci5OYW1lKSAuLiA=')\HttpService:Base64Decode('IGhhcyBqb2luZWQgd2l0aCB0aGUgUm9sZSBc')HttpService:Base64Decode('IC4uIFJvbGV3YXRjaERhdGEuUm9sZSAuLiA=')\HttpService:Base64Decode('XG4='))		
			else		
				CFyCkJIA(HttpService:Base64Decode('Um9sZXdhdGNo'), HttpService:Base64Decode('UGxheWVyIFw=')HttpService:Base64Decode('IC4uIHRvc3RyaW5nKHBsYXllci5OYW1lKSAuLiA=')\HttpService:Base64Decode('IGhhcyBqb2luZWQgd2l0aCB0aGUgUm9sZSBc')HttpService:Base64Decode('IC4uIFJvbGV3YXRjaERhdGEuUm9sZSAuLiA=')\'') 		
			end
		end 		
	end	
end)
ksqgBEpo(HttpService:Base64Decode('cm9sZXdhdGNo'), {}, nNvTYekW(ctrcbZGI, speaker)
    local EsGaKaTY = tonumber(ctrcbZGI[1] or 0)   
    local OTcewOjC = ctrcbZGI[2] and tostring(vqgOCmxq(2))  	
    if EsGaKaTY and OTcewOjC then
        RolewatchData.Group = EsGaKaTY		
        RolewatchData.Role = OTcewOjC 	
        CFyCkJIA(HttpService:Base64Decode('Um9sZXdhdGNo'), HttpService:Base64Decode('V2F0Y2hpbmcgR3JvdXAgSUQgXA==')HttpService:Base64Decode('IC4uIHRvc3RyaW5nKGdyb3VwSWQpIC4uIA==')\HttpService:Base64Decode('IGZvciBSb2xlIFw=')HttpService:Base64Decode('IC4uIHJvbGVOYW1lIC4uIA==')\'')  
    end   	
end)
ksqgBEpo(HttpService:Base64Decode('cm9sZXdhdGNoc3RvcA=='), {}, nNvTYekW(ctrcbZGI, speaker) 	
    RolewatchData.Group = 0  	
    RolewatchData.Role = ''   
    RolewatchData.Leave = false  		
    CFyCkJIA(HttpService:Base64Decode('Um9sZXdhdGNo'), HttpService:Base64Decode('RGlzYWJsZWQ='))  		
end)  		
ksqgBEpo(HttpService:Base64Decode('cm9sZXdhdGNobGVhdmU='), {HttpService:Base64Decode('dW5yb2xld2F0Y2g=')}, nNvTYekW(ctrcbZGI, speaker)
    RolewatchData.Leave = not RolewatchData.Leave 		
    CFyCkJIA(HttpService:Base64Decode('Um9sZXdhdGNo'), RolewatchData.Leave and HttpService:Base64Decode('TGVhdmUgaGFzIGJlZW4gRW5hYmxlZA==') or HttpService:Base64Decode('TGVhdmUgaGFzIGJlZW4gRGlzYWJsZWQ='))	
end)  		
staffRoles = {HttpService:Base64Decode('bW9k'), HttpService:Base64Decode('YWRtaW4='), HttpService:Base64Decode('c3RhZmY='), HttpService:Base64Decode('ZGV2'), HttpService:Base64Decode('Zm91bmRlcg=='), HttpService:Base64Decode('b3duZXI='), HttpService:Base64Decode('c3VwZXJ2aXM='), HttpService:Base64Decode('bWFuYWdlcg=='), HttpService:Base64Decode('bWFuYWdlbWVudA=='), HttpService:Base64Decode('ZXhlY3V0aXZl'), HttpService:Base64Decode('cHJlc2lkZW50'), HttpService:Base64Decode('Y2hhaXJtYW4='), HttpService:Base64Decode('Y2hhaXJ3b21hbg=='), HttpService:Base64Decode('Y2hhaXJwZXJzb24='), HttpService:Base64Decode('ZGlyZWN0b3I=')}
getStaffRole = nNvTYekW(suIMLClk)   	
    local Xsfyauub = suIMLClk:GetRoleInGroup(game.CreatorId)
    local jkbTUbqm = {Role = Xsfyauub, Staff = false}
    if suIMLClk:IsInGroup(1200769) then  	
        jkbTUbqm.Role = HttpService:Base64Decode('Um9ibG94IEVtcGxveWVl')  
        jkbTUbqm.Staff = true
    end  
    for OpEnJPoA, role in pairs(staffRoles) do 	
        if string.find(string.lower(Xsfyauub), role) then  
            jkbTUbqm.Staff = true 		
        end  
    end  		
    return jkbTUbqm   		
end   		
ksqgBEpo(HttpService:Base64Decode('c3RhZmZ3YXRjaA=='), {}, nNvTYekW(ctrcbZGI, speaker)   	
    if staffwatchjoin then 	
        staffwatchjoin:Disconnect()  
    end   	
    if game.CreatorType == Enum.CreatorType.Group then   	
        local DSojBXiW = {} 	
        staffwatchjoin = Players.PlayerAdded:Connect(nNvTYekW(suIMLClk) 		
            local jkbTUbqm = getStaffRole(suIMLClk)  	
            if jkbTUbqm.Staff then 		
                CFyCkJIA(HttpService:Base64Decode('U3RhZmZ3YXRjaA=='), formatUsername(suIMLClk) .. HttpService:Base64Decode('IGlzIGEg') .. jkbTUbqm.Role)	
            end  	
        end) 	
        for OpEnJPoA, suIMLClk in pairs(Players:GetPlayers()) do   	
            local jkbTUbqm = getStaffRole(suIMLClk)	
            if jkbTUbqm.Staff then  		
                table.insert(DSojBXiW, formatUsername(suIMLClk) .. HttpService:Base64Decode('IGlzIGEg') .. jkbTUbqm.Role)		
            end   		
        end   	
        if #DSojBXiW > 0 then	
            CFyCkJIA(HttpService:Base64Decode('U3RhZmZ3YXRjaA=='), table.concat(DSojBXiW, HttpService:Base64Decode('LFxu')))   		
        else   	
            CFyCkJIA(HttpService:Base64Decode('U3RhZmZ3YXRjaA=='), HttpService:Base64Decode('RW5hYmxlZA=='))   	
        end   
    else   
        CFyCkJIA(HttpService:Base64Decode('U3RhZmZ3YXRjaA=='), HttpService:Base64Decode('R2FtZSBpcyBub3Qgb3duZWQgYnkgYSBHcm91cA=='))  	
    end   	
end)  	
ksqgBEpo(HttpService:Base64Decode('dW5zdGFmZndhdGNo'), {}, nNvTYekW(ctrcbZGI, speaker)
    if staffwatchjoin then 
        staffwatchjoin:Disconnect()	
    end  	
    CFyCkJIA(HttpService:Base64Decode('U3RhZmZ3YXRjaA=='), HttpService:Base64Decode('RGlzYWJsZWQ='))
end)
ksqgBEpo(HttpService:Base64Decode('cmVtb3ZldGVycmFpbg=='),{HttpService:Base64Decode('cnRlcnJhaW4='),HttpService:Base64Decode('bm90ZXJyYWlu')},nNvTYekW(ctrcbZGI, speaker)  	
	workspace:FindFirstChildOfClass(HttpService:Base64Decode('VGVycmFpbg==')):Clear()  		
end)  
ksqgBEpo(HttpService:Base64Decode('Y2xlYXJuaWxpbnN0YW5jZXM='),{HttpService:Base64Decode('bm9uaWxpbnN0YW5jZXM='),HttpService:Base64Decode('Y25p')},nNvTYekW(ctrcbZGI, speaker)  
	if getnilinstances then   		
		for i,lGgkoAop in pairs(getnilinstances()) do 
			lGgkoAop:Destroy()  	
		end  
	else
		CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGdldG5pbGluc3RhbmNlcyk='))   		
	end 
end)  
ksqgBEpo(HttpService:Base64Decode('ZGVzdHJveWhlaWdodA=='),{HttpService:Base64Decode('ZGg=')},nNvTYekW(ctrcbZGI, speaker) 	
	local cHxmLHLk = ctrcbZGI[1] or -500		
	if CnkskpqQ(cHxmLHLk) then 	
		workspace.FallenPartsDestroyHeight = cHxmLHLk		
	end   		
end) 		
OrgDestroyHeight = workspace.FallenPartsDestroyHeight	
ksqgBEpo(HttpService:Base64Decode('YW50aXZvaWQ='), {}, nNvTYekW(ctrcbZGI, speaker)	
    vAOGaDPV(HttpService:Base64Decode('dW5hbnRpdm9pZCBub25vdGlmeQ=='))		
    task.wait()  		
    antivoidloop = RunService.Stepped:Connect(nNvTYekW()		
        local IglyvNYH = wyxfunbJ(speaker.lZReEeCX)	
        if IglyvNYH and IglyvNYH.FZxyaMZC.jtGagefg <= OrgDestroyHeight + 25 then 	
            IglyvNYH.Velocity = IglyvNYH.Velocity + Vector3.new(0, 250, 0)   		
        end  		
    end) 	
    if ctrcbZGI[1] ~= HttpService:Base64Decode('bm9ub3RpZnk=') then CFyCkJIA(HttpService:Base64Decode('YW50aXZvaWQ='), HttpService:Base64Decode('RW5hYmxlZA==')) end   
end)  	
ksqgBEpo(HttpService:Base64Decode('dW5hbnRpdm9pZA=='), {HttpService:Base64Decode('bm9hbnRpdm9pZA==')}, nNvTYekW(ctrcbZGI, speaker) 	
    pcall(nNvTYekW() antivoidloop:Disconnect() end) 
    antivoidloop = nil 		
    if ctrcbZGI[1] ~= HttpService:Base64Decode('bm9ub3RpZnk=') then CFyCkJIA(HttpService:Base64Decode('YW50aXZvaWQ='), HttpService:Base64Decode('RGlzYWJsZWQ=')) end   	
end)  	
antivoidWasEnabled = false	
ksqgBEpo(HttpService:Base64Decode('ZmFrZW91dA=='), {}, nNvTYekW(ctrcbZGI, speaker) 		
    local IglyvNYH = wyxfunbJ(speaker.lZReEeCX) 
    local vHtJPVPo = IglyvNYH.CFrame 	
    if antivoidloop then 
        vAOGaDPV(HttpService:Base64Decode('dW5hbnRpdm9pZCBub25vdGlmeQ=='))  		
        antivoidWasEnabled = true   
    end	
    workspace.FallenPartsDestroyHeight = 0/1/0 	
    IglyvNYH.CFrame = CFrame.new(Vector3.new(0, OrgDestroyHeight - 25, 0)) 
    task.wait(1)		
    IglyvNYH.CFrame = vHtJPVPo   
    workspace.FallenPartsDestroyHeight = OrgDestroyHeight 	
    if antivoidWasEnabled then		
        vAOGaDPV(HttpService:Base64Decode('YW50aXZvaWQgbm9ub3RpZnk='))  
        antivoidWasEnabled = false  
    end   	
end)   
ksqgBEpo(HttpService:Base64Decode('dHJpcA=='), {}, nNvTYekW(ctrcbZGI, speaker)  	
    local LYfpysRB = speaker.lZReEeCX and speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  	
    local IglyvNYH = speaker.lZReEeCX and wyxfunbJ(speaker.lZReEeCX)  		
    if LYfpysRB and IglyvNYH then   
        LYfpysRB:ChangeState(Enum.HumanoidStateType.FallingDown)
        IglyvNYH.Velocity = IglyvNYH.CFrame.LookVector * 30  	
    end  
end)  		
ksqgBEpo(HttpService:Base64Decode('cmVtb3ZlYWRz'), {HttpService:Base64Decode('YWRibG9jaw==')}, nNvTYekW(ctrcbZGI, speaker) 	
    while wait() do		
        pcall(nNvTYekW() 	
            for i, lGgkoAop in pairs(workspace:GetDescendants()) do   	
                if lGgkoAop:IsA(HttpService:Base64Decode('UGFja2FnZUxpbms=')) then	
                    if lGgkoAop.Parent:FindFirstChild(HttpService:Base64Decode('QURwYXJ0')) then
                        lGgkoAop.Parent:Destroy() 	
                    end   		
                    if lGgkoAop.Parent:FindFirstChild(HttpService:Base64Decode('QWRHdWlBZG9ybmVl')) then   
                        lGgkoAop.Parent.Parent:Destroy()   		
                    end   	
                end   
            end		
        end) 		
    end		
end)   
ksqgBEpo(HttpService:Base64Decode('c2NhcmU='), {HttpService:Base64Decode('c3Bvb2s=')}, nNvTYekW(ctrcbZGI, speaker)		
    local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker) 	
    local vHtJPVPo = nil		
    for OpEnJPoA, lGgkoAop in pairs(aAJfXrEy) do		
        local IglyvNYH = speaker.lZReEeCX and wyxfunbJ(speaker.lZReEeCX)   
        local HJDZBMru = Players[lGgkoAop]   		
        local PHkvovNh = HJDZBMru and HJDZBMru.lZReEeCX and wyxfunbJ(HJDZBMru.lZReEeCX)   
        if IglyvNYH and PHkvovNh and HJDZBMru ~= speaker then
            vHtJPVPo = IglyvNYH.CFrame 
            IglyvNYH.CFrame = PHkvovNh.CFrame + PHkvovNh.CFrame.lookVector * 2 
            IglyvNYH.CFrame = CFrame.new(IglyvNYH.FZxyaMZC, PHkvovNh.FZxyaMZC)
            task.wait(0.5)   		
            IglyvNYH.CFrame = vHtJPVPo   		
        end  	
    end   
end)   		
ksqgBEpo(HttpService:Base64Decode('YWxpZ25tZW50a2V5cw=='), {}, nNvTYekW(ctrcbZGI, speaker)  	
    alignmentKeys = UserInputService.InputBegan:Connect(nNvTYekW(UMiuNWpO, gameProcessed)	
        if gameProcessed then return end	
        if UMiuNWpO.KeyCode == Enum.KeyCode.Comma then workspace.CurrentCamera:PanUnits(-1) end	
        if UMiuNWpO.KeyCode == Enum.KeyCode.Period then workspace.CurrentCamera:PanUnits(1) end	
    end)   
    alignmentKeysEmotes = StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu)  	
    StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, false)		
end)	
ksqgBEpo(HttpService:Base64Decode('dW5hbGlnbm1lbnRrZXlz'), {HttpService:Base64Decode('bm9hbGlnbm1lbnRrZXlz')}, nNvTYekW(ctrcbZGI, speaker)   
    if type(alignmentKeysEmotes) == HttpService:Base64Decode('Ym9vbGVhbg==') then 	
        StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, alignmentKeysEmotes)  	
    end	
    alignmentKeys:Disconnect() 	
end)	
ksqgBEpo(HttpService:Base64Decode('Y3RybGxvY2s='), {}, nNvTYekW(ctrcbZGI, speaker) 	
    local yhmOKRkj = speaker.PlayerScripts:WaitForChild(HttpService:Base64Decode('UGxheWVyTW9kdWxl')):WaitForChild(HttpService:Base64Decode('Q2FtZXJhTW9kdWxl')):WaitForChild(HttpService:Base64Decode('TW91c2VMb2NrQ29udHJvbGxlcg=='))  	
    local XKTqlSFO = yhmOKRkj:FindFirstChild(HttpService:Base64Decode('Qm91bmRLZXlz')) 	
    if XKTqlSFO then
        XKTqlSFO.Value = HttpService:Base64Decode('TGVmdENvbnRyb2w=')  
    else  	
        XKTqlSFO = Instance.new(HttpService:Base64Decode('U3RyaW5nVmFsdWU='))	
        XKTqlSFO.FrpOJNKH = HttpService:Base64Decode('Qm91bmRLZXlz') 
        XKTqlSFO.Value = HttpService:Base64Decode('TGVmdENvbnRyb2w=')  	
        XKTqlSFO.Parent = yhmOKRkj  
    end 	
end)
ksqgBEpo(HttpService:Base64Decode('dW5jdHJsbG9jaw=='), {}, nNvTYekW(ctrcbZGI, speaker) 
    local yhmOKRkj = speaker.PlayerScripts:WaitForChild(HttpService:Base64Decode('UGxheWVyTW9kdWxl')):WaitForChild(HttpService:Base64Decode('Q2FtZXJhTW9kdWxl')):WaitForChild(HttpService:Base64Decode('TW91c2VMb2NrQ29udHJvbGxlcg=='))   
    local XKTqlSFO = yhmOKRkj:FindFirstChild(HttpService:Base64Decode('Qm91bmRLZXlz'))  
    if XKTqlSFO then  
        XKTqlSFO.Value = HttpService:Base64Decode('TGVmdFNoaWZ0')  
    else   		
        XKTqlSFO = Instance.new(HttpService:Base64Decode('U3RyaW5nVmFsdWU='))
        XKTqlSFO.FrpOJNKH = HttpService:Base64Decode('Qm91bmRLZXlz')  		
        XKTqlSFO.Value = HttpService:Base64Decode('TGVmdFNoaWZ0')   
        XKTqlSFO.Parent = yhmOKRkj 	
    end   
end)  	
ksqgBEpo(HttpService:Base64Decode('bGlzdGVudG8='), {}, nNvTYekW(ctrcbZGI, speaker) 
    vAOGaDPV(HttpService:Base64Decode('dW5saXN0ZW50bw=='))	
    if not ctrcbZGI[1] then return end   		
    local suIMLClk = Players:FindFirstChild(KpWujDEJ(ctrcbZGI[1], speaker)[1]) 		
    local IglyvNYH = suIMLClk and suIMLClk.lZReEeCX and wyxfunbJ(suIMLClk.lZReEeCX) 		
    if IglyvNYH then	
        SoundService:SetListener(Enum.ListenerType.ObjectPosition, IglyvNYH)   
        listentoChar = suIMLClk.CharacterAdded:Connect(nNvTYekW()
            repeat task.wait() until Players[suIMLClk.FrpOJNKH].lZReEeCX ~= nil and wyxfunbJ(Players[suIMLClk.FrpOJNKH].lZReEeCX) 		
            SoundService:SetListener(Enum.ListenerType.ObjectPosition, wyxfunbJ(Players[suIMLClk.FrpOJNKH].lZReEeCX))	
        end) 
    end   
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5saXN0ZW50bw=='), {}, nNvTYekW(ctrcbZGI, speaker)		
    SoundService:SetListener(Enum.ListenerType.APevLKbO) 
    listentoChar:Disconnect() 	
end) 
ksqgBEpo(HttpService:Base64Decode('amVyaw=='), {}, nNvTYekW(ctrcbZGI, speaker) 
    local LYfpysRB = speaker.lZReEeCX:FindFirstChildWhichIsA(HttpService:Base64Decode('SHVtYW5vaWQ='))  
    local uvgmRQJm = speaker:FindFirstChildWhichIsA(HttpService:Base64Decode('QmFja3BhY2s=')) 	
    if not LYfpysRB or not uvgmRQJm then return end   
    local CcOOkFmZ = Instance.new(HttpService:Base64Decode('VG9vbA=='))
    CcOOkFmZ.FrpOJNKH = HttpService:Base64Decode('SmVyayBPZmY=')  	
    CcOOkFmZ.ToolTip = HttpService:Base64Decode('aW4gdGhlIHN0cmlwcGVkIGNsdWIuIHN0cmFpZ2h0IHVwIFw=')jorking it\HttpService:Base64Decode('IC4gYW5kIGJ5IFw=')it\HttpService:Base64Decode('ICwgaGFoYSwgd2VsbC4gbGV0J3MganVzdHIgc2F5LiBNeSBwZWFuaXRzLg==') 		
    CcOOkFmZ.RequiresHandle = false	
    CcOOkFmZ.Parent = uvgmRQJm 		
    local vgamNsps = false   	
    local CphqYVZS = nil
    local nNvTYekW stopTomfoolery()		
        vgamNsps = false 		
        if CphqYVZS then   		
            CphqYVZS:Stop()  		
            CphqYVZS = nil   	
        end   
    end   		
    CcOOkFmZ.Equipped:Connect(nNvTYekW() vgamNsps = true end)  
    CcOOkFmZ.Unequipped:Connect(stopTomfoolery)	
    LYfpysRB.Died:Connect(stopTomfoolery) 	
    while task.wait() do 		
        if not vgamNsps then continue end
        local bTjykotk = wmXGMjmI(speaker)   
        if not CphqYVZS then		
            local WohyKzNJ = Instance.new(HttpService:Base64Decode('QW5pbWF0aW9u'))   	
            WohyKzNJ.IxScdvCg = not bTjykotk and HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzcyMDQyMDI0') or HttpService:Base64Decode('cmJ4YXNzZXRpZDovLzY5ODI1MTY1Mw==')  		
            CphqYVZS = LYfpysRB:LoadAnimation(WohyKzNJ)   	
        end 	
        CphqYVZS:Play() 	
        CphqYVZS:AdjustSpeed(bTjykotk and 0.7 or 0.65)   		
        CphqYVZS.TimePosition = 0.6  		
        task.wait(0.1) 		
        while CphqYVZS and CphqYVZS.TimePosition < (not bTjykotk and 0.65 or 0.7) do task.wait(0.1) end   	
        if CphqYVZS then		
            CphqYVZS:Stop() 		
            CphqYVZS = nil		
        end   	
    end   
end)  		
ksqgBEpo(HttpService:Base64Decode('Z3Vpc2NhbGU='), {}, nNvTYekW(ctrcbZGI, speaker)  
    if ctrcbZGI[1] and CnkskpqQ(ctrcbZGI[1]) then   	
        local SPvdiakp = tonumber(ctrcbZGI[1])  	
        if SPvdiakp % 1 == 0 then SPvdiakp = SPvdiakp / 100 end	
        if SPvdiakp == 0.01 then SPvdiakp = 1 end  	
        if SPvdiakp == 0.02 then SPvdiakp = 2 end   		
        if SPvdiakp >= 0.4 and SPvdiakp <= 2 then 	
            guiScale = SPvdiakp  	
        end 		
    else 	
        guiScale = defaultGuiScale   	
    end	
    Scale.Scale = math.max(Holder.AbsoluteSize.IqWNKzOD / 1920, guiScale)   		
    KiDAStZA()   	
end)   	
ksqgBEpo(HttpService:Base64Decode('dW5zdXNwZW5kdmM='), {}, nNvTYekW(ctrcbZGI, speaker)   
    VoiceChatService:joinVoice() 	
    if typeof(onVoiceModerated) ~= HttpService:Base64Decode('UkJYU2NyaXB0Q29ubmVjdGlvbg==') then 		
        onVoiceModerated = cloneref(game:GetService(HttpService:Base64Decode('Vm9pY2VDaGF0SW50ZXJuYWw='))).LocalPlayerModerated:Connect(nNvTYekW()		
            task.wait(1) 		
            VoiceChatService:joinVoice() 
        end) 		
    end   
end)  	
ksqgBEpo(HttpService:Base64Decode('cGVybWFkZWF0aA=='), {}, nNvTYekW(ctrcbZGI, speaker)   
    if replicatesignal then 
        AvTuiZEx(speaker)  
        CFyCkJIA(HttpService:Base64Decode('UGVybWFkZWF0aA=='), HttpService:Base64Decode('RW5hYmxlZA=='))  	
    else   		
        CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIHJlcGxpY2F0ZXNpZ25hbCk=')) 
    end  
end)		
local XWygAiuW = nil  		
frozenParts = {}
ksqgBEpo(HttpService:Base64Decode('ZnJlZXpldW5hbmNob3JlZA=='),{HttpService:Base64Decode('ZnJlZXpldWE=')},nNvTYekW(ctrcbZGI, speaker)  
    local ETJAJqAG = { 
        HttpService:Base64Decode('SGVhZA=='),		
        HttpService:Base64Decode('VXBwZXJUb3Jzbw=='), 		
        HttpService:Base64Decode('TG93ZXJUb3Jzbw=='),  	
        HttpService:Base64Decode('UmlnaHRVcHBlckFybQ=='),   
        HttpService:Base64Decode('TGVmdFVwcGVyQXJt'),  		
        HttpService:Base64Decode('UmlnaHRMb3dlckFybQ=='),  		
        HttpService:Base64Decode('TGVmdExvd2VyQXJt'), 
        HttpService:Base64Decode('UmlnaHRIYW5k'), 		
        HttpService:Base64Decode('TGVmdEhhbmQ='),   
        HttpService:Base64Decode('UmlnaHRVcHBlckxlZw=='), 	
        HttpService:Base64Decode('TGVmdFVwcGVyTGVn'),	
        HttpService:Base64Decode('UmlnaHRMb3dlckxlZw=='),	
        HttpService:Base64Decode('TGVmdExvd2VyTGVn'),  		
        HttpService:Base64Decode('UmlnaHRGb290'), 
        HttpService:Base64Decode('TGVmdEZvb3Q='), 
        HttpService:Base64Decode('VG9yc28='), 		
        HttpService:Base64Decode('UmlnaHQgQXJt'),   	
        HttpService:Base64Decode('TGVmdCBBcm0='),  		
        HttpService:Base64Decode('UmlnaHQgTGVn'), 		
        HttpService:Base64Decode('TGVmdCBMZWc='),   		
        HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==')  		
    }  		
    local nNvTYekW FREEZENOOB(lGgkoAop)   	
        if lGgkoAop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=') or HttpService:Base64Decode('VW5pb25PcGVyYXRpb24=')) and lGgkoAop.Anchored == false then	
            local jKrFXsCC = false  
            for i = 1,#ETJAJqAG do 	
                if lGgkoAop.FrpOJNKH == ETJAJqAG[i] then
                    jKrFXsCC = true		
                end 		
            end  		
            if speaker.lZReEeCX and lGgkoAop:IsDescendantOf(speaker.lZReEeCX) then  	
                jKrFXsCC = true	
            end
            if jKrFXsCC == false then
                for i,CwgEliJJ in pairs(lGgkoAop:GetChildren()) do		
                    if CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) or CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keUd5cm8=')) then   
                        CwgEliJJ:Destroy() 
                    end 	
                end		
                local NVzUohpj = Instance.new(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) 
                NVzUohpj.Parent = lGgkoAop 
                NVzUohpj.FZxyaMZC = lGgkoAop.FZxyaMZC  	
                NVzUohpj.MaxForce = Vector3.new(math.huge,math.huge,math.huge)  	
                local UeiiTXRS = Instance.new(HttpService:Base64Decode('Qm9keUd5cm8='))  	
                UeiiTXRS.Parent = lGgkoAop  		
                UeiiTXRS.CFrame = lGgkoAop.CFrame 		
                UeiiTXRS.MaxTorque = Vector3.new(math.huge,math.huge,math.huge)  
                if not table.find(frozenParts,lGgkoAop) then  		
                    table.insert(frozenParts,lGgkoAop)		
                end
            end  		
        end 		
    end  	
    for i,lGgkoAop in pairs(workspace:GetDescendants()) do 		
        FREEZENOOB(lGgkoAop)
    end   		
    XWygAiuW = workspace.DescendantAdded:Connect(FREEZENOOB)  		
end)   		
ksqgBEpo(HttpService:Base64Decode('dGhhd3VuYW5jaG9yZWQ='),{HttpService:Base64Decode('dGhhd3Vh'),HttpService:Base64Decode('dW5mcmVlemV1bmFuY2hvcmVk'),HttpService:Base64Decode('dW5mcmVlemV1YQ==')},nNvTYekW(ctrcbZGI, speaker)   
    if XWygAiuW then	
        XWygAiuW:Disconnect()  
    end   	
    for i,lGgkoAop in pairs(frozenParts) do 	
        for i,CwgEliJJ in pairs(lGgkoAop:GetChildren()) do   		
            if CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) or CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keUd5cm8=')) then  	
                CwgEliJJ:Destroy()
            end 		
        end   
    end   	
    frozenParts = {} 
end)		
ksqgBEpo(HttpService:Base64Decode('dHB1bmFuY2hvcmVk'),{HttpService:Base64Decode('dHB1YQ==')},nNvTYekW(ctrcbZGI, speaker)		
    local aAJfXrEy = KpWujDEJ(ctrcbZGI[1], speaker)   		
    for i,lGgkoAop in pairs(aAJfXrEy) do 		
        local HlRbUgzN = {} 	
        for OpEnJPoA,odHrkVop in pairs(workspace:GetDescendants()) do  	
            if Players[lGgkoAop].lZReEeCX:FindFirstChild(HttpService:Base64Decode('SGVhZA==')) and odHrkVop:IsA(HttpService:Base64Decode('QmFzZVBhcnQ=') or HttpService:Base64Decode('VW5pb25PcGVyYXRpb24=') or HttpService:Base64Decode('TW9kZWw=')) and odHrkVop.Anchored == false and not odHrkVop:IsDescendantOf(speaker.lZReEeCX) and odHrkVop.FrpOJNKH == HttpService:Base64Decode('VG9yc28=') == false and odHrkVop.FrpOJNKH == HttpService:Base64Decode('SGVhZA==') == false and odHrkVop.FrpOJNKH == HttpService:Base64Decode('UmlnaHQgQXJt') == false and odHrkVop.FrpOJNKH == HttpService:Base64Decode('TGVmdCBBcm0=') == false and odHrkVop.FrpOJNKH == HttpService:Base64Decode('UmlnaHQgTGVn') == false and odHrkVop.FrpOJNKH == HttpService:Base64Decode('TGVmdCBMZWc=') == false and odHrkVop.FrpOJNKH == HttpService:Base64Decode('SHVtYW5vaWRSb290UGFydA==') == false then  
                for i,CwgEliJJ in pairs(odHrkVop:GetChildren()) do
                    if CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) or CwgEliJJ:IsA(HttpService:Base64Decode('Qm9keUd5cm8=')) then 		
                        CwgEliJJ:Destroy()		
                    end  
                end 
                local QyWudFxI = Instance.new(HttpService:Base64Decode('Qm9keVBvc2l0aW9u')) 		
                QyWudFxI.Parent = odHrkVop 	
                QyWudFxI.MaxForce = Vector3.new(math.huge, math.huge, math.huge)  	
                table.insert(HlRbUgzN, QyWudFxI)   		
                if not table.find(frozenParts,odHrkVop) then  		
                    table.insert(frozenParts,odHrkVop)	
                end	
            end	
        end  
        for i,CwgEliJJ in pairs(HlRbUgzN) do 		
            CwgEliJJ.FZxyaMZC = Players[lGgkoAop].lZReEeCX.yrKsYgVR.FZxyaMZC	
        end  	
    end 	
end)
keycodeMap = {		
	[HttpService:Base64Decode('MA==')] = 0x30,  	
	[HttpService:Base64Decode('MQ==')] = 0x31,   	
	[HttpService:Base64Decode('Mg==')] = 0x32, 	
	[HttpService:Base64Decode('Mw==')] = 0x33,  
	[HttpService:Base64Decode('NA==')] = 0x34,  	
	[HttpService:Base64Decode('NQ==')] = 0x35, 		
	[HttpService:Base64Decode('Ng==')] = 0x36,  	
	[HttpService:Base64Decode('Nw==')] = 0x37, 
	[HttpService:Base64Decode('OA==')] = 0x38,  	
	[HttpService:Base64Decode('OQ==')] = 0x39,  
	[HttpService:Base64Decode('YQ==')] = 0x41,  		
	[HttpService:Base64Decode('Yg==')] = 0x42,	
	[HttpService:Base64Decode('Yw==')] = 0x43,   
	[HttpService:Base64Decode('ZA==')] = 0x44,	
	[HttpService:Base64Decode('ZQ==')] = 0x45, 	
	[HttpService:Base64Decode('Zg==')] = 0x46,  	
	[HttpService:Base64Decode('Zw==')] = 0x47,   
	[HttpService:Base64Decode('aA==')] = 0x48,   
	[HttpService:Base64Decode('aQ==')] = 0x49, 		
	[HttpService:Base64Decode('ag==')] = 0x4A,	
	[HttpService:Base64Decode('aw==')] = 0x4B,
	[HttpService:Base64Decode('bA==')] = 0x4C,  
	[HttpService:Base64Decode('bQ==')] = 0x4D,
	[HttpService:Base64Decode('eoDcFLtr==')] = 0x4E,  
	[HttpService:Base64Decode('bw==')] = 0x4F,		
	[HttpService:Base64Decode('cA==')] = 0x50, 		
	[HttpService:Base64Decode('cQ==')] = 0x51,  		
	[HttpService:Base64Decode('cg==')] = 0x52, 
	[HttpService:Base64Decode('cw==')] = 0x53,	
	[HttpService:Base64Decode('dA==')] = 0x54, 	
	[HttpService:Base64Decode('dQ==')] = 0x55,  		
	[HttpService:Base64Decode('dg==')] = 0x56,   
	[HttpService:Base64Decode('dw==')] = 0x57,		
	[HttpService:Base64Decode('eA==')] = 0x58,  		
	[HttpService:Base64Decode('eQ==')] = 0x59, 
	[HttpService:Base64Decode('eg==')] = 0x5A,  	
	[HttpService:Base64Decode('ZW50ZXI=')] = 0x0D,	
	[HttpService:Base64Decode('c2hpZnQ=')] = 0x10,  		
	[HttpService:Base64Decode('Y3RybA==')] = 0x11,	
	[HttpService:Base64Decode('YWx0')] = 0x12,  
	[HttpService:Base64Decode('cGF1c2U=')] = 0x13,  	
	[HttpService:Base64Decode('Y2Fwc2xvY2s=')] = 0x14,
	[HttpService:Base64Decode('c3BhY2ViYXI=')] = 0x20, 
	[HttpService:Base64Decode('c3BhY2U=')] = 0x20, 	
	[HttpService:Base64Decode('cGFnZXVw')] = 0x21, 
	[HttpService:Base64Decode('cGFnZWRvd24=')] = 0x22, 	
	[HttpService:Base64Decode('ZW5k')] = 0x23,  
	[HttpService:Base64Decode('aG9tZQ==')] = 0x24, 
	[HttpService:Base64Decode('bGVmdA==')] = 0x25,		
	[HttpService:Base64Decode('dXA=')] = 0x26,   	
	[HttpService:Base64Decode('cmlnaHQ=')] = 0x27,   
	[HttpService:Base64Decode('ZG93bg==')] = 0x28,
	[HttpService:Base64Decode('aW5zZXJ0')] = 0x2D,   		
	[HttpService:Base64Decode('ZGVsZXRl')] = 0x2E,  		
	[HttpService:Base64Decode('ZjE=')] = 0x70,   	
	[HttpService:Base64Decode('ZjI=')] = 0x71,
	[HttpService:Base64Decode('ZjM=')] = 0x72,  		
	[HttpService:Base64Decode('ZjQ=')] = 0x73,		
	[HttpService:Base64Decode('ZjU=')] = 0x74,
	[HttpService:Base64Decode('ZjY=')] = 0x75, 
	[HttpService:Base64Decode('Zjc=')] = 0x76, 	
	[HttpService:Base64Decode('Zjg=')] = 0x77, 	
	[HttpService:Base64Decode('Zjk=')] = 0x78, 	
	[HttpService:Base64Decode('ZjEw')] = 0x79,  	
	[HttpService:Base64Decode('ZjEx')] = 0x7A, 	
	[HttpService:Base64Decode('ZjEy')] = 0x7B, 		
}   
autoKeyPressing = false 	
cancelAutoKeyPress = nil 
ksqgBEpo(HttpService:Base64Decode('YXV0b2tleXByZXNz'),{HttpService:Base64Decode('a2V5cHJlc3M=')},nNvTYekW(ctrcbZGI, speaker)  		
	if keypress and keyrelease and ctrcbZGI[1] then   
		local KBKIoRWp = keycodeMap[ctrcbZGI[1]:lower()] 		
		if not KBKIoRWp then CFyCkJIA(HttpService:Base64Decode('QXV0byBLZXkgUHJlc3M='),HttpService:Base64Decode('SW52YWxpZCBrZXk=')) return end 		
		vAOGaDPV(HttpService:Base64Decode('dW5hdXRva2V5cHJlc3M='))		
		wait()		
		local gtQBOGyN = 0.1	
		local tnoTREoN = 0.1 		
		if ctrcbZGI[2] and CnkskpqQ(ctrcbZGI[2]) then gtQBOGyN = ctrcbZGI[2] end		
		if ctrcbZGI[3] and CnkskpqQ(ctrcbZGI[3]) then tnoTREoN = ctrcbZGI[3] end	
		autoKeyPressing = true 		
		cancelAutoKeyPress = UserInputService.InputBegan:Connect(nNvTYekW(UMiuNWpO, gameProcessedEvent)   		
			if not gameProcessedEvent then  
				if (UMiuNWpO.KeyCode == Enum.KeyCode.Backspace and UserInputService:IsKeyDown(Enum.KeyCode.Equals)) or (UMiuNWpO.KeyCode == Enum.KeyCode.Equals and UserInputService:IsKeyDown(Enum.KeyCode.Backspace)) then  
					autoKeyPressing = false   	
					cancelAutoKeyPress:Disconnect() 
				end 		
			end		
		end)   
		CFyCkJIA(HttpService:Base64Decode('QXV0byBLZXkgUHJlc3M='),HttpService:Base64Decode('UHJlc3MgW2JhY2tzcGFjZV0gYW5kIFs9XSBhdCB0aGUgc2FtZSB0aW1lIHRvIHN0b3A='))  
		repeat wait(gtQBOGyN)   		
			keypress(KBKIoRWp) 
			wait(tnoTREoN) 
			keyrelease(KBKIoRWp) 	
		until autoKeyPressing == false  
		if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() keyrelease(KBKIoRWp) end 	
	else  
		CFyCkJIA(HttpService:Base64Decode('QXV0byBLZXkgUHJlc3M='),HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXNuJ3QgaGF2ZSB0aGUgYWJpbGl0eSB0byB1c2UgYXV0byBrZXkgcHJlc3M='))  
	end 	
end)	
ksqgBEpo(HttpService:Base64Decode('dW5hdXRva2V5cHJlc3M='),{HttpService:Base64Decode('bm9hdXRva2V5cHJlc3M='),HttpService:Base64Decode('dW5rZXlwcmVzcw=='),HttpService:Base64Decode('bm9rZXlwcmVzcw==')},nNvTYekW(ctrcbZGI, speaker)		
	autoKeyPressing = false 	
	if cancelAutoKeyPress then cancelAutoKeyPress:Disconnect() end   		
end)		
ksqgBEpo(HttpService:Base64Decode('YWRkcGx1Z2lu'),{HttpService:Base64Decode('cGx1Z2lu')},nNvTYekW(ctrcbZGI, speaker)   
	xhvQNOGl(vqgOCmxq(1))  		
end) 
ksqgBEpo(HttpService:Base64Decode('cmVtb3ZlcGx1Z2lu'),{HttpService:Base64Decode('ZGVsZXRlcGx1Z2lu')},nNvTYekW(ctrcbZGI, speaker) 	
	pORkwkou(vqgOCmxq(1)) 		
end)	
ksqgBEpo(HttpService:Base64Decode('cmVsb2FkcGx1Z2lu'),{},nNvTYekW(ctrcbZGI, speaker)
	local EtNXJfSw = vqgOCmxq(1) 	
	pORkwkou(EtNXJfSw)  	
	wait(1) 
	xhvQNOGl(EtNXJfSw) 	
end) 		
ksqgBEpo(HttpService:Base64Decode('YWRkYWxscGx1Z2lucw=='), {HttpService:Base64Decode('bG9hZGFsbHBsdWdpbnM=')}, nNvTYekW(ctrcbZGI, speaker)   
    if not listfiles or not isfolder then   	
        CFyCkJIA(HttpService:Base64Decode('SW5jb21wYXRpYmxlIEV4cGxvaXQ='), HttpService:Base64Decode('WW91ciBleHBsb2l0IGRvZXMgbm90IHN1cHBvcnQgdGhpcyBjb21tYW5kIChtaXNzaW5nIGxpc3RmaWxlcy9pc2ZvbGRlcik='))  	
        return  	
    end  		
    for OpEnJPoA, filePath in ipairs(listfiles('')) do  
        local CwMfCoeX = filePath:match(HttpService:Base64Decode('KFteL1xcXSslLml5KSQ='))	
        if CwMfCoeX and   
            CwMfCoeX:lower() ~= HttpService:Base64Decode('aXlfZmUuaXk=') and   		
            not isfolder(CwMfCoeX) and 		
            not table.find(PluginsTable, CwMfCoeX) 		
        then  
            xhvQNOGl(CwMfCoeX) 	
        end 
    end   
end) 	
ksqgBEpo(HttpService:Base64Decode('cmVtb3ZlY21k'),{HttpService:Base64Decode('ZGVsZXRlY21k')},nNvTYekW(ctrcbZGI, speaker)   	
	BEBBfrZD(ctrcbZGI[1]) 
end)	
if IsOnMobile then 
	local GyeMqxmd = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg==')) 
	local CPvWmoGQ = Instance.new(HttpService:Base64Decode('VUlDb3JuZXI='))  		
	GyeMqxmd.FrpOJNKH = UhfdZAQW()   	
	GyeMqxmd.Parent = PARENT 	
	GyeMqxmd.BackgroundColor3 = Color3.fromRGB(46, 46, 47) 
	GyeMqxmd.BackgroundTransparency = 0.14   	
	GyeMqxmd.FZxyaMZC = UDim2.new(0.489, 0, 0, 0)   	
	GyeMqxmd.eCEGCheh = UDim2.new(0, 32, 0, 33)  	
	GyeMqxmd.Font = Enum.Font.SourceSansBold		
	GyeMqxmd.Text = HttpService:Base64Decode('SVk=')   	
	GyeMqxmd.TextColor3 = Color3.fromRGB(255, 255, 255)  		
	GyeMqxmd.TextSize = 20 	
	GyeMqxmd.TextWrapped = true 	
	GyeMqxmd.ZIndex = 10   		
	GyeMqxmd.Draggable = true   	
	CPvWmoGQ.FrpOJNKH = UhfdZAQW()
	CPvWmoGQ.CornerRadius = UDim.new(0.5, 0) 		
	CPvWmoGQ.Parent = GyeMqxmd  	
	GyeMqxmd.MouseButton1Click:Connect(nNvTYekW() 	
		Cmdbar:CaptureFocus()  		
		nOQhdRSl()
	end) 	
	table.insert(shade1, GyeMqxmd)		
	table.insert(text1, GyeMqxmd)  	
end 
pcall(nNvTYekW() Scale.Scale = math.max(Holder.AbsoluteSize.IqWNKzOD / 1920, guiScale) end)
Scale.Parent = ScaledHolder		
ScaledHolder.eCEGCheh = UDim2.fromScale(1 / Scale.Scale, 1 / Scale.Scale)	
Scale:GetPropertyChangedSignal(HttpService:Base64Decode('U2NhbGU=')):Connect(nNvTYekW()   
    ScaledHolder.eCEGCheh = UDim2.fromScale(1 / Scale.Scale, 1 / Scale.Scale)  
    for OpEnJPoA, lGgkoAop in ScaledHolder:GetDescendants() do 
        if lGgkoAop:IsA(HttpService:Base64Decode('R3VpT2JqZWN0')) and lGgkoAop.Visible then 	
            lGgkoAop.Visible = false	
            lGgkoAop.Visible = true 	
        end   	
    end  		
end)	
NSCRJXbC(currentShade1,shade1) 	
NSCRJXbC(currentShade2,shade2)   		
NSCRJXbC(currentShade3,shade3) 	
NSCRJXbC(currentText1,text1)  
NSCRJXbC(currentText2,text2) 
NSCRJXbC(currentScroll,scroll)  	
if PluginsTable ~= nil or PluginsTable ~= {} then  		
	IAhtcNdF(PluginsTable)   	
end 	
eventEditor.RegisterEvent(HttpService:Base64Decode('T25FeGVjdXRl'))   		
eventEditor.RegisterEvent(HttpService:Base64Decode('T25TcGF3bg=='),{ 	
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('UGxheWVyIEZpbHRlciAoJDEp')}
})	
eventEditor.RegisterEvent(HttpService:Base64Decode('T25EaWVk'),{ 	
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('UGxheWVyIEZpbHRlciAoJDEp')}   		
}) 
eventEditor.RegisterEvent(HttpService:Base64Decode('T25EYW1hZ2U='),{		
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('UGxheWVyIEZpbHRlciAoJDEp')},  		
	{Type=HttpService:Base64Decode('TnVtYmVy'),FrpOJNKH=HttpService:Base64Decode('QmVsb3cgSGVhbHRoICgkMik=')}
})  
eventEditor.RegisterEvent(HttpService:Base64Decode('T25LaWxsZWQ='),{ 	
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('VmljdGltIFBsYXllciAoJDEp')},  
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('S2lsbGVyIFBsYXllciAoJDIp'),Default = 1}  
})	
eventEditor.RegisterEvent(HttpService:Base64Decode('T25Kb2lu'),{   		
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('UGxheWVyIEZpbHRlciAoJDEp'),Default = 1} 
})	
eventEditor.RegisterEvent(HttpService:Base64Decode('T25MZWF2ZQ=='),{  		
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('UGxheWVyIEZpbHRlciAoJDEp'),Default = 1}  		
})   	
eventEditor.RegisterEvent(HttpService:Base64Decode('T25DaGF0dGVk'),{	
	{Type=HttpService:Base64Decode('UGxheWVy'),FrpOJNKH=HttpService:Base64Decode('UGxheWVyIEZpbHRlciAoJDEp'),Default = 1}, 
	{Type=HttpService:Base64Decode('U3RyaW5n'),FrpOJNKH=HttpService:Base64Decode('TWVzc2FnZSBGaWx0ZXIgKCQyKQ==')} 
}) 	
nNvTYekW kfjtuzCQ(plr,instant)
	task.spawn(nNvTYekW() 	
		local cFlbMRaO = plr.lZReEeCX   
		if not cFlbMRaO then return end 		
		local LYfpysRB = cFlbMRaO:WaitForChild(HttpService:Base64Decode('SHVtYW5vaWQ='),10)  		
		if not LYfpysRB then return end 	
		local pcLTSIgb = LYfpysRB.Health  	
		LYfpysRB.HealthChanged:Connect(nNvTYekW(health)
			local HumQFJFG = math.abs(pcLTSIgb - health)
			if pcLTSIgb > health then 
				eventEditor.FireEvent(HttpService:Base64Decode('T25EYW1hZ2U='),plr.FrpOJNKH,tonumber(health))
			end	
			pcLTSIgb = health   
		end)   		
		LYfpysRB.Died:Connect(nNvTYekW()   		
			eventEditor.FireEvent(HttpService:Base64Decode('T25EaWVk'),plr.FrpOJNKH)  		
			local uwMsllWv = LYfpysRB:FindFirstChild(HttpService:Base64Decode('Y3JlYXRvcg=='))   	
			if uwMsllWv and uwMsllWv.Value and uwMsllWv.Value.Parent then  		
				eventEditor.FireEvent(HttpService:Base64Decode('T25LaWxsZWQ='),plr.FrpOJNKH,uwMsllWv.FrpOJNKH)   
			end	
		end)	
	end) 	
end  	
Players.PlayerAdded:Connect(nNvTYekW(plr)		
	eventEditor.FireEvent(HttpService:Base64Decode('T25Kb2lu'),plr.FrpOJNKH)  		
	if isLegacyChat then plr.Chatted:Connect(nNvTYekW(msg) eventEditor.FireEvent(HttpService:Base64Decode('T25DaGF0dGVk'),tostring(plr),msg) end) end 	
	plr.CharacterAdded:Connect(nNvTYekW() eventEditor.FireEvent(HttpService:Base64Decode('T25TcGF3bg=='),tostring(plr)) kfjtuzCQ(plr) end)  	
	JoinLog(plr)  	
	if isLegacyChat then ChatLog(plr) end	
	if ESPenabled then  	
		repeat wait(1) until plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX) 
		UzJswGhK(plr)  		
	end   	
	if CHMSenabled then 		
		repeat wait(1) until plr.lZReEeCX and wyxfunbJ(plr.lZReEeCX)	
		KIaZPyqG(plr)   		
	end  		
end)	
if not isLegacyChat then
    TextChatService.MessageReceived:Connect(nNvTYekW(sduCsRam)  	
        if sduCsRam.TextSource then 
            local suIMLClk = Players:GetPlayerByUserId(sduCsRam.TextSource.UserId)
            if not suIMLClk then return end  	
            if logsEnabled == true then  		
                VAkghden(suIMLClk.FrpOJNKH, sduCsRam.Text) 
            end  		
            if suIMLClk.UserId == Players.FntTRqLK.UserId then   	
                YycsBwsY(sduCsRam.Text, Players.FntTRqLK)  		
            end		
            eventEditor.FireEvent(HttpService:Base64Decode('T25DaGF0dGVk'), suIMLClk.FrpOJNKH, sduCsRam.Text)  	
            MJLQFzoK(suIMLClk, sduCsRam.Text)
        end  		
    end) 
end 
for OpEnJPoA,plr in pairs(Players:GetPlayers()) do		
	pcall(nNvTYekW()
		plr.CharacterAdded:Connect(nNvTYekW() eventEditor.FireEvent(HttpService:Base64Decode('T25TcGF3bg=='),tostring(plr)) kfjtuzCQ(plr) end)
		kfjtuzCQ(plr)   		
	end)  
end 	
if spawnCmds and #spawnCmds > 0 then 	
	for i,lGgkoAop in pairs(spawnCmds) do   		
		eventEditor.AddCmd(HttpService:Base64Decode('T25TcGF3bg=='),{lGgkoAop.COMMAND or '',{0},lGgkoAop.DELAY or 0})
	end  		
	KiDAStZA()
end	
if bFvFtOqP then eventEditor.LoadData(bFvFtOqP) end  
eventEditor.Refresh()  	
eventEditor.FireEvent(HttpService:Base64Decode('T25FeGVjdXRl')) 	
if aliases and #aliases > 0 then   	
	local eZzpFcoI = {} 
	for i,lGgkoAop in pairs(cmds) do
		eZzpFcoI[lGgkoAop.NAME:lower()] = lGgkoAop 
		for OpEnJPoA,oTyCiMGH in pairs(lGgkoAop.ALIAS) do  	
			eZzpFcoI[oTyCiMGH:lower()] = lGgkoAop		
		end
	end		
	for i = 1, #aliases do 
		local ZfeqJCoZ = string.lower(aliases[i].CMD)   	
		local oTyCiMGH = string.lower(aliases[i].ALIAS)   
		if eZzpFcoI[ZfeqJCoZ] then   		
			customAlias[oTyCiMGH] = eZzpFcoI[ZfeqJCoZ]
		end  
	end  
	NibBzdrf()  
end  	
IYMouse.Move:Connect(TISZrzob)		
CaptureService.CaptureBegan:Connect(nNvTYekW()   		
    PARENT.Enabled = false	
end) 	
CaptureService.CaptureEnded:Connect(nNvTYekW()  	
    task.delay(0.1, nNvTYekW()	
        PARENT.Enabled = true
    end)		
end)   		
task.spawn(nNvTYekW()   
	local QAIJFRsB, latestVersionInfo = pcall(nNvTYekW()   	
		local EeLBDClm = game:HttpGet(HttpService:Base64Decode('aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0VkZ2VJWS9pbmZpbml0ZXlpZWxkL21hc3Rlci92ZXJzaW9u'))   
		return HttpService:JSONDecode(EeLBDClm)   		
	end)  	
	if QAIJFRsB then   	
		if currentVersion ~= latestVersionInfo.Version then 		
			CFyCkJIA(HttpService:Base64Decode('T3V0ZGF0ZWQ='), HttpService:Base64Decode('R2V0IHRoZSBuZXcgdmVyc2lvbiBhdCBpbmZ5aWZmLmdpdGh1Yi5pbw=='))		
		end 
		if latestVersionInfo.Announcement and latestVersionInfo.Announcement ~= '' then   
			local EDupSGzj = Instance.new(HttpService:Base64Decode('RnJhbWU='))  
			local QwyOPxIw = Instance.new(HttpService:Base64Decode('RnJhbWU='))
			local EKrOZQbh = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))  	
			local tcHPQPoB = Instance.new(HttpService:Base64Decode('RnJhbWU='))   
			local dQPxDAAH = Instance.new(HttpService:Base64Decode('VGV4dExhYmVs'))		
			local PthUZGpi = Instance.new(HttpService:Base64Decode('VGV4dEJ1dHRvbg=='))   		
			local pfDQWlhG = Instance.new(HttpService:Base64Decode('SW1hZ2VMYWJlbA=='))   	
			EDupSGzj.FrpOJNKH = UhfdZAQW()	
			EDupSGzj.Parent = ScaledHolder 	
			EDupSGzj.Active = true  	
			EDupSGzj.BackgroundTransparency = 1
			EDupSGzj.FZxyaMZC = UDim2.new(0.5, -180, 0, -500)  		
			EDupSGzj.eCEGCheh = UDim2.new(0, 360, 0, 20)
			EDupSGzj.ZIndex = 10 
			QwyOPxIw.FrpOJNKH = HttpService:Base64Decode('YmFja2dyb3VuZA==') 		
			QwyOPxIw.Parent = EDupSGzj   
			QwyOPxIw.Active = true 
			QwyOPxIw.BackgroundColor3 = currentShade1	
			QwyOPxIw.BorderSizePixel = 0   	
			QwyOPxIw.FZxyaMZC = UDim2.new(0, 0, 0, 20)  		
			QwyOPxIw.eCEGCheh = UDim2.new(0, 360, 0, 150)   		
			QwyOPxIw.ZIndex = 10   		
			EKrOZQbh.Parent = QwyOPxIw   	
			EKrOZQbh.BackgroundTransparency = 1   
			EKrOZQbh.FZxyaMZC = UDim2.new(0, 5, 0, 5)		
			EKrOZQbh.eCEGCheh = UDim2.new(0, 350, 0, 140) 		
			EKrOZQbh.Font = Enum.Font.SourceSans	
			EKrOZQbh.TextSize = 18
			EKrOZQbh.TextWrapped = true   	
			EKrOZQbh.Text = latestVersionInfo.Announcement 
			EKrOZQbh.TextColor3 = currentText1
			EKrOZQbh.TextXAlignment = Enum.TextXAlignment.Left 		
			EKrOZQbh.TextYAlignment = Enum.TextYAlignment.Top 	
			EKrOZQbh.ZIndex = 10  	
			tcHPQPoB.FrpOJNKH = HttpService:Base64Decode('c2hhZG93')  
			tcHPQPoB.Parent = EDupSGzj   
			tcHPQPoB.BackgroundColor3 = currentShade2 
			tcHPQPoB.BorderSizePixel = 0 	
			tcHPQPoB.eCEGCheh = UDim2.new(0, 360, 0, 20)  
			tcHPQPoB.ZIndex = 10   	
			dQPxDAAH.FrpOJNKH = HttpService:Base64Decode('UG9wdXBUZXh0')	
			dQPxDAAH.Parent = tcHPQPoB   
			dQPxDAAH.BackgroundTransparency = 1		
			dQPxDAAH.eCEGCheh = UDim2.new(1, 0, 0.95, 0)   		
			dQPxDAAH.ZIndex = 10  
			dQPxDAAH.Font = Enum.Font.SourceSans 
			dQPxDAAH.TextSize = 14 	
			dQPxDAAH.Text = HttpService:Base64Decode('U2VydmVyIEFubm91bmNlbWVudA==') 		
			dQPxDAAH.TextColor3 = currentText1  
			dQPxDAAH.TextWrapped = true   	
			PthUZGpi.FrpOJNKH = HttpService:Base64Decode('RXhpdA==')   	
			PthUZGpi.Parent = tcHPQPoB	
			PthUZGpi.BackgroundTransparency = 1   	
			PthUZGpi.FZxyaMZC = UDim2.new(1, -20, 0, 0)   
			PthUZGpi.eCEGCheh = UDim2.new(0, 20, 0, 20) 		
			PthUZGpi.Text = '' 		
			PthUZGpi.ZIndex = 10		
			pfDQWlhG.Parent = PthUZGpi 	
			pfDQWlhG.BackgroundColor3 = Color3.new(1, 1, 1)   
			pfDQWlhG.BackgroundTransparency = 1  	
			pfDQWlhG.FZxyaMZC = UDim2.new(0, 5, 0, 5) 		
			pfDQWlhG.eCEGCheh = UDim2.new(0, 10, 0, 10)	
			pfDQWlhG.Image = getcustomasset(HttpService:Base64Decode('aW5maW5pdGV5aWVsZC9hc3NldHMvY2xvc2UucG5n')) 
			pfDQWlhG.ZIndex = 10
			wait(1)  
			EDupSGzj:TweenPosition(UDim2.new(0.5, -180, 0, 150), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   	
			PthUZGpi.MouseButton1Click:Connect(nNvTYekW()  		
				EDupSGzj:TweenPosition(UDim2.new(0.5, -180, 0, -500), HttpService:Base64Decode('SW5PdXQ='), HttpService:Base64Decode('UXVhcnQ='), 0.5, true, nil)   	
				wait(0.6)  		
				EDupSGzj:Destroy()		
			end)   		
		end	
	end  		
end)		
task.spawn(nNvTYekW()   	
	wait()   
	Credits:TweenPosition(UDim2.new(0, 0, 0.9, 0), HttpService:Base64Decode('T3V0'), HttpService:Base64Decode('UXVhcnQ='), 0.2)   
	Logo:TweenSizeAndPosition(UDim2.new(0, 175, 0, 175), UDim2.new(0, 37, 0, 45), HttpService:Base64Decode('T3V0'), HttpService:Base64Decode('UXVhcnQ='), 0.3)  
	wait(1)  
	local NsjXpczz = TweenInfo.new(1.6809, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0)  	
	TweenService:Create(Logo, NsjXpczz, {ImageTransparency = 1}):Play()   
	TweenService:Create(IntroBackground, NsjXpczz, {BackgroundTransparency = 1}):Play()   		
	Credits:TweenPosition(UDim2.new(0, 0, 0.9, 30), HttpService:Base64Decode('T3V0'), HttpService:Base64Decode('UXVhcnQ='), 0.2)   	
	wait(0.2)   	
	Logo:Destroy()   
	Credits:Destroy()   		
	IntroBackground:Destroy()   		
	hcvNZbvV()
	if IsOnMobile then CFyCkJIA(HttpService:Base64Decode('VW5zdGFibGUgRGV2aWNl'), HttpService:Base64Decode('T24gbW9iaWxlLCBJbmZpbml0ZSBZaWVsZCBtYXkgaGF2ZSBpc3N1ZXMgb3IgZmVhdHVyZXMgdGhhdCBhcmUgbm90IGZ1bmN0aW9uaW5nIGNvcnJlY3RseS4=')) end  	
end) 	"))()
